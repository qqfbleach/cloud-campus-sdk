/*
 * 时间配置
 * 时间配置北向接口，主要特性： · 查询时区资源 · 查询时间配置信息（包括时区、夏令时和NTP） · 修改时间配置（包括时区、夏令时和NTP） . 查询站点模板时间配置信息（包括时区、夏令时和NTP） . 修改站点模板时间配置信息（包括时区、夏令时和NTP） 
 *
 * OpenAPI spec version: 1.1.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.huawei.cloudcampus.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * 时间配置数据结构。
 */
@ApiModel(description = "时间配置数据结构。")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaSdnClientCodegen", date = "2019-12-17T15:19:33.353+08:00")
public class TimeConfigDto {
  @SerializedName("timezoneId")
  private String timezoneId = null;

  @SerializedName("enableDaylight")
  private Boolean enableDaylight = null;

  @SerializedName("ntpList")
  private List<String> ntpList = null;

  public TimeConfigDto timezoneId(String timezoneId) {
    this.timezoneId = timezoneId;
    return this;
  }

   /**
   * 时区ID，字符串格式为UUID。
   * return timezoneId
  **/
  @ApiModelProperty(required = true, value = "时区ID，字符串格式为UUID。")
  public String getTimezoneId() {
    return timezoneId;
  }

   /**
   * 时区ID，字符串格式为UUID。
   * Param timezoneId
  **/
  public void setTimezoneId(String timezoneId) {
    this.timezoneId = timezoneId;
  }

  public TimeConfigDto enableDaylight(Boolean enableDaylight) {
    this.enableDaylight = enableDaylight;
    return this;
  }

   /**
   * 夏令时使能开关，取值：true（使能）；false（未使能）。夏令时使能功能仅支持AR设备。
   * return enableDaylight
  **/
  @ApiModelProperty(value = "夏令时使能开关，取值：true（使能）；false（未使能）。夏令时使能功能仅支持AR设备。")
  public Boolean getEnableDaylight() {
    return enableDaylight;
  }

   /**
   * 夏令时使能开关，取值：true（使能）；false（未使能）。夏令时使能功能仅支持AR设备。
   * Param enableDaylight
  **/
  public void setEnableDaylight(Boolean enableDaylight) {
    this.enableDaylight = enableDaylight;
  }

  public TimeConfigDto ntpList(List<String> ntpList) {
    this.ntpList = ntpList;
    return this;
  }

  public TimeConfigDto addNtpListItem(String ntpListItem) {
    if (this.ntpList == null) {
      this.ntpList = new ArrayList<String>();
    }
    this.ntpList.add(ntpListItem);
    return this;
  }

   /**
   * NTP服务器地址集合，元素为IP地址字符串。
   * return ntpList
  **/
  @ApiModelProperty(value = "NTP服务器地址集合，元素为IP地址字符串。")
  public List<String> getNtpList() {
    return ntpList;
  }

   /**
   * NTP服务器地址集合，元素为IP地址字符串。
   * Param ntpList
  **/
  public void setNtpList(List<String> ntpList) {
    this.ntpList = ntpList;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TimeConfigDto timeConfigDto = (TimeConfigDto) o;
    return Objects.equals(this.timezoneId, timeConfigDto.timezoneId) &&
        Objects.equals(this.enableDaylight, timeConfigDto.enableDaylight) &&
        Objects.equals(this.ntpList, timeConfigDto.ntpList);
  }

  @Override
  public int hashCode() {
    return Objects.hash(timezoneId, enableDaylight, ntpList);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TimeConfigDto {\n");
    
    sb.append("    timezoneId: ").append(toIndentedString(timezoneId)).append("\n");
    sb.append("    enableDaylight: ").append(toIndentedString(enableDaylight)).append("\n");
    sb.append("    ntpList: ").append(toIndentedString(ntpList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

