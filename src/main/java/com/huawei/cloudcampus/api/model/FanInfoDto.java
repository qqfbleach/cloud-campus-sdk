/*
 * 框式交换机板卡信息操作
 * 框式上云相关操作接口： 场景：对框式交换机信息查询操作的第三方接口。
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.huawei.cloudcampus.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * 风扇信息结果。
 */
@ApiModel(description = "风扇信息结果。")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaSdnClientCodegen", date = "2019-12-17T15:19:14.794+08:00")
public class FanInfoDto {
  @SerializedName("id")
  private String id = null;

  @SerializedName("onlineState")
  private String onlineState = null;

  @SerializedName("registerState")
  private String registerState = null;

  @SerializedName("runningState")
  private String runningState = null;

  @SerializedName("speed")
  private Integer speed = null;

  @SerializedName("mode")
  private String mode = null;

  @SerializedName("airFlow")
  private String airFlow = null;

  public FanInfoDto id(String id) {
    this.id = id;
    return this;
  }

   /**
   * 风扇ID。
   * return id
  **/
  @ApiModelProperty(value = "风扇ID。")
  public String getId() {
    return id;
  }

   /**
   * 风扇ID。
   * Param id
  **/
  public void setId(String id) {
    this.id = id;
  }

  public FanInfoDto onlineState(String onlineState) {
    this.onlineState = onlineState;
    return this;
  }

   /**
   * 风扇在线状态。取值范围：0（代表present在位），1（代表absent不在位）。
   * return onlineState
  **/
  @ApiModelProperty(value = "风扇在线状态。取值范围：0（代表present在位），1（代表absent不在位）。")
  public String getOnlineState() {
    return onlineState;
  }

   /**
   * 风扇在线状态。取值范围：0（代表present在位），1（代表absent不在位）。
   * Param onlineState
  **/
  public void setOnlineState(String onlineState) {
    this.onlineState = onlineState;
  }

  public FanInfoDto registerState(String registerState) {
    this.registerState = registerState;
    return this;
  }

   /**
   * 风扇注册状态。取值范围：0（代表unregisted未注册），1（代表registed已注册）。
   * return registerState
  **/
  @ApiModelProperty(value = "风扇注册状态。取值范围：0（代表unregisted未注册），1（代表registed已注册）。")
  public String getRegisterState() {
    return registerState;
  }

   /**
   * 风扇注册状态。取值范围：0（代表unregisted未注册），1（代表registed已注册）。
   * Param registerState
  **/
  public void setRegisterState(String registerState) {
    this.registerState = registerState;
  }

  public FanInfoDto runningState(String runningState) {
    this.runningState = runningState;
    return this;
  }

   /**
   * 风扇运行状态 。取值范围：0（代表unknown未知），1（代表normal正常），2（代表abnormal不正常）。
   * return runningState
  **/
  @ApiModelProperty(value = "风扇运行状态 。取值范围：0（代表unknown未知），1（代表normal正常），2（代表abnormal不正常）。")
  public String getRunningState() {
    return runningState;
  }

   /**
   * 风扇运行状态 。取值范围：0（代表unknown未知），1（代表normal正常），2（代表abnormal不正常）。
   * Param runningState
  **/
  public void setRunningState(String runningState) {
    this.runningState = runningState;
  }

  public FanInfoDto speed(Integer speed) {
    this.speed = speed;
    return this;
  }

   /**
   * 风扇转速，转速与全速的百分比，取值范围1-100。
   * return speed
  **/
  @ApiModelProperty(value = "风扇转速，转速与全速的百分比，取值范围1-100。")
  public Integer getSpeed() {
    return speed;
  }

   /**
   * 风扇转速，转速与全速的百分比，取值范围1-100。
   * Param speed
  **/
  public void setSpeed(Integer speed) {
    this.speed = speed;
  }

  public FanInfoDto mode(String mode) {
    this.mode = mode;
    return this;
  }

   /**
   * 风扇模式，取值范围：1（代表AUTO：自动调节转速）；2（代表MANUAL：固定转速）；0（代表UNKNOW：风扇不在位）。
   * return mode
  **/
  @ApiModelProperty(value = "风扇模式，取值范围：1（代表AUTO：自动调节转速）；2（代表MANUAL：固定转速）；0（代表UNKNOW：风扇不在位）。")
  public String getMode() {
    return mode;
  }

   /**
   * 风扇模式，取值范围：1（代表AUTO：自动调节转速）；2（代表MANUAL：固定转速）；0（代表UNKNOW：风扇不在位）。
   * Param mode
  **/
  public void setMode(String mode) {
    this.mode = mode;
  }

  public FanInfoDto airFlow(String airFlow) {
    this.airFlow = airFlow;
    return this;
  }

   /**
   * 风扇的风向，取值范围：Back-to-Side（表示风由后面向两侧吹）；Side-to-Back（表示风由两侧向后面吹）；Side-to-Side（表示风由一侧往另外一侧吹）；-（风扇不在位）。
   * return airFlow
  **/
  @ApiModelProperty(value = "风扇的风向，取值范围：Back-to-Side（表示风由后面向两侧吹）；Side-to-Back（表示风由两侧向后面吹）；Side-to-Side（表示风由一侧往另外一侧吹）；-（风扇不在位）。")
  public String getAirFlow() {
    return airFlow;
  }

   /**
   * 风扇的风向，取值范围：Back-to-Side（表示风由后面向两侧吹）；Side-to-Back（表示风由两侧向后面吹）；Side-to-Side（表示风由一侧往另外一侧吹）；-（风扇不在位）。
   * Param airFlow
  **/
  public void setAirFlow(String airFlow) {
    this.airFlow = airFlow;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FanInfoDto fanInfoDto = (FanInfoDto) o;
    return Objects.equals(this.id, fanInfoDto.id) &&
        Objects.equals(this.onlineState, fanInfoDto.onlineState) &&
        Objects.equals(this.registerState, fanInfoDto.registerState) &&
        Objects.equals(this.runningState, fanInfoDto.runningState) &&
        Objects.equals(this.speed, fanInfoDto.speed) &&
        Objects.equals(this.mode, fanInfoDto.mode) &&
        Objects.equals(this.airFlow, fanInfoDto.airFlow);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, onlineState, registerState, runningState, speed, mode, airFlow);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FanInfoDto {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    onlineState: ").append(toIndentedString(onlineState)).append("\n");
    sb.append("    registerState: ").append(toIndentedString(registerState)).append("\n");
    sb.append("    runningState: ").append(toIndentedString(runningState)).append("\n");
    sb.append("    speed: ").append(toIndentedString(speed)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    airFlow: ").append(toIndentedString(airFlow)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

