/*
 * 终端客流量数据信息查询
 * 1、查询设备标签。 2、查询历史客户流量。 3、查询实时客户流量，返回最近5分钟内接入客户流量。 4、查询访客、路人、接入用户的历史趋势。 5、查询访客驻留时长的历史趋势。 6、查询回头客记录。 
 *
 * OpenAPI spec version: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.huawei.cloudcampus.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.huawei.cloudcampus.api.model.Count;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * 终端客流量历史数据模型。
 */
@ApiModel(description = "终端客流量历史数据模型。")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaSdnClientCodegen", date = "2019-12-17T15:18:32.011+08:00")
public class FlowDistrModel {
  @SerializedName("targetName")
  private String targetName = null;

  @SerializedName("counts")
  private List<Count> counts = null;

  public FlowDistrModel targetName(String targetName) {
    this.targetName = targetName;
    return this;
  }

   /**
   * \&quot;capture_rate\&quot;：终端捕获率。 \&quot;passersby\&quot;：客户类型，路人。 \&quot;visitors\&quot;：客户数量，访客。 \&quot;connected\&quot;：客户数量，接入用户。 \&quot;within_one_hr\&quot;：驻留时长小于一小时的客户数量。 \&quot;one_hr_to_six_hrs\&quot;：驻留时长大于一小时小于6小时的客户数量。 \&quot;more_than_six_hrs\&quot;：驻留时长大于6小时的客户数量。 \&quot;average_staytime\&quot;：平均驻留时长的客户数量。 \&quot;first_time\&quot;：首次访问的客户数量。 \&quot;occasionally\&quot;：偶尔访问的客户数量。 \&quot;regularly\&quot;：经常访问的客户数量。 \&quot;frequently\&quot;：频繁访问的客户数量。 \&quot;repeat_rate\&quot;：重复访问率。 \&quot;humanflow\&quot;：客流量。 
   * return targetName
  **/
  @ApiModelProperty(value = "\"capture_rate\"：终端捕获率。 \"passersby\"：客户类型，路人。 \"visitors\"：客户数量，访客。 \"connected\"：客户数量，接入用户。 \"within_one_hr\"：驻留时长小于一小时的客户数量。 \"one_hr_to_six_hrs\"：驻留时长大于一小时小于6小时的客户数量。 \"more_than_six_hrs\"：驻留时长大于6小时的客户数量。 \"average_staytime\"：平均驻留时长的客户数量。 \"first_time\"：首次访问的客户数量。 \"occasionally\"：偶尔访问的客户数量。 \"regularly\"：经常访问的客户数量。 \"frequently\"：频繁访问的客户数量。 \"repeat_rate\"：重复访问率。 \"humanflow\"：客流量。 ")
  public String getTargetName() {
    return targetName;
  }

   /**
   * \&quot;capture_rate\&quot;：终端捕获率。 \&quot;passersby\&quot;：客户类型，路人。 \&quot;visitors\&quot;：客户数量，访客。 \&quot;connected\&quot;：客户数量，接入用户。 \&quot;within_one_hr\&quot;：驻留时长小于一小时的客户数量。 \&quot;one_hr_to_six_hrs\&quot;：驻留时长大于一小时小于6小时的客户数量。 \&quot;more_than_six_hrs\&quot;：驻留时长大于6小时的客户数量。 \&quot;average_staytime\&quot;：平均驻留时长的客户数量。 \&quot;first_time\&quot;：首次访问的客户数量。 \&quot;occasionally\&quot;：偶尔访问的客户数量。 \&quot;regularly\&quot;：经常访问的客户数量。 \&quot;frequently\&quot;：频繁访问的客户数量。 \&quot;repeat_rate\&quot;：重复访问率。 \&quot;humanflow\&quot;：客流量。 
   * Param targetName
  **/
  public void setTargetName(String targetName) {
    this.targetName = targetName;
  }

  public FlowDistrModel counts(List<Count> counts) {
    this.counts = counts;
    return this;
  }

  public FlowDistrModel addCountsItem(Count countsItem) {
    if (this.counts == null) {
      this.counts = new ArrayList<Count>();
    }
    this.counts.add(countsItem);
    return this;
  }

   /**
   * 对应时间的客流量。
   * return counts
  **/
  @ApiModelProperty(value = "对应时间的客流量。")
  public List<Count> getCounts() {
    return counts;
  }

   /**
   * 对应时间的客流量。
   * Param counts
  **/
  public void setCounts(List<Count> counts) {
    this.counts = counts;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FlowDistrModel flowDistrModel = (FlowDistrModel) o;
    return Objects.equals(this.targetName, flowDistrModel.targetName) &&
        Objects.equals(this.counts, flowDistrModel.counts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(targetName, counts);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FlowDistrModel {\n");
    
    sb.append("    targetName: ").append(toIndentedString(targetName)).append("\n");
    sb.append("    counts: ").append(toIndentedString(counts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

