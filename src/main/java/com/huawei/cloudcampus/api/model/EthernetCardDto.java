/*
 * AP网口IOT插卡管理
 * AP网口IOT插卡查询及操作接口。 场景：对AP网口IOT插卡查询及操作的第三方接口。
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.huawei.cloudcampus.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * 网口插卡信息。
 */
@ApiModel(description = "网口插卡信息。")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaSdnClientCodegen", date = "2019-12-17T15:18:14.620+08:00")
public class EthernetCardDto {
  @SerializedName("apName")
  private String apName = null;

  @SerializedName("apEsn")
  private String apEsn = null;

  @SerializedName("interfaceName")
  private String interfaceName = null;

  @SerializedName("cardSlot")
  private Integer cardSlot = null;

  /**
   * 卡状态。
   */
  @JsonAdapter(CardStatusEnum.Adapter.class)
  public enum CardStatusEnum {
    PRESENT("present"),
    
    ABSENT("absent");

    private String value;

    CardStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CardStatusEnum fromValue(String text) {
      for (CardStatusEnum b : CardStatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<CardStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CardStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CardStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return CardStatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("cardStatus")
  private CardStatusEnum cardStatus = null;

  /**
   * 卡连接状态。
   */
  @JsonAdapter(CardConnectStatusEnum.Adapter.class)
  public enum CardConnectStatusEnum {
    MATCH("match"),
    
    MISMATCH("mismatch");

    private String value;

    CardConnectStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CardConnectStatusEnum fromValue(String text) {
      for (CardConnectStatusEnum b : CardConnectStatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<CardConnectStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CardConnectStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CardConnectStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return CardConnectStatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("cardConnectStatus")
  private CardConnectStatusEnum cardConnectStatus = null;

  @SerializedName("interfaceIndex")
  private Integer interfaceIndex = null;

  @SerializedName("deviceId")
  private String deviceId = null;

  @SerializedName("deviceStatus")
  private Integer deviceStatus = null;

  @SerializedName("upwardSpeed")
  private Long upwardSpeed = null;

  @SerializedName("downwardSpeed")
  private Long downwardSpeed = null;

  @SerializedName("upwardTraffic")
  private Long upwardTraffic = null;

  @SerializedName("downwardTraffic")
  private Long downwardTraffic = null;

  @SerializedName("receivePackages")
  private Long receivePackages = null;

  @SerializedName("sendPackages")
  private Long sendPackages = null;

  @SerializedName("cardIp")
  private String cardIp = null;

  @SerializedName("cardMac")
  private String cardMac = null;

  @SerializedName("cardSn")
  private String cardSn = null;

  @SerializedName("centerFrequency")
  private Long centerFrequency = null;

  @SerializedName("bandWidth")
  private Long bandWidth = null;

  @SerializedName("serverConnectStatus")
  private Integer serverConnectStatus = null;

  public EthernetCardDto apName(String apName) {
    this.apName = apName;
    return this;
  }

   /**
   * AP名称。
   * return apName
  **/
  @ApiModelProperty(value = "AP名称。")
  public String getApName() {
    return apName;
  }

   /**
   * AP名称。
   * Param apName
  **/
  public void setApName(String apName) {
    this.apName = apName;
  }

  public EthernetCardDto apEsn(String apEsn) {
    this.apEsn = apEsn;
    return this;
  }

   /**
   * AP序列号。
   * return apEsn
  **/
  @ApiModelProperty(value = "AP序列号。")
  public String getApEsn() {
    return apEsn;
  }

   /**
   * AP序列号。
   * Param apEsn
  **/
  public void setApEsn(String apEsn) {
    this.apEsn = apEsn;
  }

  public EthernetCardDto interfaceName(String interfaceName) {
    this.interfaceName = interfaceName;
    return this;
  }

   /**
   * 接口名称。
   * return interfaceName
  **/
  @ApiModelProperty(value = "接口名称。")
  public String getInterfaceName() {
    return interfaceName;
  }

   /**
   * 接口名称。
   * Param interfaceName
  **/
  public void setInterfaceName(String interfaceName) {
    this.interfaceName = interfaceName;
  }

  public EthernetCardDto cardSlot(Integer cardSlot) {
    this.cardSlot = cardSlot;
    return this;
  }

   /**
   * 卡槽号。
   * minimum: 0
   * maximum: 8
   * return cardSlot
  **/
  @ApiModelProperty(value = "卡槽号。")
  public Integer getCardSlot() {
    return cardSlot;
  }

   /**
   * 卡槽号。
   * minimum: 0
   * maximum: 8
   * Param cardSlot
  **/
  public void setCardSlot(Integer cardSlot) {
    this.cardSlot = cardSlot;
  }

  public EthernetCardDto cardStatus(CardStatusEnum cardStatus) {
    this.cardStatus = cardStatus;
    return this;
  }

   /**
   * 卡状态。
   * return cardStatus
  **/
  @ApiModelProperty(value = "卡状态。")
  public CardStatusEnum getCardStatus() {
    return cardStatus;
  }

   /**
   * 卡状态。
   * Param cardStatus
  **/
  public void setCardStatus(CardStatusEnum cardStatus) {
    this.cardStatus = cardStatus;
  }

  public EthernetCardDto cardConnectStatus(CardConnectStatusEnum cardConnectStatus) {
    this.cardConnectStatus = cardConnectStatus;
    return this;
  }

   /**
   * 卡连接状态。
   * return cardConnectStatus
  **/
  @ApiModelProperty(value = "卡连接状态。")
  public CardConnectStatusEnum getCardConnectStatus() {
    return cardConnectStatus;
  }

   /**
   * 卡连接状态。
   * Param cardConnectStatus
  **/
  public void setCardConnectStatus(CardConnectStatusEnum cardConnectStatus) {
    this.cardConnectStatus = cardConnectStatus;
  }

  public EthernetCardDto interfaceIndex(Integer interfaceIndex) {
    this.interfaceIndex = interfaceIndex;
    return this;
  }

   /**
   * 接口索引。
   * return interfaceIndex
  **/
  @ApiModelProperty(value = "接口索引。")
  public Integer getInterfaceIndex() {
    return interfaceIndex;
  }

   /**
   * 接口索引。
   * Param interfaceIndex
  **/
  public void setInterfaceIndex(Integer interfaceIndex) {
    this.interfaceIndex = interfaceIndex;
  }

  public EthernetCardDto deviceId(String deviceId) {
    this.deviceId = deviceId;
    return this;
  }

   /**
   * 设备ID，UUID格式。
   * return deviceId
  **/
  @ApiModelProperty(value = "设备ID，UUID格式。")
  public String getDeviceId() {
    return deviceId;
  }

   /**
   * 设备ID，UUID格式。
   * Param deviceId
  **/
  public void setDeviceId(String deviceId) {
    this.deviceId = deviceId;
  }

  public EthernetCardDto deviceStatus(Integer deviceStatus) {
    this.deviceStatus = deviceStatus;
    return this;
  }

   /**
   * 设备状态。取值范围：0---正常，1---告警，3---离线，4---未注册。
   * return deviceStatus
  **/
  @ApiModelProperty(value = "设备状态。取值范围：0---正常，1---告警，3---离线，4---未注册。")
  public Integer getDeviceStatus() {
    return deviceStatus;
  }

   /**
   * 设备状态。取值范围：0---正常，1---告警，3---离线，4---未注册。
   * Param deviceStatus
  **/
  public void setDeviceStatus(Integer deviceStatus) {
    this.deviceStatus = deviceStatus;
  }

  public EthernetCardDto upwardSpeed(Long upwardSpeed) {
    this.upwardSpeed = upwardSpeed;
    return this;
  }

   /**
   * 接口上行速率，单位是bps。
   * return upwardSpeed
  **/
  @ApiModelProperty(value = "接口上行速率，单位是bps。")
  public Long getUpwardSpeed() {
    return upwardSpeed;
  }

   /**
   * 接口上行速率，单位是bps。
   * Param upwardSpeed
  **/
  public void setUpwardSpeed(Long upwardSpeed) {
    this.upwardSpeed = upwardSpeed;
  }

  public EthernetCardDto downwardSpeed(Long downwardSpeed) {
    this.downwardSpeed = downwardSpeed;
    return this;
  }

   /**
   * 接口下行速率，单位是bps。
   * return downwardSpeed
  **/
  @ApiModelProperty(value = "接口下行速率，单位是bps。")
  public Long getDownwardSpeed() {
    return downwardSpeed;
  }

   /**
   * 接口下行速率，单位是bps。
   * Param downwardSpeed
  **/
  public void setDownwardSpeed(Long downwardSpeed) {
    this.downwardSpeed = downwardSpeed;
  }

  public EthernetCardDto upwardTraffic(Long upwardTraffic) {
    this.upwardTraffic = upwardTraffic;
    return this;
  }

   /**
   * 接口上行流量，单位是Bytes。
   * return upwardTraffic
  **/
  @ApiModelProperty(value = "接口上行流量，单位是Bytes。")
  public Long getUpwardTraffic() {
    return upwardTraffic;
  }

   /**
   * 接口上行流量，单位是Bytes。
   * Param upwardTraffic
  **/
  public void setUpwardTraffic(Long upwardTraffic) {
    this.upwardTraffic = upwardTraffic;
  }

  public EthernetCardDto downwardTraffic(Long downwardTraffic) {
    this.downwardTraffic = downwardTraffic;
    return this;
  }

   /**
   * 接口下行流量，单位是Bytes。
   * return downwardTraffic
  **/
  @ApiModelProperty(value = "接口下行流量，单位是Bytes。")
  public Long getDownwardTraffic() {
    return downwardTraffic;
  }

   /**
   * 接口下行流量，单位是Bytes。
   * Param downwardTraffic
  **/
  public void setDownwardTraffic(Long downwardTraffic) {
    this.downwardTraffic = downwardTraffic;
  }

  public EthernetCardDto receivePackages(Long receivePackages) {
    this.receivePackages = receivePackages;
    return this;
  }

   /**
   * 接口上报周期内接收报文数。
   * return receivePackages
  **/
  @ApiModelProperty(value = "接口上报周期内接收报文数。")
  public Long getReceivePackages() {
    return receivePackages;
  }

   /**
   * 接口上报周期内接收报文数。
   * Param receivePackages
  **/
  public void setReceivePackages(Long receivePackages) {
    this.receivePackages = receivePackages;
  }

  public EthernetCardDto sendPackages(Long sendPackages) {
    this.sendPackages = sendPackages;
    return this;
  }

   /**
   * 接口上报周期内发送报文数。
   * return sendPackages
  **/
  @ApiModelProperty(value = "接口上报周期内发送报文数。")
  public Long getSendPackages() {
    return sendPackages;
  }

   /**
   * 接口上报周期内发送报文数。
   * Param sendPackages
  **/
  public void setSendPackages(Long sendPackages) {
    this.sendPackages = sendPackages;
  }

  public EthernetCardDto cardIp(String cardIp) {
    this.cardIp = cardIp;
    return this;
  }

   /**
   * 插卡IP。
   * return cardIp
  **/
  @ApiModelProperty(value = "插卡IP。")
  public String getCardIp() {
    return cardIp;
  }

   /**
   * 插卡IP。
   * Param cardIp
  **/
  public void setCardIp(String cardIp) {
    this.cardIp = cardIp;
  }

  public EthernetCardDto cardMac(String cardMac) {
    this.cardMac = cardMac;
    return this;
  }

   /**
   * 插卡MAC。
   * return cardMac
  **/
  @ApiModelProperty(value = "插卡MAC。")
  public String getCardMac() {
    return cardMac;
  }

   /**
   * 插卡MAC。
   * Param cardMac
  **/
  public void setCardMac(String cardMac) {
    this.cardMac = cardMac;
  }

  public EthernetCardDto cardSn(String cardSn) {
    this.cardSn = cardSn;
    return this;
  }

   /**
   * 插卡SN编号。
   * return cardSn
  **/
  @ApiModelProperty(value = "插卡SN编号。")
  public String getCardSn() {
    return cardSn;
  }

   /**
   * 插卡SN编号。
   * Param cardSn
  **/
  public void setCardSn(String cardSn) {
    this.cardSn = cardSn;
  }

  public EthernetCardDto centerFrequency(Long centerFrequency) {
    this.centerFrequency = centerFrequency;
    return this;
  }

   /**
   * 中心频率，单位是GHz。
   * return centerFrequency
  **/
  @ApiModelProperty(value = "中心频率，单位是GHz。")
  public Long getCenterFrequency() {
    return centerFrequency;
  }

   /**
   * 中心频率，单位是GHz。
   * Param centerFrequency
  **/
  public void setCenterFrequency(Long centerFrequency) {
    this.centerFrequency = centerFrequency;
  }

  public EthernetCardDto bandWidth(Long bandWidth) {
    this.bandWidth = bandWidth;
    return this;
  }

   /**
   * 带宽，单位是Bytes。
   * return bandWidth
  **/
  @ApiModelProperty(value = "带宽，单位是Bytes。")
  public Long getBandWidth() {
    return bandWidth;
  }

   /**
   * 带宽，单位是Bytes。
   * Param bandWidth
  **/
  public void setBandWidth(Long bandWidth) {
    this.bandWidth = bandWidth;
  }

  public EthernetCardDto serverConnectStatus(Integer serverConnectStatus) {
    this.serverConnectStatus = serverConnectStatus;
    return this;
  }

   /**
   * 与服务器连接状态，取值范围：0---建联、1---不建联。
   * return serverConnectStatus
  **/
  @ApiModelProperty(value = "与服务器连接状态，取值范围：0---建联、1---不建联。")
  public Integer getServerConnectStatus() {
    return serverConnectStatus;
  }

   /**
   * 与服务器连接状态，取值范围：0---建联、1---不建联。
   * Param serverConnectStatus
  **/
  public void setServerConnectStatus(Integer serverConnectStatus) {
    this.serverConnectStatus = serverConnectStatus;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EthernetCardDto ethernetCardDto = (EthernetCardDto) o;
    return Objects.equals(this.apName, ethernetCardDto.apName) &&
        Objects.equals(this.apEsn, ethernetCardDto.apEsn) &&
        Objects.equals(this.interfaceName, ethernetCardDto.interfaceName) &&
        Objects.equals(this.cardSlot, ethernetCardDto.cardSlot) &&
        Objects.equals(this.cardStatus, ethernetCardDto.cardStatus) &&
        Objects.equals(this.cardConnectStatus, ethernetCardDto.cardConnectStatus) &&
        Objects.equals(this.interfaceIndex, ethernetCardDto.interfaceIndex) &&
        Objects.equals(this.deviceId, ethernetCardDto.deviceId) &&
        Objects.equals(this.deviceStatus, ethernetCardDto.deviceStatus) &&
        Objects.equals(this.upwardSpeed, ethernetCardDto.upwardSpeed) &&
        Objects.equals(this.downwardSpeed, ethernetCardDto.downwardSpeed) &&
        Objects.equals(this.upwardTraffic, ethernetCardDto.upwardTraffic) &&
        Objects.equals(this.downwardTraffic, ethernetCardDto.downwardTraffic) &&
        Objects.equals(this.receivePackages, ethernetCardDto.receivePackages) &&
        Objects.equals(this.sendPackages, ethernetCardDto.sendPackages) &&
        Objects.equals(this.cardIp, ethernetCardDto.cardIp) &&
        Objects.equals(this.cardMac, ethernetCardDto.cardMac) &&
        Objects.equals(this.cardSn, ethernetCardDto.cardSn) &&
        Objects.equals(this.centerFrequency, ethernetCardDto.centerFrequency) &&
        Objects.equals(this.bandWidth, ethernetCardDto.bandWidth) &&
        Objects.equals(this.serverConnectStatus, ethernetCardDto.serverConnectStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apName, apEsn, interfaceName, cardSlot, cardStatus, cardConnectStatus, interfaceIndex, deviceId, deviceStatus, upwardSpeed, downwardSpeed, upwardTraffic, downwardTraffic, receivePackages, sendPackages, cardIp, cardMac, cardSn, centerFrequency, bandWidth, serverConnectStatus);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EthernetCardDto {\n");
    
    sb.append("    apName: ").append(toIndentedString(apName)).append("\n");
    sb.append("    apEsn: ").append(toIndentedString(apEsn)).append("\n");
    sb.append("    interfaceName: ").append(toIndentedString(interfaceName)).append("\n");
    sb.append("    cardSlot: ").append(toIndentedString(cardSlot)).append("\n");
    sb.append("    cardStatus: ").append(toIndentedString(cardStatus)).append("\n");
    sb.append("    cardConnectStatus: ").append(toIndentedString(cardConnectStatus)).append("\n");
    sb.append("    interfaceIndex: ").append(toIndentedString(interfaceIndex)).append("\n");
    sb.append("    deviceId: ").append(toIndentedString(deviceId)).append("\n");
    sb.append("    deviceStatus: ").append(toIndentedString(deviceStatus)).append("\n");
    sb.append("    upwardSpeed: ").append(toIndentedString(upwardSpeed)).append("\n");
    sb.append("    downwardSpeed: ").append(toIndentedString(downwardSpeed)).append("\n");
    sb.append("    upwardTraffic: ").append(toIndentedString(upwardTraffic)).append("\n");
    sb.append("    downwardTraffic: ").append(toIndentedString(downwardTraffic)).append("\n");
    sb.append("    receivePackages: ").append(toIndentedString(receivePackages)).append("\n");
    sb.append("    sendPackages: ").append(toIndentedString(sendPackages)).append("\n");
    sb.append("    cardIp: ").append(toIndentedString(cardIp)).append("\n");
    sb.append("    cardMac: ").append(toIndentedString(cardMac)).append("\n");
    sb.append("    cardSn: ").append(toIndentedString(cardSn)).append("\n");
    sb.append("    centerFrequency: ").append(toIndentedString(centerFrequency)).append("\n");
    sb.append("    bandWidth: ").append(toIndentedString(bandWidth)).append("\n");
    sb.append("    serverConnectStatus: ").append(toIndentedString(serverConnectStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

