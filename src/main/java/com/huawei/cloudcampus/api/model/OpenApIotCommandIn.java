/*
 * AP网口IOT插卡管理
 * AP网口IOT插卡查询及操作接口。 场景：对AP网口IOT插卡查询及操作的第三方接口。
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.huawei.cloudcampus.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * 给单个设备或批量IOT插卡下命令入参。
 */
@ApiModel(description = "给单个设备或批量IOT插卡下命令入参。")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaSdnClientCodegen", date = "2019-12-17T15:18:14.620+08:00")
public class OpenApIotCommandIn {
  @SerializedName("cmd")
  private String cmd = null;

  @SerializedName("isDeployAll")
  private Boolean isDeployAll = null;

  @SerializedName("siteId")
  private String siteId = null;

  @SerializedName("cardMacs")
  private List<String> cardMacs = null;

  public OpenApIotCommandIn cmd(String cmd) {
    this.cmd = cmd;
    return this;
  }

   /**
   * 下发命令。
   * return cmd
  **/
  @ApiModelProperty(required = true, value = "下发命令。")
  public String getCmd() {
    return cmd;
  }

   /**
   * 下发命令。
   * Param cmd
  **/
  public void setCmd(String cmd) {
    this.cmd = cmd;
  }

  public OpenApIotCommandIn isDeployAll(Boolean isDeployAll) {
    this.isDeployAll = isDeployAll;
    return this;
  }

   /**
   * 是否部署站点下全部IOT插卡。
   * return isDeployAll
  **/
  @ApiModelProperty(required = true, value = "是否部署站点下全部IOT插卡。")
  public Boolean getIsDeployAll() {
    return isDeployAll;
  }

   /**
   * 是否部署站点下全部IOT插卡。
   * Param isDeployAll
  **/
  public void setIsDeployAll(Boolean isDeployAll) {
    this.isDeployAll = isDeployAll;
  }

  public OpenApIotCommandIn siteId(String siteId) {
    this.siteId = siteId;
    return this;
  }

   /**
   * 站点ID，UUID格式。
   * return siteId
  **/
  @ApiModelProperty(required = true, value = "站点ID，UUID格式。")
  public String getSiteId() {
    return siteId;
  }

   /**
   * 站点ID，UUID格式。
   * Param siteId
  **/
  public void setSiteId(String siteId) {
    this.siteId = siteId;
  }

  public OpenApIotCommandIn cardMacs(List<String> cardMacs) {
    this.cardMacs = cardMacs;
    return this;
  }

  public OpenApIotCommandIn addCardMacsItem(String cardMacsItem) {
    if (this.cardMacs == null) {
      this.cardMacs = new ArrayList<String>();
    }
    this.cardMacs.add(cardMacsItem);
    return this;
  }

   /**
   * IOT插卡MAC地址。当isDeployAll为false时，cardMacs有效且必填。
   * return cardMacs
  **/
  @ApiModelProperty(value = "IOT插卡MAC地址。当isDeployAll为false时，cardMacs有效且必填。")
  public List<String> getCardMacs() {
    return cardMacs;
  }

   /**
   * IOT插卡MAC地址。当isDeployAll为false时，cardMacs有效且必填。
   * Param cardMacs
  **/
  public void setCardMacs(List<String> cardMacs) {
    this.cardMacs = cardMacs;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OpenApIotCommandIn openApIotCommandIn = (OpenApIotCommandIn) o;
    return Objects.equals(this.cmd, openApIotCommandIn.cmd) &&
        Objects.equals(this.isDeployAll, openApIotCommandIn.isDeployAll) &&
        Objects.equals(this.siteId, openApIotCommandIn.siteId) &&
        Objects.equals(this.cardMacs, openApIotCommandIn.cardMacs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cmd, isDeployAll, siteId, cardMacs);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OpenApIotCommandIn {\n");
    
    sb.append("    cmd: ").append(toIndentedString(cmd)).append("\n");
    sb.append("    isDeployAll: ").append(toIndentedString(isDeployAll)).append("\n");
    sb.append("    siteId: ").append(toIndentedString(siteId)).append("\n");
    sb.append("    cardMacs: ").append(toIndentedString(cardMacs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

