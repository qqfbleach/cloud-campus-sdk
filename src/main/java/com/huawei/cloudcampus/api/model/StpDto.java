/*
 * 交换机STP配置
 * LSW STP配置北向接口，主要特性： · 查询交换STP配置信息 · 修改交换机STP配置 · 删除交换机STP配置 
 *
 * OpenAPI spec version: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.huawei.cloudcampus.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.huawei.cloudcampus.api.model.MstpRegion;
import com.huawei.cloudcampus.api.model.RegionInstanceDevice;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * 交换机STP配置结构体。
 */
@ApiModel(description = "交换机STP配置结构体。")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaSdnClientCodegen", date = "2019-12-17T15:19:29.471+08:00")
public class StpDto {
  @SerializedName("stpMode")
  private Integer stpMode = null;

  @SerializedName("mstpRegions")
  private List<MstpRegion> mstpRegions = null;

  @SerializedName("rstpConfig")
  private List<RegionInstanceDevice> rstpConfig = null;

  public StpDto stpMode(Integer stpMode) {
    this.stpMode = stpMode;
    return this;
  }

   /**
   * STP模式。1表示MSTP，2表示RSTP。
   * minimum: 1
   * maximum: 2
   * return stpMode
  **/
  @ApiModelProperty(required = true, value = "STP模式。1表示MSTP，2表示RSTP。")
  public Integer getStpMode() {
    return stpMode;
  }

   /**
   * STP模式。1表示MSTP，2表示RSTP。
   * minimum: 1
   * maximum: 2
   * Param stpMode
  **/
  public void setStpMode(Integer stpMode) {
    this.stpMode = stpMode;
  }

  public StpDto mstpRegions(List<MstpRegion> mstpRegions) {
    this.mstpRegions = mstpRegions;
    return this;
  }

  public StpDto addMstpRegionsItem(MstpRegion mstpRegionsItem) {
    if (this.mstpRegions == null) {
      this.mstpRegions = new ArrayList<MstpRegion>();
    }
    this.mstpRegions.add(mstpRegionsItem);
    return this;
  }

   /**
   * MST域集合。MSTP模式下需要配置。
   * return mstpRegions
  **/
  @ApiModelProperty(value = "MST域集合。MSTP模式下需要配置。")
  public List<MstpRegion> getMstpRegions() {
    return mstpRegions;
  }

   /**
   * MST域集合。MSTP模式下需要配置。
   * Param mstpRegions
  **/
  public void setMstpRegions(List<MstpRegion> mstpRegions) {
    this.mstpRegions = mstpRegions;
  }

  public StpDto rstpConfig(List<RegionInstanceDevice> rstpConfig) {
    this.rstpConfig = rstpConfig;
    return this;
  }

  public StpDto addRstpConfigItem(RegionInstanceDevice rstpConfigItem) {
    if (this.rstpConfig == null) {
      this.rstpConfig = new ArrayList<RegionInstanceDevice>();
    }
    this.rstpConfig.add(rstpConfigItem);
    return this;
  }

   /**
   * RSTP优先级。RSTP模式下需要配置。
   * return rstpConfig
  **/
  @ApiModelProperty(value = "RSTP优先级。RSTP模式下需要配置。")
  public List<RegionInstanceDevice> getRstpConfig() {
    return rstpConfig;
  }

   /**
   * RSTP优先级。RSTP模式下需要配置。
   * Param rstpConfig
  **/
  public void setRstpConfig(List<RegionInstanceDevice> rstpConfig) {
    this.rstpConfig = rstpConfig;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StpDto stpDto = (StpDto) o;
    return Objects.equals(this.stpMode, stpDto.stpMode) &&
        Objects.equals(this.mstpRegions, stpDto.mstpRegions) &&
        Objects.equals(this.rstpConfig, stpDto.rstpConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(stpMode, mstpRegions, rstpConfig);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StpDto {\n");
    
    sb.append("    stpMode: ").append(toIndentedString(stpMode)).append("\n");
    sb.append("    mstpRegions: ").append(toIndentedString(mstpRegions)).append("\n");
    sb.append("    rstpConfig: ").append(toIndentedString(rstpConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

