/*
 * CIS服务接口
 * CIS操作接口说明： 1、创建CIS隔离 2、创建CIS阻断 3、撤销CIS阻断/隔离 4、阻断隔离应用状态查询 5、CIS策略命中率查询 
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.huawei.cloudcampus.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * CIS策略命中率查询参数模型。
 */
@ApiModel(description = "CIS策略命中率查询参数模型。")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaSdnClientCodegen", date = "2019-12-17T15:17:59.469+08:00")
public class PolicyHitsDTO {
  @SerializedName("startDate")
  private String startDate = null;

  @SerializedName("endDate")
  private String endDate = null;

  @SerializedName("producer")
  private String producer = null;

  @SerializedName("blockIds")
  private List<String> blockIds = new ArrayList<String>();

  @SerializedName("policyNames")
  private List<String> policyNames = null;

  public PolicyHitsDTO startDate(String startDate) {
    this.startDate = startDate;
    return this;
  }

   /**
   * 开始日期，非空时要求是合法的日期格式；如果开始日期和结束日期同时为空，默认查过去一个月的数据，yyyy-MM-dd HH:mm:ss。
   * return startDate
  **/
  @ApiModelProperty(value = "开始日期，非空时要求是合法的日期格式；如果开始日期和结束日期同时为空，默认查过去一个月的数据，yyyy-MM-dd HH:mm:ss。")
  public String getStartDate() {
    return startDate;
  }

   /**
   * 开始日期，非空时要求是合法的日期格式；如果开始日期和结束日期同时为空，默认查过去一个月的数据，yyyy-MM-dd HH:mm:ss。
   * Param startDate
  **/
  public void setStartDate(String startDate) {
    this.startDate = startDate;
  }

  public PolicyHitsDTO endDate(String endDate) {
    this.endDate = endDate;
    return this;
  }

   /**
   * 结束日期，非空时要求是合法的日期格式；如果开始日期和结束日期同时为空，默认查过去一个月的数据，yyyy-MM-dd HH:mm:ss。
   * return endDate
  **/
  @ApiModelProperty(value = "结束日期，非空时要求是合法的日期格式；如果开始日期和结束日期同时为空，默认查过去一个月的数据，yyyy-MM-dd HH:mm:ss。")
  public String getEndDate() {
    return endDate;
  }

   /**
   * 结束日期，非空时要求是合法的日期格式；如果开始日期和结束日期同时为空，默认查过去一个月的数据，yyyy-MM-dd HH:mm:ss。
   * Param endDate
  **/
  public void setEndDate(String endDate) {
    this.endDate = endDate;
  }

  public PolicyHitsDTO producer(String producer) {
    this.producer = producer;
    return this;
  }

   /**
   * 调用者。
   * return producer
  **/
  @ApiModelProperty(value = "调用者。")
  public String getProducer() {
    return producer;
  }

   /**
   * 调用者。
   * Param producer
  **/
  public void setProducer(String producer) {
    this.producer = producer;
  }

  public PolicyHitsDTO blockIds(List<String> blockIds) {
    this.blockIds = blockIds;
    return this;
  }

  public PolicyHitsDTO addBlockIdsItem(String blockIdsItem) {
    this.blockIds.add(blockIdsItem);
    return this;
  }

   /**
   * 事件ID列表，UUID格式；Campus融合场景，blockIds为必填字段；DCN融合场景，blockIds和policyNames不可同时为空，都传的情况下，以blockIds为准。
   * return blockIds
  **/
  @ApiModelProperty(required = true, value = "事件ID列表，UUID格式；Campus融合场景，blockIds为必填字段；DCN融合场景，blockIds和policyNames不可同时为空，都传的情况下，以blockIds为准。")
  public List<String> getBlockIds() {
    return blockIds;
  }

   /**
   * 事件ID列表，UUID格式；Campus融合场景，blockIds为必填字段；DCN融合场景，blockIds和policyNames不可同时为空，都传的情况下，以blockIds为准。
   * Param blockIds
  **/
  public void setBlockIds(List<String> blockIds) {
    this.blockIds = blockIds;
  }

  public PolicyHitsDTO policyNames(List<String> policyNames) {
    this.policyNames = policyNames;
    return this;
  }

  public PolicyHitsDTO addPolicyNamesItem(String policyNamesItem) {
    if (this.policyNames == null) {
      this.policyNames = new ArrayList<String>();
    }
    this.policyNames.add(policyNamesItem);
    return this;
  }

   /**
   * 策略名称。Campus融合，该字段没有业务上的意义，不需要填写；DCN融合场景，blockIds和policyNames不可同时为空，都传的情况下，以blockIds为准。
   * return policyNames
  **/
  @ApiModelProperty(value = "策略名称。Campus融合，该字段没有业务上的意义，不需要填写；DCN融合场景，blockIds和policyNames不可同时为空，都传的情况下，以blockIds为准。")
  public List<String> getPolicyNames() {
    return policyNames;
  }

   /**
   * 策略名称。Campus融合，该字段没有业务上的意义，不需要填写；DCN融合场景，blockIds和policyNames不可同时为空，都传的情况下，以blockIds为准。
   * Param policyNames
  **/
  public void setPolicyNames(List<String> policyNames) {
    this.policyNames = policyNames;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PolicyHitsDTO policyHitsDTO = (PolicyHitsDTO) o;
    return Objects.equals(this.startDate, policyHitsDTO.startDate) &&
        Objects.equals(this.endDate, policyHitsDTO.endDate) &&
        Objects.equals(this.producer, policyHitsDTO.producer) &&
        Objects.equals(this.blockIds, policyHitsDTO.blockIds) &&
        Objects.equals(this.policyNames, policyHitsDTO.policyNames);
  }

  @Override
  public int hashCode() {
    return Objects.hash(startDate, endDate, producer, blockIds, policyNames);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PolicyHitsDTO {\n");
    
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    producer: ").append(toIndentedString(producer)).append("\n");
    sb.append("    blockIds: ").append(toIndentedString(blockIds)).append("\n");
    sb.append("    policyNames: ").append(toIndentedString(policyNames)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

