/*
 * 交换机端口配置
 * LSW端口配置北向接口，主要特性： · 查询交换机所有接口信息 · 修改交换机以太接口配置 · 创建交换机Eth-Trunk接口 · 修改交换机Eth-Trunk接口 · 删除交换机Eth-Trunk接口 
 *
 * OpenAPI spec version: 1.4.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.huawei.cloudcampus.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.huawei.cloudcampus.api.model.LSWPortDto;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * 交换机以太端口配置数据结构。
 */
@ApiModel(description = "交换机以太端口配置数据结构。")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaSdnClientCodegen", date = "2019-12-17T15:19:28.021+08:00")
public class LSWEthPortDto {
  @SerializedName("status")
  private Boolean status = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("linkType")
  private String linkType = null;

  @SerializedName("defaultVlan")
  private Integer defaultVlan = null;

  @SerializedName("allowPassVlan")
  private String allowPassVlan = null;

  @SerializedName("dhcpSnooping")
  private Boolean dhcpSnooping = null;

  @SerializedName("dhcpSnoopingTrusted")
  private Boolean dhcpSnoopingTrusted = null;

  @SerializedName("ndSnooping")
  private Boolean ndSnooping = null;

  @SerializedName("ndSnoopingTrusted")
  private Boolean ndSnoopingTrusted = null;

  @SerializedName("portIsolation")
  private Boolean portIsolation = null;

  @SerializedName("stp")
  private Boolean stp = null;

  @SerializedName("stpEdgedport")
  private String stpEdgedport = null;

  @SerializedName("enableRelay")
  private Boolean enableRelay = null;

  @SerializedName("enableMadDetection")
  private Boolean enableMadDetection = null;

  @SerializedName("domainId")
  private Integer domainId = null;

  @SerializedName("naMsgCheck")
  private Boolean naMsgCheck = null;

  @SerializedName("nsMsgCheck")
  private Boolean nsMsgCheck = null;

  @SerializedName("rsMsgCheck")
  private Boolean rsMsgCheck = null;

  @SerializedName("ipsgCheck")
  private Boolean ipsgCheck = null;

  @SerializedName("daiCheck")
  private Boolean daiCheck = null;

  @SerializedName("ipSubnetVlanEnable")
  private Boolean ipSubnetVlanEnable = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("autoNegotiationEnable")
  private Boolean autoNegotiationEnable = null;

  @SerializedName("speed")
  private String speed = null;

  @SerializedName("duplex")
  private String duplex = null;

  @SerializedName("stormControl")
  private Boolean stormControl = null;

  @SerializedName("stormControlModel")
  private String stormControlModel = null;

  @SerializedName("stormControlMaxRate")
  private Integer stormControlMaxRate = null;

  @SerializedName("stormControlMinRate")
  private Integer stormControlMinRate = null;

  @SerializedName("stormControlInterval")
  private Integer stormControlInterval = null;

  @SerializedName("poe")
  private Boolean poe = null;

  @SerializedName("lldp")
  private Boolean lldp = null;

  @SerializedName("cdp")
  private Boolean cdp = null;

  @SerializedName("loopbackDetectEnabled")
  private Boolean loopbackDetectEnabled = null;

  @SerializedName("loopbackDetectAction")
  private String loopbackDetectAction = null;

  @SerializedName("loopbackDetectVlans")
  private String loopbackDetectVlans = null;

  public LSWEthPortDto status(Boolean status) {
    this.status = status;
    return this;
  }

   /**
   * 接口管理状态（true为undo shutdown，false为shutdown）。
   * return status
  **/
  @ApiModelProperty(value = "接口管理状态（true为undo shutdown，false为shutdown）。")
  public Boolean getStatus() {
    return status;
  }

   /**
   * 接口管理状态（true为undo shutdown，false为shutdown）。
   * Param status
  **/
  public void setStatus(Boolean status) {
    this.status = status;
  }

  public LSWEthPortDto description(String description) {
    this.description = description;
    return this;
  }

   /**
   * 接口描述。
   * return description
  **/
  @ApiModelProperty(value = "接口描述。")
  public String getDescription() {
    return description;
  }

   /**
   * 接口描述。
   * Param description
  **/
  public void setDescription(String description) {
    this.description = description;
  }

  public LSWEthPortDto linkType(String linkType) {
    this.linkType = linkType;
    return this;
  }

   /**
   * 链路类型，若当前是以太接口，其加入Eth-Trunk后不能配置此参数。取值：access；trunk。
   * return linkType
  **/
  @ApiModelProperty(value = "链路类型，若当前是以太接口，其加入Eth-Trunk后不能配置此参数。取值：access；trunk。")
  public String getLinkType() {
    return linkType;
  }

   /**
   * 链路类型，若当前是以太接口，其加入Eth-Trunk后不能配置此参数。取值：access；trunk。
   * Param linkType
  **/
  public void setLinkType(String linkType) {
    this.linkType = linkType;
  }

  public LSWEthPortDto defaultVlan(Integer defaultVlan) {
    this.defaultVlan = defaultVlan;
    return this;
  }

   /**
   * access类型下缺省VLAN；或trunk类型下pvid。若当前是以太接口，其加入Eth-Trunk后不能配置此参数。
   * minimum: 1
   * maximum: 4094
   * return defaultVlan
  **/
  @ApiModelProperty(value = "access类型下缺省VLAN；或trunk类型下pvid。若当前是以太接口，其加入Eth-Trunk后不能配置此参数。")
  public Integer getDefaultVlan() {
    return defaultVlan;
  }

   /**
   * access类型下缺省VLAN；或trunk类型下pvid。若当前是以太接口，其加入Eth-Trunk后不能配置此参数。
   * minimum: 1
   * maximum: 4094
   * Param defaultVlan
  **/
  public void setDefaultVlan(Integer defaultVlan) {
    this.defaultVlan = defaultVlan;
  }

  public LSWEthPortDto allowPassVlan(String allowPassVlan) {
    this.allowPassVlan = allowPassVlan;
    return this;
  }

   /**
   * trunk类型下允许通过VLAN，接口为trunk类型时必填。
   * return allowPassVlan
  **/
  @ApiModelProperty(value = "trunk类型下允许通过VLAN，接口为trunk类型时必填。")
  public String getAllowPassVlan() {
    return allowPassVlan;
  }

   /**
   * trunk类型下允许通过VLAN，接口为trunk类型时必填。
   * Param allowPassVlan
  **/
  public void setAllowPassVlan(String allowPassVlan) {
    this.allowPassVlan = allowPassVlan;
  }

  public LSWEthPortDto dhcpSnooping(Boolean dhcpSnooping) {
    this.dhcpSnooping = dhcpSnooping;
    return this;
  }

   /**
   * DHCP Snooping使能，若当前是以太接口，其加入Eth-Trunk后不能配置此参数。
   * return dhcpSnooping
  **/
  @ApiModelProperty(value = "DHCP Snooping使能，若当前是以太接口，其加入Eth-Trunk后不能配置此参数。")
  public Boolean getDhcpSnooping() {
    return dhcpSnooping;
  }

   /**
   * DHCP Snooping使能，若当前是以太接口，其加入Eth-Trunk后不能配置此参数。
   * Param dhcpSnooping
  **/
  public void setDhcpSnooping(Boolean dhcpSnooping) {
    this.dhcpSnooping = dhcpSnooping;
  }

  public LSWEthPortDto dhcpSnoopingTrusted(Boolean dhcpSnoopingTrusted) {
    this.dhcpSnoopingTrusted = dhcpSnoopingTrusted;
    return this;
  }

   /**
   * 配置接口为DHCP Snooping信任状态，默认为非信任状态。
   * return dhcpSnoopingTrusted
  **/
  @ApiModelProperty(value = "配置接口为DHCP Snooping信任状态，默认为非信任状态。")
  public Boolean getDhcpSnoopingTrusted() {
    return dhcpSnoopingTrusted;
  }

   /**
   * 配置接口为DHCP Snooping信任状态，默认为非信任状态。
   * Param dhcpSnoopingTrusted
  **/
  public void setDhcpSnoopingTrusted(Boolean dhcpSnoopingTrusted) {
    this.dhcpSnoopingTrusted = dhcpSnoopingTrusted;
  }

  public LSWEthPortDto ndSnooping(Boolean ndSnooping) {
    this.ndSnooping = ndSnooping;
    return this;
  }

   /**
   * ND Snooping使能，若当前是以太接口，其加入Eth-Trunk后不能配置此参数。
   * return ndSnooping
  **/
  @ApiModelProperty(value = "ND Snooping使能，若当前是以太接口，其加入Eth-Trunk后不能配置此参数。")
  public Boolean getNdSnooping() {
    return ndSnooping;
  }

   /**
   * ND Snooping使能，若当前是以太接口，其加入Eth-Trunk后不能配置此参数。
   * Param ndSnooping
  **/
  public void setNdSnooping(Boolean ndSnooping) {
    this.ndSnooping = ndSnooping;
  }

  public LSWEthPortDto ndSnoopingTrusted(Boolean ndSnoopingTrusted) {
    this.ndSnoopingTrusted = ndSnoopingTrusted;
    return this;
  }

   /**
   * 配置接口为ND Snooping信任状态，默认为非信任状态。
   * return ndSnoopingTrusted
  **/
  @ApiModelProperty(value = "配置接口为ND Snooping信任状态，默认为非信任状态。")
  public Boolean getNdSnoopingTrusted() {
    return ndSnoopingTrusted;
  }

   /**
   * 配置接口为ND Snooping信任状态，默认为非信任状态。
   * Param ndSnoopingTrusted
  **/
  public void setNdSnoopingTrusted(Boolean ndSnoopingTrusted) {
    this.ndSnoopingTrusted = ndSnoopingTrusted;
  }

  public LSWEthPortDto portIsolation(Boolean portIsolation) {
    this.portIsolation = portIsolation;
    return this;
  }

   /**
   * 端口隔离使能，若当前是以太接口，其加入Eth-Trunk后不能配置此参数。
   * return portIsolation
  **/
  @ApiModelProperty(value = "端口隔离使能，若当前是以太接口，其加入Eth-Trunk后不能配置此参数。")
  public Boolean getPortIsolation() {
    return portIsolation;
  }

   /**
   * 端口隔离使能，若当前是以太接口，其加入Eth-Trunk后不能配置此参数。
   * Param portIsolation
  **/
  public void setPortIsolation(Boolean portIsolation) {
    this.portIsolation = portIsolation;
  }

  public LSWEthPortDto stp(Boolean stp) {
    this.stp = stp;
    return this;
  }

   /**
   * STP功能状态，取值：true（使能）；false（未使能）。当STP为false时，stpEdgedport自动赋值为normal，传入其他参数无效。
   * return stp
  **/
  @ApiModelProperty(value = "STP功能状态，取值：true（使能）；false（未使能）。当STP为false时，stpEdgedport自动赋值为normal，传入其他参数无效。")
  public Boolean getStp() {
    return stp;
  }

   /**
   * STP功能状态，取值：true（使能）；false（未使能）。当STP为false时，stpEdgedport自动赋值为normal，传入其他参数无效。
   * Param stp
  **/
  public void setStp(Boolean stp) {
    this.stp = stp;
  }

  public LSWEthPortDto stpEdgedport(String stpEdgedport) {
    this.stpEdgedport = stpEdgedport;
    return this;
  }

   /**
   * STP边缘端口状态，若当前是以太接口，其加入Eth-Trunk后不能配置此参数。取值：enable（使能）；normal（遵从全局状态）；disable（未使能）。
   * return stpEdgedport
  **/
  @ApiModelProperty(value = "STP边缘端口状态，若当前是以太接口，其加入Eth-Trunk后不能配置此参数。取值：enable（使能）；normal（遵从全局状态）；disable（未使能）。")
  public String getStpEdgedport() {
    return stpEdgedport;
  }

   /**
   * STP边缘端口状态，若当前是以太接口，其加入Eth-Trunk后不能配置此参数。取值：enable（使能）；normal（遵从全局状态）；disable（未使能）。
   * Param stpEdgedport
  **/
  public void setStpEdgedport(String stpEdgedport) {
    this.stpEdgedport = stpEdgedport;
  }

  public LSWEthPortDto enableRelay(Boolean enableRelay) {
    this.enableRelay = enableRelay;
    return this;
  }

   /**
   * 堆叠多主检测场景下，设为检测代理设备。
   * return enableRelay
  **/
  @ApiModelProperty(value = "堆叠多主检测场景下，设为检测代理设备。")
  public Boolean getEnableRelay() {
    return enableRelay;
  }

   /**
   * 堆叠多主检测场景下，设为检测代理设备。
   * Param enableRelay
  **/
  public void setEnableRelay(Boolean enableRelay) {
    this.enableRelay = enableRelay;
  }

  public LSWEthPortDto enableMadDetection(Boolean enableMadDetection) {
    this.enableMadDetection = enableMadDetection;
    return this;
  }

   /**
   * 堆叠多主检测场景下，代理模式双主检测开关。
   * return enableMadDetection
  **/
  @ApiModelProperty(value = "堆叠多主检测场景下，代理模式双主检测开关。")
  public Boolean getEnableMadDetection() {
    return enableMadDetection;
  }

   /**
   * 堆叠多主检测场景下，代理模式双主检测开关。
   * Param enableMadDetection
  **/
  public void setEnableMadDetection(Boolean enableMadDetection) {
    this.enableMadDetection = enableMadDetection;
  }

  public LSWEthPortDto domainId(Integer domainId) {
    this.domainId = domainId;
    return this;
  }

   /**
   * 堆叠多主检测场景下，堆叠域编号，两个堆叠互相检测时，堆叠域编号需不同。
   * minimum: 0
   * maximum: 255
   * return domainId
  **/
  @ApiModelProperty(value = "堆叠多主检测场景下，堆叠域编号，两个堆叠互相检测时，堆叠域编号需不同。")
  public Integer getDomainId() {
    return domainId;
  }

   /**
   * 堆叠多主检测场景下，堆叠域编号，两个堆叠互相检测时，堆叠域编号需不同。
   * minimum: 0
   * maximum: 255
   * Param domainId
  **/
  public void setDomainId(Integer domainId) {
    this.domainId = domainId;
  }

  public LSWEthPortDto naMsgCheck(Boolean naMsgCheck) {
    this.naMsgCheck = naMsgCheck;
    return this;
  }

   /**
   * NA报文检测，若当前是以太接口，其加入Eth-Trunk后不能配置此参数。
   * return naMsgCheck
  **/
  @ApiModelProperty(value = "NA报文检测，若当前是以太接口，其加入Eth-Trunk后不能配置此参数。")
  public Boolean getNaMsgCheck() {
    return naMsgCheck;
  }

   /**
   * NA报文检测，若当前是以太接口，其加入Eth-Trunk后不能配置此参数。
   * Param naMsgCheck
  **/
  public void setNaMsgCheck(Boolean naMsgCheck) {
    this.naMsgCheck = naMsgCheck;
  }

  public LSWEthPortDto nsMsgCheck(Boolean nsMsgCheck) {
    this.nsMsgCheck = nsMsgCheck;
    return this;
  }

   /**
   * NS报文检测，若当前是以太接口，其加入Eth-Trunk后不能配置此参数。
   * return nsMsgCheck
  **/
  @ApiModelProperty(value = "NS报文检测，若当前是以太接口，其加入Eth-Trunk后不能配置此参数。")
  public Boolean getNsMsgCheck() {
    return nsMsgCheck;
  }

   /**
   * NS报文检测，若当前是以太接口，其加入Eth-Trunk后不能配置此参数。
   * Param nsMsgCheck
  **/
  public void setNsMsgCheck(Boolean nsMsgCheck) {
    this.nsMsgCheck = nsMsgCheck;
  }

  public LSWEthPortDto rsMsgCheck(Boolean rsMsgCheck) {
    this.rsMsgCheck = rsMsgCheck;
    return this;
  }

   /**
   * RS报文检测，若当前是以太接口，其加入Eth-Trunk后不能配置此参数。
   * return rsMsgCheck
  **/
  @ApiModelProperty(value = "RS报文检测，若当前是以太接口，其加入Eth-Trunk后不能配置此参数。")
  public Boolean getRsMsgCheck() {
    return rsMsgCheck;
  }

   /**
   * RS报文检测，若当前是以太接口，其加入Eth-Trunk后不能配置此参数。
   * Param rsMsgCheck
  **/
  public void setRsMsgCheck(Boolean rsMsgCheck) {
    this.rsMsgCheck = rsMsgCheck;
  }

  public LSWEthPortDto ipsgCheck(Boolean ipsgCheck) {
    this.ipsgCheck = ipsgCheck;
    return this;
  }

   /**
   * IPSG检测使能开关。
   * return ipsgCheck
  **/
  @ApiModelProperty(value = "IPSG检测使能开关。")
  public Boolean getIpsgCheck() {
    return ipsgCheck;
  }

   /**
   * IPSG检测使能开关。
   * Param ipsgCheck
  **/
  public void setIpsgCheck(Boolean ipsgCheck) {
    this.ipsgCheck = ipsgCheck;
  }

  public LSWEthPortDto daiCheck(Boolean daiCheck) {
    this.daiCheck = daiCheck;
    return this;
  }

   /**
   * DAI检测使能开关。
   * return daiCheck
  **/
  @ApiModelProperty(value = "DAI检测使能开关。")
  public Boolean getDaiCheck() {
    return daiCheck;
  }

   /**
   * DAI检测使能开关。
   * Param daiCheck
  **/
  public void setDaiCheck(Boolean daiCheck) {
    this.daiCheck = daiCheck;
  }

  public LSWEthPortDto ipSubnetVlanEnable(Boolean ipSubnetVlanEnable) {
    this.ipSubnetVlanEnable = ipSubnetVlanEnable;
    return this;
  }

   /**
   * IP子网划分Vlan开关。
   * return ipSubnetVlanEnable
  **/
  @ApiModelProperty(value = "IP子网划分Vlan开关。")
  public Boolean getIpSubnetVlanEnable() {
    return ipSubnetVlanEnable;
  }

   /**
   * IP子网划分Vlan开关。
   * Param ipSubnetVlanEnable
  **/
  public void setIpSubnetVlanEnable(Boolean ipSubnetVlanEnable) {
    this.ipSubnetVlanEnable = ipSubnetVlanEnable;
  }

  public LSWEthPortDto name(String name) {
    this.name = name;
    return this;
  }

   /**
   * 接口名称。
   * return name
  **/
  @ApiModelProperty(required = true, value = "接口名称。")
  public String getName() {
    return name;
  }

   /**
   * 接口名称。
   * Param name
  **/
  public void setName(String name) {
    this.name = name;
  }

  public LSWEthPortDto autoNegotiationEnable(Boolean autoNegotiationEnable) {
    this.autoNegotiationEnable = autoNegotiationEnable;
    return this;
  }

   /**
   * 接口自协商状态，根据款型确定默认值；端口支持自协商时必填。
   * return autoNegotiationEnable
  **/
  @ApiModelProperty(value = "接口自协商状态，根据款型确定默认值；端口支持自协商时必填。")
  public Boolean getAutoNegotiationEnable() {
    return autoNegotiationEnable;
  }

   /**
   * 接口自协商状态，根据款型确定默认值；端口支持自协商时必填。
   * Param autoNegotiationEnable
  **/
  public void setAutoNegotiationEnable(Boolean autoNegotiationEnable) {
    this.autoNegotiationEnable = autoNegotiationEnable;
  }

  public LSWEthPortDto speed(String speed) {
    this.speed = speed;
    return this;
  }

   /**
   * 接口速率。可选值：1Gbps，100Mbps，10Mbps，根据款型确定默认值；自协商关闭时必填。
   * return speed
  **/
  @ApiModelProperty(value = "接口速率。可选值：1Gbps，100Mbps，10Mbps，根据款型确定默认值；自协商关闭时必填。")
  public String getSpeed() {
    return speed;
  }

   /**
   * 接口速率。可选值：1Gbps，100Mbps，10Mbps，根据款型确定默认值；自协商关闭时必填。
   * Param speed
  **/
  public void setSpeed(String speed) {
    this.speed = speed;
  }

  public LSWEthPortDto duplex(String duplex) {
    this.duplex = duplex;
    return this;
  }

   /**
   * 双工模式， 根据款型确定默认值，自协商关闭时必填。取值：half（半双工）；full（全双工）。
   * return duplex
  **/
  @ApiModelProperty(value = "双工模式， 根据款型确定默认值，自协商关闭时必填。取值：half（半双工）；full（全双工）。")
  public String getDuplex() {
    return duplex;
  }

   /**
   * 双工模式， 根据款型确定默认值，自协商关闭时必填。取值：half（半双工）；full（全双工）。
   * Param duplex
  **/
  public void setDuplex(String duplex) {
    this.duplex = duplex;
  }

  public LSWEthPortDto stormControl(Boolean stormControl) {
    this.stormControl = stormControl;
    return this;
  }

   /**
   * 风暴控制使能。
   * return stormControl
  **/
  @ApiModelProperty(value = "风暴控制使能。")
  public Boolean getStormControl() {
    return stormControl;
  }

   /**
   * 风暴控制使能。
   * Param stormControl
  **/
  public void setStormControl(Boolean stormControl) {
    this.stormControl = stormControl;
  }

  public LSWEthPortDto stormControlModel(String stormControlModel) {
    this.stormControlModel = stormControlModel;
    return this;
  }

   /**
   * 风暴控制模式。取值：packet（包模式），cir（字节模式）。
   * return stormControlModel
  **/
  @ApiModelProperty(value = "风暴控制模式。取值：packet（包模式），cir（字节模式）。")
  public String getStormControlModel() {
    return stormControlModel;
  }

   /**
   * 风暴控制模式。取值：packet（包模式），cir（字节模式）。
   * Param stormControlModel
  **/
  public void setStormControlModel(String stormControlModel) {
    this.stormControlModel = stormControlModel;
  }

  public LSWEthPortDto stormControlMaxRate(Integer stormControlMaxRate) {
    this.stormControlMaxRate = stormControlMaxRate;
    return this;
  }

   /**
   * 风暴控制包模式最大阈值，单位pps。当stormControl字段值为true时，该字段必填。
   * minimum: 1
   * maximum: 59524000
   * return stormControlMaxRate
  **/
  @ApiModelProperty(value = "风暴控制包模式最大阈值，单位pps。当stormControl字段值为true时，该字段必填。")
  public Integer getStormControlMaxRate() {
    return stormControlMaxRate;
  }

   /**
   * 风暴控制包模式最大阈值，单位pps。当stormControl字段值为true时，该字段必填。
   * minimum: 1
   * maximum: 59524000
   * Param stormControlMaxRate
  **/
  public void setStormControlMaxRate(Integer stormControlMaxRate) {
    this.stormControlMaxRate = stormControlMaxRate;
  }

  public LSWEthPortDto stormControlMinRate(Integer stormControlMinRate) {
    this.stormControlMinRate = stormControlMinRate;
    return this;
  }

   /**
   * 风暴控制包模式最小阈值，单位pps。当stormControl字段值为true时，该字段必填。
   * minimum: 1
   * maximum: 59524000
   * return stormControlMinRate
  **/
  @ApiModelProperty(value = "风暴控制包模式最小阈值，单位pps。当stormControl字段值为true时，该字段必填。")
  public Integer getStormControlMinRate() {
    return stormControlMinRate;
  }

   /**
   * 风暴控制包模式最小阈值，单位pps。当stormControl字段值为true时，该字段必填。
   * minimum: 1
   * maximum: 59524000
   * Param stormControlMinRate
  **/
  public void setStormControlMinRate(Integer stormControlMinRate) {
    this.stormControlMinRate = stormControlMinRate;
  }

  public LSWEthPortDto stormControlInterval(Integer stormControlInterval) {
    this.stormControlInterval = stormControlInterval;
    return this;
  }

   /**
   * 风暴控制检测时间间隔，单位s。当stormControl字段值为true时，该字段必填。
   * minimum: 1
   * maximum: 180
   * return stormControlInterval
  **/
  @ApiModelProperty(value = "风暴控制检测时间间隔，单位s。当stormControl字段值为true时，该字段必填。")
  public Integer getStormControlInterval() {
    return stormControlInterval;
  }

   /**
   * 风暴控制检测时间间隔，单位s。当stormControl字段值为true时，该字段必填。
   * minimum: 1
   * maximum: 180
   * Param stormControlInterval
  **/
  public void setStormControlInterval(Integer stormControlInterval) {
    this.stormControlInterval = stormControlInterval;
  }

  public LSWEthPortDto poe(Boolean poe) {
    this.poe = poe;
    return this;
  }

   /**
   * 端口POE使能，支持poe的端口默认值为true；不支持的端口，不能传参。
   * return poe
  **/
  @ApiModelProperty(value = "端口POE使能，支持poe的端口默认值为true；不支持的端口，不能传参。")
  public Boolean getPoe() {
    return poe;
  }

   /**
   * 端口POE使能，支持poe的端口默认值为true；不支持的端口，不能传参。
   * Param poe
  **/
  public void setPoe(Boolean poe) {
    this.poe = poe;
  }

  public LSWEthPortDto lldp(Boolean lldp) {
    this.lldp = lldp;
    return this;
  }

   /**
   * 端口LLDP使能，默认值为true。若思科的交换机款型需要使用LLDP功能，需要将LLDP置为true，同时CDP为true。
   * return lldp
  **/
  @ApiModelProperty(value = "端口LLDP使能，默认值为true。若思科的交换机款型需要使用LLDP功能，需要将LLDP置为true，同时CDP为true。")
  public Boolean getLldp() {
    return lldp;
  }

   /**
   * 端口LLDP使能，默认值为true。若思科的交换机款型需要使用LLDP功能，需要将LLDP置为true，同时CDP为true。
   * Param lldp
  **/
  public void setLldp(Boolean lldp) {
    this.lldp = lldp;
  }

  public LSWEthPortDto cdp(Boolean cdp) {
    this.cdp = cdp;
    return this;
  }

   /**
   * 端口CDP使能，默认值为false。
   * return cdp
  **/
  @ApiModelProperty(value = "端口CDP使能，默认值为false。")
  public Boolean getCdp() {
    return cdp;
  }

   /**
   * 端口CDP使能，默认值为false。
   * Param cdp
  **/
  public void setCdp(Boolean cdp) {
    this.cdp = cdp;
  }

  public LSWEthPortDto loopbackDetectEnabled(Boolean loopbackDetectEnabled) {
    this.loopbackDetectEnabled = loopbackDetectEnabled;
    return this;
  }

   /**
   * 环路检测使能开关。
   * return loopbackDetectEnabled
  **/
  @ApiModelProperty(value = "环路检测使能开关。")
  public Boolean getLoopbackDetectEnabled() {
    return loopbackDetectEnabled;
  }

   /**
   * 环路检测使能开关。
   * Param loopbackDetectEnabled
  **/
  public void setLoopbackDetectEnabled(Boolean loopbackDetectEnabled) {
    this.loopbackDetectEnabled = loopbackDetectEnabled;
  }

  public LSWEthPortDto loopbackDetectAction(String loopbackDetectAction) {
    this.loopbackDetectAction = loopbackDetectAction;
    return this;
  }

   /**
   * 环路检测处理动作。取值范围：shutdown，alarm，block，nolearn，quitvlan。
   * return loopbackDetectAction
  **/
  @ApiModelProperty(value = "环路检测处理动作。取值范围：shutdown，alarm，block，nolearn，quitvlan。")
  public String getLoopbackDetectAction() {
    return loopbackDetectAction;
  }

   /**
   * 环路检测处理动作。取值范围：shutdown，alarm，block，nolearn，quitvlan。
   * Param loopbackDetectAction
  **/
  public void setLoopbackDetectAction(String loopbackDetectAction) {
    this.loopbackDetectAction = loopbackDetectAction;
  }

  public LSWEthPortDto loopbackDetectVlans(String loopbackDetectVlans) {
    this.loopbackDetectVlans = loopbackDetectVlans;
    return this;
  }

   /**
   * 环路检测Vlan。1-4094范围内的数字或段，最多支持8个vlan
   * return loopbackDetectVlans
  **/
  @ApiModelProperty(value = "环路检测Vlan。1-4094范围内的数字或段，最多支持8个vlan")
  public String getLoopbackDetectVlans() {
    return loopbackDetectVlans;
  }

   /**
   * 环路检测Vlan。1-4094范围内的数字或段，最多支持8个vlan
   * Param loopbackDetectVlans
  **/
  public void setLoopbackDetectVlans(String loopbackDetectVlans) {
    this.loopbackDetectVlans = loopbackDetectVlans;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LSWEthPortDto lsWEthPortDto = (LSWEthPortDto) o;
    return Objects.equals(this.status, lsWEthPortDto.status) &&
        Objects.equals(this.description, lsWEthPortDto.description) &&
        Objects.equals(this.linkType, lsWEthPortDto.linkType) &&
        Objects.equals(this.defaultVlan, lsWEthPortDto.defaultVlan) &&
        Objects.equals(this.allowPassVlan, lsWEthPortDto.allowPassVlan) &&
        Objects.equals(this.dhcpSnooping, lsWEthPortDto.dhcpSnooping) &&
        Objects.equals(this.dhcpSnoopingTrusted, lsWEthPortDto.dhcpSnoopingTrusted) &&
        Objects.equals(this.ndSnooping, lsWEthPortDto.ndSnooping) &&
        Objects.equals(this.ndSnoopingTrusted, lsWEthPortDto.ndSnoopingTrusted) &&
        Objects.equals(this.portIsolation, lsWEthPortDto.portIsolation) &&
        Objects.equals(this.stp, lsWEthPortDto.stp) &&
        Objects.equals(this.stpEdgedport, lsWEthPortDto.stpEdgedport) &&
        Objects.equals(this.enableRelay, lsWEthPortDto.enableRelay) &&
        Objects.equals(this.enableMadDetection, lsWEthPortDto.enableMadDetection) &&
        Objects.equals(this.domainId, lsWEthPortDto.domainId) &&
        Objects.equals(this.naMsgCheck, lsWEthPortDto.naMsgCheck) &&
        Objects.equals(this.nsMsgCheck, lsWEthPortDto.nsMsgCheck) &&
        Objects.equals(this.rsMsgCheck, lsWEthPortDto.rsMsgCheck) &&
        Objects.equals(this.ipsgCheck, lsWEthPortDto.ipsgCheck) &&
        Objects.equals(this.daiCheck, lsWEthPortDto.daiCheck) &&
        Objects.equals(this.ipSubnetVlanEnable, lsWEthPortDto.ipSubnetVlanEnable) &&
        Objects.equals(this.name, lsWEthPortDto.name) &&
        Objects.equals(this.autoNegotiationEnable, lsWEthPortDto.autoNegotiationEnable) &&
        Objects.equals(this.speed, lsWEthPortDto.speed) &&
        Objects.equals(this.duplex, lsWEthPortDto.duplex) &&
        Objects.equals(this.stormControl, lsWEthPortDto.stormControl) &&
        Objects.equals(this.stormControlModel, lsWEthPortDto.stormControlModel) &&
        Objects.equals(this.stormControlMaxRate, lsWEthPortDto.stormControlMaxRate) &&
        Objects.equals(this.stormControlMinRate, lsWEthPortDto.stormControlMinRate) &&
        Objects.equals(this.stormControlInterval, lsWEthPortDto.stormControlInterval) &&
        Objects.equals(this.poe, lsWEthPortDto.poe) &&
        Objects.equals(this.lldp, lsWEthPortDto.lldp) &&
        Objects.equals(this.cdp, lsWEthPortDto.cdp) &&
        Objects.equals(this.loopbackDetectEnabled, lsWEthPortDto.loopbackDetectEnabled) &&
        Objects.equals(this.loopbackDetectAction, lsWEthPortDto.loopbackDetectAction) &&
        Objects.equals(this.loopbackDetectVlans, lsWEthPortDto.loopbackDetectVlans);
  }

  @Override
  public int hashCode() {
    return Objects.hash(status, description, linkType, defaultVlan, allowPassVlan, dhcpSnooping, dhcpSnoopingTrusted, ndSnooping, ndSnoopingTrusted, portIsolation, stp, stpEdgedport, enableRelay, enableMadDetection, domainId, naMsgCheck, nsMsgCheck, rsMsgCheck, ipsgCheck, daiCheck, ipSubnetVlanEnable, name, autoNegotiationEnable, speed, duplex, stormControl, stormControlModel, stormControlMaxRate, stormControlMinRate, stormControlInterval, poe, lldp, cdp, loopbackDetectEnabled, loopbackDetectAction, loopbackDetectVlans);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LSWEthPortDto {\n");
    
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    linkType: ").append(toIndentedString(linkType)).append("\n");
    sb.append("    defaultVlan: ").append(toIndentedString(defaultVlan)).append("\n");
    sb.append("    allowPassVlan: ").append(toIndentedString(allowPassVlan)).append("\n");
    sb.append("    dhcpSnooping: ").append(toIndentedString(dhcpSnooping)).append("\n");
    sb.append("    dhcpSnoopingTrusted: ").append(toIndentedString(dhcpSnoopingTrusted)).append("\n");
    sb.append("    ndSnooping: ").append(toIndentedString(ndSnooping)).append("\n");
    sb.append("    ndSnoopingTrusted: ").append(toIndentedString(ndSnoopingTrusted)).append("\n");
    sb.append("    portIsolation: ").append(toIndentedString(portIsolation)).append("\n");
    sb.append("    stp: ").append(toIndentedString(stp)).append("\n");
    sb.append("    stpEdgedport: ").append(toIndentedString(stpEdgedport)).append("\n");
    sb.append("    enableRelay: ").append(toIndentedString(enableRelay)).append("\n");
    sb.append("    enableMadDetection: ").append(toIndentedString(enableMadDetection)).append("\n");
    sb.append("    domainId: ").append(toIndentedString(domainId)).append("\n");
    sb.append("    naMsgCheck: ").append(toIndentedString(naMsgCheck)).append("\n");
    sb.append("    nsMsgCheck: ").append(toIndentedString(nsMsgCheck)).append("\n");
    sb.append("    rsMsgCheck: ").append(toIndentedString(rsMsgCheck)).append("\n");
    sb.append("    ipsgCheck: ").append(toIndentedString(ipsgCheck)).append("\n");
    sb.append("    daiCheck: ").append(toIndentedString(daiCheck)).append("\n");
    sb.append("    ipSubnetVlanEnable: ").append(toIndentedString(ipSubnetVlanEnable)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    autoNegotiationEnable: ").append(toIndentedString(autoNegotiationEnable)).append("\n");
    sb.append("    speed: ").append(toIndentedString(speed)).append("\n");
    sb.append("    duplex: ").append(toIndentedString(duplex)).append("\n");
    sb.append("    stormControl: ").append(toIndentedString(stormControl)).append("\n");
    sb.append("    stormControlModel: ").append(toIndentedString(stormControlModel)).append("\n");
    sb.append("    stormControlMaxRate: ").append(toIndentedString(stormControlMaxRate)).append("\n");
    sb.append("    stormControlMinRate: ").append(toIndentedString(stormControlMinRate)).append("\n");
    sb.append("    stormControlInterval: ").append(toIndentedString(stormControlInterval)).append("\n");
    sb.append("    poe: ").append(toIndentedString(poe)).append("\n");
    sb.append("    lldp: ").append(toIndentedString(lldp)).append("\n");
    sb.append("    cdp: ").append(toIndentedString(cdp)).append("\n");
    sb.append("    loopbackDetectEnabled: ").append(toIndentedString(loopbackDetectEnabled)).append("\n");
    sb.append("    loopbackDetectAction: ").append(toIndentedString(loopbackDetectAction)).append("\n");
    sb.append("    loopbackDetectVlans: ").append(toIndentedString(loopbackDetectVlans)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

