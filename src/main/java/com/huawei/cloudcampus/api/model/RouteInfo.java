/*
 * 路由器设备静态路由配置
 * 路由器设备静态路由配置第三方接口。
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.huawei.cloudcampus.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * RouteInfo
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaSdnClientCodegen", date = "2019-12-17T15:18:18.730+08:00")
public class RouteInfo {
  @SerializedName("mask")
  private String mask = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("nextAddress")
  private String nextAddress = null;

  @SerializedName("destinationIp")
  private String destinationIp = null;

  @SerializedName("priority")
  private Integer priority = null;

  @SerializedName("nextInterface")
  private String nextInterface = null;

  @SerializedName("nqaId")
  private String nqaId = null;

  @SerializedName("nqaAdminName")
  private String nqaAdminName = null;

  @SerializedName("nqaTestName")
  private String nqaTestName = null;

  @SerializedName("dhcp")
  private Boolean dhcp = null;

  @SerializedName("nextLogicInterface")
  private String nextLogicInterface = null;

  public RouteInfo mask(String mask) {
    this.mask = mask;
    return this;
  }

   /**
   * 掩码，0-32。创建后不允许修改。
   * return mask
  **/
  @ApiModelProperty(required = true, value = "掩码，0-32。创建后不允许修改。")
  public String getMask() {
    return mask;
  }

   /**
   * 掩码，0-32。创建后不允许修改。
   * Param mask
  **/
  public void setMask(String mask) {
    this.mask = mask;
  }

  public RouteInfo description(String description) {
    this.description = description;
    return this;
  }

   /**
   * 描述。
   * return description
  **/
  @ApiModelProperty(value = "描述。")
  public String getDescription() {
    return description;
  }

   /**
   * 描述。
   * Param description
  **/
  public void setDescription(String description) {
    this.description = description;
  }

  public RouteInfo nextAddress(String nextAddress) {
    this.nextAddress = nextAddress;
    return this;
  }

   /**
   * 下一跳地址，必须是合法的IPv4地址，以127或者224~255开头的IP地址为非法IP地址。当nextInterface为空时，nextAddress必填。
   * return nextAddress
  **/
  @ApiModelProperty(value = "下一跳地址，必须是合法的IPv4地址，以127或者224~255开头的IP地址为非法IP地址。当nextInterface为空时，nextAddress必填。")
  public String getNextAddress() {
    return nextAddress;
  }

   /**
   * 下一跳地址，必须是合法的IPv4地址，以127或者224~255开头的IP地址为非法IP地址。当nextInterface为空时，nextAddress必填。
   * Param nextAddress
  **/
  public void setNextAddress(String nextAddress) {
    this.nextAddress = nextAddress;
  }

  public RouteInfo destinationIp(String destinationIp) {
    this.destinationIp = destinationIp;
    return this;
  }

   /**
   * 目的IP地址，创建后不允许修改。必须是合法的IPv4地址，以127或者224~255开头的IP地址为非法IP地址。
   * return destinationIp
  **/
  @ApiModelProperty(required = true, value = "目的IP地址，创建后不允许修改。必须是合法的IPv4地址，以127或者224~255开头的IP地址为非法IP地址。")
  public String getDestinationIp() {
    return destinationIp;
  }

   /**
   * 目的IP地址，创建后不允许修改。必须是合法的IPv4地址，以127或者224~255开头的IP地址为非法IP地址。
   * Param destinationIp
  **/
  public void setDestinationIp(String destinationIp) {
    this.destinationIp = destinationIp;
  }

  public RouteInfo priority(Integer priority) {
    this.priority = priority;
    return this;
  }

   /**
   * 优先级，取值越小优先级越高。
   * minimum: 1
   * maximum: 255
   * return priority
  **/
  @ApiModelProperty(value = "优先级，取值越小优先级越高。")
  public Integer getPriority() {
    return priority;
  }

   /**
   * 优先级，取值越小优先级越高。
   * minimum: 1
   * maximum: 255
   * Param priority
  **/
  public void setPriority(Integer priority) {
    this.priority = priority;
  }

  public RouteInfo nextInterface(String nextInterface) {
    this.nextInterface = nextInterface;
    return this;
  }

   /**
   * 路由出接口。当nextAddress为空时，nextInterface必填。
   * return nextInterface
  **/
  @ApiModelProperty(value = "路由出接口。当nextAddress为空时，nextInterface必填。")
  public String getNextInterface() {
    return nextInterface;
  }

   /**
   * 路由出接口。当nextAddress为空时，nextInterface必填。
   * Param nextInterface
  **/
  public void setNextInterface(String nextInterface) {
    this.nextInterface = nextInterface;
  }

  public RouteInfo nqaId(String nqaId) {
    this.nqaId = nqaId;
    return this;
  }

   /**
   * NQA的ID。
   * return nqaId
  **/
  @ApiModelProperty(value = "NQA的ID。")
  public String getNqaId() {
    return nqaId;
  }

   /**
   * NQA的ID。
   * Param nqaId
  **/
  public void setNqaId(String nqaId) {
    this.nqaId = nqaId;
  }

  public RouteInfo nqaAdminName(String nqaAdminName) {
    this.nqaAdminName = nqaAdminName;
    return this;
  }

   /**
   * NQA的admin名称。
   * return nqaAdminName
  **/
  @ApiModelProperty(value = "NQA的admin名称。")
  public String getNqaAdminName() {
    return nqaAdminName;
  }

   /**
   * NQA的admin名称。
   * Param nqaAdminName
  **/
  public void setNqaAdminName(String nqaAdminName) {
    this.nqaAdminName = nqaAdminName;
  }

  public RouteInfo nqaTestName(String nqaTestName) {
    this.nqaTestName = nqaTestName;
    return this;
  }

   /**
   * NQA的测试名称。
   * return nqaTestName
  **/
  @ApiModelProperty(value = "NQA的测试名称。")
  public String getNqaTestName() {
    return nqaTestName;
  }

   /**
   * NQA的测试名称。
   * Param nqaTestName
  **/
  public void setNqaTestName(String nqaTestName) {
    this.nqaTestName = nqaTestName;
  }

  public RouteInfo dhcp(Boolean dhcp) {
    this.dhcp = dhcp;
    return this;
  }

   /**
   * DHCP开关使能。当nextAddress非空时，dhcp必须为false。
   * return dhcp
  **/
  @ApiModelProperty(value = "DHCP开关使能。当nextAddress非空时，dhcp必须为false。")
  public Boolean getDhcp() {
    return dhcp;
  }

   /**
   * DHCP开关使能。当nextAddress非空时，dhcp必须为false。
   * Param dhcp
  **/
  public void setDhcp(Boolean dhcp) {
    this.dhcp = dhcp;
  }

  public RouteInfo nextLogicInterface(String nextLogicInterface) {
    this.nextLogicInterface = nextLogicInterface;
    return this;
  }

   /**
   * 逻辑出接口。
   * return nextLogicInterface
  **/
  @ApiModelProperty(value = "逻辑出接口。")
  public String getNextLogicInterface() {
    return nextLogicInterface;
  }

   /**
   * 逻辑出接口。
   * Param nextLogicInterface
  **/
  public void setNextLogicInterface(String nextLogicInterface) {
    this.nextLogicInterface = nextLogicInterface;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RouteInfo routeInfo = (RouteInfo) o;
    return Objects.equals(this.mask, routeInfo.mask) &&
        Objects.equals(this.description, routeInfo.description) &&
        Objects.equals(this.nextAddress, routeInfo.nextAddress) &&
        Objects.equals(this.destinationIp, routeInfo.destinationIp) &&
        Objects.equals(this.priority, routeInfo.priority) &&
        Objects.equals(this.nextInterface, routeInfo.nextInterface) &&
        Objects.equals(this.nqaId, routeInfo.nqaId) &&
        Objects.equals(this.nqaAdminName, routeInfo.nqaAdminName) &&
        Objects.equals(this.nqaTestName, routeInfo.nqaTestName) &&
        Objects.equals(this.dhcp, routeInfo.dhcp) &&
        Objects.equals(this.nextLogicInterface, routeInfo.nextLogicInterface);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mask, description, nextAddress, destinationIp, priority, nextInterface, nqaId, nqaAdminName, nqaTestName, dhcp, nextLogicInterface);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RouteInfo {\n");
    
    sb.append("    mask: ").append(toIndentedString(mask)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    nextAddress: ").append(toIndentedString(nextAddress)).append("\n");
    sb.append("    destinationIp: ").append(toIndentedString(destinationIp)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    nextInterface: ").append(toIndentedString(nextInterface)).append("\n");
    sb.append("    nqaId: ").append(toIndentedString(nqaId)).append("\n");
    sb.append("    nqaAdminName: ").append(toIndentedString(nqaAdminName)).append("\n");
    sb.append("    nqaTestName: ").append(toIndentedString(nqaTestName)).append("\n");
    sb.append("    dhcp: ").append(toIndentedString(dhcp)).append("\n");
    sb.append("    nextLogicInterface: ").append(toIndentedString(nextLogicInterface)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

