/*
 * ACL模板管理
 * ACL模板第三方管理接口说明。 
 *
 * OpenAPI spec version: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.huawei.cloudcampus.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * RuleList
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaSdnClientCodegen", date = "2019-12-17T15:18:09.348+08:00")
public class RuleList {
  @SerializedName("ruleId")
  private String ruleId = null;

  @SerializedName("ip")
  private String ip = null;

  @SerializedName("domain")
  private String domain = null;

  /**
   * 策略，aclType为高级acl时有效且必填，有效值permit，deny。
   */
  @JsonAdapter(PolicyEnum.Adapter.class)
  public enum PolicyEnum {
    PERMIT("permit"),
    
    DENY("deny");

    private String value;

    PolicyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PolicyEnum fromValue(String text) {
      for (PolicyEnum b : PolicyEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<PolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PolicyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PolicyEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return PolicyEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("policy")
  private PolicyEnum policy = null;

  /**
   * 协议，aclType为高级acl时有效且必填，有效值udp，tcp，any，icmp。
   */
  @JsonAdapter(ProtocolEnum.Adapter.class)
  public enum ProtocolEnum {
    UDP("udp"),
    
    TCP("tcp"),
    
    ANY("any"),
    
    ICMP("icmp");

    private String value;

    ProtocolEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProtocolEnum fromValue(String text) {
      for (ProtocolEnum b : ProtocolEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ProtocolEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProtocolEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProtocolEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ProtocolEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("protocol")
  private ProtocolEnum protocol = null;

  @SerializedName("srcIp")
  private String srcIp = null;

  @SerializedName("srcPort")
  private String srcPort = null;

  @SerializedName("dstIp")
  private String dstIp = null;

  @SerializedName("dstPort")
  private String dstPort = null;

  @SerializedName("description")
  private String description = null;

  public RuleList ruleId(String ruleId) {
    this.ruleId = ruleId;
    return this;
  }

   /**
   * 规则优先级编号，仅高级ACL有效且必填。
   * return ruleId
  **/
  @ApiModelProperty(value = "规则优先级编号，仅高级ACL有效且必填。")
  public String getRuleId() {
    return ruleId;
  }

   /**
   * 规则优先级编号，仅高级ACL有效且必填。
   * Param ruleId
  **/
  public void setRuleId(String ruleId) {
    this.ruleId = ruleId;
  }

  public RuleList ip(String ip) {
    this.ip = ip;
    return this;
  }

   /**
   * IP地址，仅用户ACL有效且必填。与domain共存时，优先级高于domain。例如：192.168.1.0/24
   * return ip
  **/
  @ApiModelProperty(value = "IP地址，仅用户ACL有效且必填。与domain共存时，优先级高于domain。例如：192.168.1.0/24")
  public String getIp() {
    return ip;
  }

   /**
   * IP地址，仅用户ACL有效且必填。与domain共存时，优先级高于domain。例如：192.168.1.0/24
   * Param ip
  **/
  public void setIp(String ip) {
    this.ip = ip;
  }

  public RuleList domain(String domain) {
    this.domain = domain;
    return this;
  }

   /**
   * 域名，仅用户ACL有效且必填。例如：www.example.com
   * return domain
  **/
  @ApiModelProperty(value = "域名，仅用户ACL有效且必填。例如：www.example.com")
  public String getDomain() {
    return domain;
  }

   /**
   * 域名，仅用户ACL有效且必填。例如：www.example.com
   * Param domain
  **/
  public void setDomain(String domain) {
    this.domain = domain;
  }

  public RuleList policy(PolicyEnum policy) {
    this.policy = policy;
    return this;
  }

   /**
   * 策略，aclType为高级acl时有效且必填，有效值permit，deny。
   * return policy
  **/
  @ApiModelProperty(value = "策略，aclType为高级acl时有效且必填，有效值permit，deny。")
  public PolicyEnum getPolicy() {
    return policy;
  }

   /**
   * 策略，aclType为高级acl时有效且必填，有效值permit，deny。
   * Param policy
  **/
  public void setPolicy(PolicyEnum policy) {
    this.policy = policy;
  }

  public RuleList protocol(ProtocolEnum protocol) {
    this.protocol = protocol;
    return this;
  }

   /**
   * 协议，aclType为高级acl时有效且必填，有效值udp，tcp，any，icmp。
   * return protocol
  **/
  @ApiModelProperty(value = "协议，aclType为高级acl时有效且必填，有效值udp，tcp，any，icmp。")
  public ProtocolEnum getProtocol() {
    return protocol;
  }

   /**
   * 协议，aclType为高级acl时有效且必填，有效值udp，tcp，any，icmp。
   * Param protocol
  **/
  public void setProtocol(ProtocolEnum protocol) {
    this.protocol = protocol;
  }

  public RuleList srcIp(String srcIp) {
    this.srcIp = srcIp;
    return this;
  }

   /**
   * 源IP地址，可以输入Any表示任意IP，仅高级ACL有效且必填。
   * return srcIp
  **/
  @ApiModelProperty(value = "源IP地址，可以输入Any表示任意IP，仅高级ACL有效且必填。")
  public String getSrcIp() {
    return srcIp;
  }

   /**
   * 源IP地址，可以输入Any表示任意IP，仅高级ACL有效且必填。
   * Param srcIp
  **/
  public void setSrcIp(String srcIp) {
    this.srcIp = srcIp;
  }

  public RuleList srcPort(String srcPort) {
    this.srcPort = srcPort;
    return this;
  }

   /**
   * 源端口号，或源端口段，仅高级ACL有效，范围：整数（例如1000）或者整数段（1-100），且整数和整数段包含的值在0~65535。
   * return srcPort
  **/
  @ApiModelProperty(value = "源端口号，或源端口段，仅高级ACL有效，范围：整数（例如1000）或者整数段（1-100），且整数和整数段包含的值在0~65535。")
  public String getSrcPort() {
    return srcPort;
  }

   /**
   * 源端口号，或源端口段，仅高级ACL有效，范围：整数（例如1000）或者整数段（1-100），且整数和整数段包含的值在0~65535。
   * Param srcPort
  **/
  public void setSrcPort(String srcPort) {
    this.srcPort = srcPort;
  }

  public RuleList dstIp(String dstIp) {
    this.dstIp = dstIp;
    return this;
  }

   /**
   * 目的IP地址，可以输入Any表示任意IP，仅高级ACL有效且必填。
   * return dstIp
  **/
  @ApiModelProperty(value = "目的IP地址，可以输入Any表示任意IP，仅高级ACL有效且必填。")
  public String getDstIp() {
    return dstIp;
  }

   /**
   * 目的IP地址，可以输入Any表示任意IP，仅高级ACL有效且必填。
   * Param dstIp
  **/
  public void setDstIp(String dstIp) {
    this.dstIp = dstIp;
  }

  public RuleList dstPort(String dstPort) {
    this.dstPort = dstPort;
    return this;
  }

   /**
   * 目的端口号，或目的端口段，仅高级ACL有效，范围：整数（例如1000）或者整数段（1-100），且整数和整数段包含的值在0~65535。
   * return dstPort
  **/
  @ApiModelProperty(value = "目的端口号，或目的端口段，仅高级ACL有效，范围：整数（例如1000）或者整数段（1-100），且整数和整数段包含的值在0~65535。")
  public String getDstPort() {
    return dstPort;
  }

   /**
   * 目的端口号，或目的端口段，仅高级ACL有效，范围：整数（例如1000）或者整数段（1-100），且整数和整数段包含的值在0~65535。
   * Param dstPort
  **/
  public void setDstPort(String dstPort) {
    this.dstPort = dstPort;
  }

  public RuleList description(String description) {
    this.description = description;
    return this;
  }

   /**
   * 规则描述。
   * return description
  **/
  @ApiModelProperty(value = "规则描述。")
  public String getDescription() {
    return description;
  }

   /**
   * 规则描述。
   * Param description
  **/
  public void setDescription(String description) {
    this.description = description;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RuleList ruleList = (RuleList) o;
    return Objects.equals(this.ruleId, ruleList.ruleId) &&
        Objects.equals(this.ip, ruleList.ip) &&
        Objects.equals(this.domain, ruleList.domain) &&
        Objects.equals(this.policy, ruleList.policy) &&
        Objects.equals(this.protocol, ruleList.protocol) &&
        Objects.equals(this.srcIp, ruleList.srcIp) &&
        Objects.equals(this.srcPort, ruleList.srcPort) &&
        Objects.equals(this.dstIp, ruleList.dstIp) &&
        Objects.equals(this.dstPort, ruleList.dstPort) &&
        Objects.equals(this.description, ruleList.description);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ruleId, ip, domain, policy, protocol, srcIp, srcPort, dstIp, dstPort, description);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RuleList {\n");
    
    sb.append("    ruleId: ").append(toIndentedString(ruleId)).append("\n");
    sb.append("    ip: ").append(toIndentedString(ip)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    policy: ").append(toIndentedString(policy)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    srcIp: ").append(toIndentedString(srcIp)).append("\n");
    sb.append("    srcPort: ").append(toIndentedString(srcPort)).append("\n");
    sb.append("    dstIp: ").append(toIndentedString(dstIp)).append("\n");
    sb.append("    dstPort: ").append(toIndentedString(dstPort)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

