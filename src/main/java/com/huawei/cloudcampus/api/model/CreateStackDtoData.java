/*
 * 堆叠管理
 * 堆叠管理第三方接口。 场景：创建堆叠操作的第三方接口。
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.huawei.cloudcampus.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.huawei.cloudcampus.api.model.StackMemberInput;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * 创建堆叠入参结构。
 */
@ApiModel(description = "创建堆叠入参结构。")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaSdnClientCodegen", date = "2019-12-17T15:19:11.966+08:00")
public class CreateStackDtoData {
  @SerializedName("stackName")
  private String stackName = null;

  @SerializedName("stackMember")
  private List<StackMemberInput> stackMember = new ArrayList<StackMemberInput>();

  /**
   * 堆叠角色信息。非必填，默认为ACC。
   */
  @JsonAdapter(StackRolesEnum.Adapter.class)
  public enum StackRolesEnum {
    GATEWAY("Gateway"),
    
    CORE("CORE"),
    
    GATEWAY_CORE("Gateway+CORE"),
    
    GATEWAY_VRR("Gateway+vRR"),
    
    FIREWALL("Firewall"),
    
    WAC("WAC"),
    
    AGG("AGG"),
    
    ACC("ACC"),
    
    WIRELESS_ACCESS("Wireless Access");

    private String value;

    StackRolesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StackRolesEnum fromValue(String text) {
      for (StackRolesEnum b : StackRolesEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StackRolesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StackRolesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StackRolesEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StackRolesEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("stackRoles")
  private StackRolesEnum stackRoles = StackRolesEnum.ACC;

  public CreateStackDtoData stackName(String stackName) {
    this.stackName = stackName;
    return this;
  }

   /**
   * 堆叠名称。如果堆叠名称已存在，则将设备加入堆叠；否则，创建堆叠并加入设备。堆叠名称不能包含\&quot;?\&quot;或者制表符TAB。
   * return stackName
  **/
  @ApiModelProperty(required = true, value = "堆叠名称。如果堆叠名称已存在，则将设备加入堆叠；否则，创建堆叠并加入设备。堆叠名称不能包含\"?\"或者制表符TAB。")
  public String getStackName() {
    return stackName;
  }

   /**
   * 堆叠名称。如果堆叠名称已存在，则将设备加入堆叠；否则，创建堆叠并加入设备。堆叠名称不能包含\&quot;?\&quot;或者制表符TAB。
   * Param stackName
  **/
  public void setStackName(String stackName) {
    this.stackName = stackName;
  }

  public CreateStackDtoData stackMember(List<StackMemberInput> stackMember) {
    this.stackMember = stackMember;
    return this;
  }

  public CreateStackDtoData addStackMemberItem(StackMemberInput stackMemberItem) {
    this.stackMember.add(stackMemberItem);
    return this;
  }

   /**
   * 堆叠成员。
   * return stackMember
  **/
  @ApiModelProperty(required = true, value = "堆叠成员。")
  public List<StackMemberInput> getStackMember() {
    return stackMember;
  }

   /**
   * 堆叠成员。
   * Param stackMember
  **/
  public void setStackMember(List<StackMemberInput> stackMember) {
    this.stackMember = stackMember;
  }

  public CreateStackDtoData stackRoles(StackRolesEnum stackRoles) {
    this.stackRoles = stackRoles;
    return this;
  }

   /**
   * 堆叠角色信息。非必填，默认为ACC。
   * return stackRoles
  **/
  @ApiModelProperty(value = "堆叠角色信息。非必填，默认为ACC。")
  public StackRolesEnum getStackRoles() {
    return stackRoles;
  }

   /**
   * 堆叠角色信息。非必填，默认为ACC。
   * Param stackRoles
  **/
  public void setStackRoles(StackRolesEnum stackRoles) {
    this.stackRoles = stackRoles;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateStackDtoData createStackDtoData = (CreateStackDtoData) o;
    return Objects.equals(this.stackName, createStackDtoData.stackName) &&
        Objects.equals(this.stackMember, createStackDtoData.stackMember) &&
        Objects.equals(this.stackRoles, createStackDtoData.stackRoles);
  }

  @Override
  public int hashCode() {
    return Objects.hash(stackName, stackMember, stackRoles);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateStackDtoData {\n");
    
    sb.append("    stackName: ").append(toIndentedString(stackName)).append("\n");
    sb.append("    stackMember: ").append(toIndentedString(stackMember)).append("\n");
    sb.append("    stackRoles: ").append(toIndentedString(stackRoles)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

