/*
 * 交换机有线认证模板配置
 * 交换机有线认证模板，主要包括： · 创建站点下交换机有线认证模板配置 · 查询站点下交换机有线认证模板配置 · 修改站点下交换机有线认证模板配置 · 删除站点下交换机有线认证模板配置 · 修改站点交换机有线认证部分模板配置 · 增量绑站点交换机有线认证模板配置定 
 *
 * OpenAPI spec version: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.huawei.cloudcampus.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * portal认证内容，当authMode为open时，portal必填。
 */
@ApiModel(description = "portal认证内容，当authMode为open时，portal必填。")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaSdnClientCodegen", date = "2019-12-17T15:18:43.536+08:00")
public class PortalContent {
  /**
   * Portal认证类型。目前只支持portalController。
   */
  @JsonAdapter(AuthTypeSelectionEnum.Adapter.class)
  public enum AuthTypeSelectionEnum {
    PORTALCONTROLLER("portalController");

    private String value;

    AuthTypeSelectionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AuthTypeSelectionEnum fromValue(String text) {
      for (AuthTypeSelectionEnum b : AuthTypeSelectionEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<AuthTypeSelectionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AuthTypeSelectionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AuthTypeSelectionEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return AuthTypeSelectionEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("authTypeSelection")
  private AuthTypeSelectionEnum authTypeSelection = null;

  @SerializedName("fastPushEnable")
  private Boolean fastPushEnable = null;

  @SerializedName("portalPageId")
  private String portalPageId = null;

  @SerializedName("wechatEnable")
  private Boolean wechatEnable = null;

  @SerializedName("anonymousEnable")
  private Boolean anonymousEnable = null;

  @SerializedName("passCodeEnable")
  private Boolean passCodeEnable = null;

  @SerializedName("socialMediaEnable")
  private Boolean socialMediaEnable = null;

  @SerializedName("normalEnable")
  private Boolean normalEnable = null;

  @SerializedName("registerEnable")
  private Boolean registerEnable = null;

  /**
   * 用户注册有效期单位。当registerEnable为true时，registerExpireUnit生效。
   */
  @JsonAdapter(RegisterExpireUnitEnum.Adapter.class)
  public enum RegisterExpireUnitEnum {
    MINUTE("minute"),
    
    HOUR("hour"),
    
    DAY("day");

    private String value;

    RegisterExpireUnitEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RegisterExpireUnitEnum fromValue(String text) {
      for (RegisterExpireUnitEnum b : RegisterExpireUnitEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<RegisterExpireUnitEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RegisterExpireUnitEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RegisterExpireUnitEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return RegisterExpireUnitEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("registerExpireUnit")
  private RegisterExpireUnitEnum registerExpireUnit = null;

  @SerializedName("registerExpire")
  private Integer registerExpire = null;

  @SerializedName("userRegisterMaxAccessNumber")
  private Integer userRegisterMaxAccessNumber = null;

  @SerializedName("userGroupId")
  private String userGroupId = null;

  @SerializedName("userGroupName")
  private String userGroupName = null;

  /**
   * 有效期内免认证方式。mac表示开启免认证，reAuth则表示不开启免认证。
   */
  @JsonAdapter(FreeAuthModeEnum.Adapter.class)
  public enum FreeAuthModeEnum {
    MAC("mac"),
    
    REAUTH("reAuth");

    private String value;

    FreeAuthModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FreeAuthModeEnum fromValue(String text) {
      for (FreeAuthModeEnum b : FreeAuthModeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<FreeAuthModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FreeAuthModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FreeAuthModeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return FreeAuthModeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("freeAuthMode")
  private FreeAuthModeEnum freeAuthMode = null;

  @SerializedName("authExpire")
  private Integer authExpire = null;

  /**
   * Portal认证有效期单位，当freeAuthMode为mac时，authExpireUnit必填。只能为day、hour、minute中的一个，大小写不敏感，前后空格忽略，且不能含有全角字符。
   */
  @JsonAdapter(AuthExpireUnitEnum.Adapter.class)
  public enum AuthExpireUnitEnum {
    MINUTE("minute"),
    
    HOUR("hour"),
    
    DAY("day");

    private String value;

    AuthExpireUnitEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AuthExpireUnitEnum fromValue(String text) {
      for (AuthExpireUnitEnum b : AuthExpireUnitEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<AuthExpireUnitEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AuthExpireUnitEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AuthExpireUnitEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return AuthExpireUnitEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("authExpireUnit")
  private AuthExpireUnitEnum authExpireUnit = null;

  @SerializedName("smsAuthEnable")
  private Boolean smsAuthEnable = null;

  @SerializedName("smsUserExpire")
  private Integer smsUserExpire = null;

  /**
   * 短信认证用户有效期单位只能为day、hour、minute中的一个，大小写不敏感，前后空格忽略，且不能含有全角字符。当smsAuthEnable为true时，smsUserExpireUnit生效。
   */
  @JsonAdapter(SmsUserExpireUnitEnum.Adapter.class)
  public enum SmsUserExpireUnitEnum {
    MINUTE("minute"),
    
    HOUR("hour"),
    
    DAY("day");

    private String value;

    SmsUserExpireUnitEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SmsUserExpireUnitEnum fromValue(String text) {
      for (SmsUserExpireUnitEnum b : SmsUserExpireUnitEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<SmsUserExpireUnitEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SmsUserExpireUnitEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SmsUserExpireUnitEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return SmsUserExpireUnitEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("smsUserExpireUnit")
  private SmsUserExpireUnitEnum smsUserExpireUnit = null;

  @SerializedName("smsUserMaxAccessNumber")
  private Integer smsUserMaxAccessNumber = null;

  @SerializedName("smsPasswordExpire")
  private Integer smsPasswordExpire = null;

  /**
   * 密码有效期单位。只能为day、hour、minute中的一个，大小写不敏感，前后空格忽略，且不能含有全角字符。当smsAuthEnable为true时，smsUserMaxAccessNumber生效。
   */
  @JsonAdapter(SmsPasswordExpireUnitEnum.Adapter.class)
  public enum SmsPasswordExpireUnitEnum {
    MINUTE("minute"),
    
    HOUR("hour"),
    
    DAY("day");

    private String value;

    SmsPasswordExpireUnitEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SmsPasswordExpireUnitEnum fromValue(String text) {
      for (SmsPasswordExpireUnitEnum b : SmsPasswordExpireUnitEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<SmsPasswordExpireUnitEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SmsPasswordExpireUnitEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SmsPasswordExpireUnitEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return SmsPasswordExpireUnitEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("smsPasswordExpireUnit")
  private SmsPasswordExpireUnitEnum smsPasswordExpireUnit = null;

  @SerializedName("smsUserGroupId")
  private String smsUserGroupId = null;

  @SerializedName("smsUserGroupName")
  private String smsUserGroupName = null;

  @SerializedName("accountingEnable")
  private Boolean accountingEnable = null;

  @SerializedName("accountingExpire")
  private Integer accountingExpire = null;

  /**
   * 实时计费上报周期单位，只能为minute，大小写不敏感，前后空格忽略，且不能含有全角字符。accountingEnable为true时，accountingExpireUnit生效。
   */
  @JsonAdapter(AccountingExpireUnitEnum.Adapter.class)
  public enum AccountingExpireUnitEnum {
    MINUTE("minute");

    private String value;

    AccountingExpireUnitEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AccountingExpireUnitEnum fromValue(String text) {
      for (AccountingExpireUnitEnum b : AccountingExpireUnitEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<AccountingExpireUnitEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AccountingExpireUnitEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AccountingExpireUnitEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return AccountingExpireUnitEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("accountingExpireUnit")
  private AccountingExpireUnitEnum accountingExpireUnit = null;

  @SerializedName("ipV6AuthEnable")
  private Boolean ipV6AuthEnable = null;

  /**
   * 逃生策略。noNew：允许已认证用户继续使用网络，新用户不允许接入。默认值。noAuth：允许已认证用户继续使用网络，新用户需要输入PPSK密钥。注意：此时PPSK用户数控制MCA自动绑定功失效。 
   */
  @JsonAdapter(EscapeStrategyEnum.Adapter.class)
  public enum EscapeStrategyEnum {
    NONEW("noNew"),
    
    NOAUTH("noAuth");

    private String value;

    EscapeStrategyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EscapeStrategyEnum fromValue(String text) {
      for (EscapeStrategyEnum b : EscapeStrategyEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<EscapeStrategyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EscapeStrategyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EscapeStrategyEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return EscapeStrategyEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("escapeStrategy")
  private EscapeStrategyEnum escapeStrategy = null;

  public PortalContent authTypeSelection(AuthTypeSelectionEnum authTypeSelection) {
    this.authTypeSelection = authTypeSelection;
    return this;
  }

   /**
   * Portal认证类型。目前只支持portalController。
   * return authTypeSelection
  **/
  @ApiModelProperty(required = true, value = "Portal认证类型。目前只支持portalController。")
  public AuthTypeSelectionEnum getAuthTypeSelection() {
    return authTypeSelection;
  }

   /**
   * Portal认证类型。目前只支持portalController。
   * Param authTypeSelection
  **/
  public void setAuthTypeSelection(AuthTypeSelectionEnum authTypeSelection) {
    this.authTypeSelection = authTypeSelection;
  }

  public PortalContent fastPushEnable(Boolean fastPushEnable) {
    this.fastPushEnable = fastPushEnable;
    return this;
  }

   /**
   * 使能快速推送。
   * return fastPushEnable
  **/
  @ApiModelProperty(value = "使能快速推送。")
  public Boolean getFastPushEnable() {
    return fastPushEnable;
  }

   /**
   * 使能快速推送。
   * Param fastPushEnable
  **/
  public void setFastPushEnable(Boolean fastPushEnable) {
    this.fastPushEnable = fastPushEnable;
  }

  public PortalContent portalPageId(String portalPageId) {
    this.portalPageId = portalPageId;
    return this;
  }

   /**
   * 页面推送模板ID。当fastPushEnable为true时，portalPageId必填。
   * return portalPageId
  **/
  @ApiModelProperty(value = "页面推送模板ID。当fastPushEnable为true时，portalPageId必填。")
  public String getPortalPageId() {
    return portalPageId;
  }

   /**
   * 页面推送模板ID。当fastPushEnable为true时，portalPageId必填。
   * Param portalPageId
  **/
  public void setPortalPageId(String portalPageId) {
    this.portalPageId = portalPageId;
  }

  public PortalContent wechatEnable(Boolean wechatEnable) {
    this.wechatEnable = wechatEnable;
    return this;
  }

   /**
   * 使能微信认证。当fastPushEnable为false时，wechatEnable生效。若fastPushEnable为true，则必须先配置微信认证参数。
   * return wechatEnable
  **/
  @ApiModelProperty(value = "使能微信认证。当fastPushEnable为false时，wechatEnable生效。若fastPushEnable为true，则必须先配置微信认证参数。")
  public Boolean getWechatEnable() {
    return wechatEnable;
  }

   /**
   * 使能微信认证。当fastPushEnable为false时，wechatEnable生效。若fastPushEnable为true，则必须先配置微信认证参数。
   * Param wechatEnable
  **/
  public void setWechatEnable(Boolean wechatEnable) {
    this.wechatEnable = wechatEnable;
  }

  public PortalContent anonymousEnable(Boolean anonymousEnable) {
    this.anonymousEnable = anonymousEnable;
    return this;
  }

   /**
   * 使能匿名认证。当fastPushEnable为false时，anonymousEnable生效。
   * return anonymousEnable
  **/
  @ApiModelProperty(value = "使能匿名认证。当fastPushEnable为false时，anonymousEnable生效。")
  public Boolean getAnonymousEnable() {
    return anonymousEnable;
  }

   /**
   * 使能匿名认证。当fastPushEnable为false时，anonymousEnable生效。
   * Param anonymousEnable
  **/
  public void setAnonymousEnable(Boolean anonymousEnable) {
    this.anonymousEnable = anonymousEnable;
  }

  public PortalContent passCodeEnable(Boolean passCodeEnable) {
    this.passCodeEnable = passCodeEnable;
    return this;
  }

   /**
   * 使能passCode认证。当fastPushEnable为false时，passCodeEnable生效。
   * return passCodeEnable
  **/
  @ApiModelProperty(value = "使能passCode认证。当fastPushEnable为false时，passCodeEnable生效。")
  public Boolean getPassCodeEnable() {
    return passCodeEnable;
  }

   /**
   * 使能passCode认证。当fastPushEnable为false时，passCodeEnable生效。
   * Param passCodeEnable
  **/
  public void setPassCodeEnable(Boolean passCodeEnable) {
    this.passCodeEnable = passCodeEnable;
  }

  public PortalContent socialMediaEnable(Boolean socialMediaEnable) {
    this.socialMediaEnable = socialMediaEnable;
    return this;
  }

   /**
   * 使能facebook认证。若值为true，则必须先配置facebook认证参数。当fastPushEnable为false时，socialMediaEnable生效。
   * return socialMediaEnable
  **/
  @ApiModelProperty(value = "使能facebook认证。若值为true，则必须先配置facebook认证参数。当fastPushEnable为false时，socialMediaEnable生效。")
  public Boolean getSocialMediaEnable() {
    return socialMediaEnable;
  }

   /**
   * 使能facebook认证。若值为true，则必须先配置facebook认证参数。当fastPushEnable为false时，socialMediaEnable生效。
   * Param socialMediaEnable
  **/
  public void setSocialMediaEnable(Boolean socialMediaEnable) {
    this.socialMediaEnable = socialMediaEnable;
  }

  public PortalContent normalEnable(Boolean normalEnable) {
    this.normalEnable = normalEnable;
    return this;
  }

   /**
   * 使能用户名密码认证。当fastPushEnable为false时，normalEnable生效。
   * return normalEnable
  **/
  @ApiModelProperty(value = "使能用户名密码认证。当fastPushEnable为false时，normalEnable生效。")
  public Boolean getNormalEnable() {
    return normalEnable;
  }

   /**
   * 使能用户名密码认证。当fastPushEnable为false时，normalEnable生效。
   * Param normalEnable
  **/
  public void setNormalEnable(Boolean normalEnable) {
    this.normalEnable = normalEnable;
  }

  public PortalContent registerEnable(Boolean registerEnable) {
    this.registerEnable = registerEnable;
    return this;
  }

   /**
   * 用户自注册使能。当normalEnable为true时，registerEnable生效。
   * return registerEnable
  **/
  @ApiModelProperty(value = "用户自注册使能。当normalEnable为true时，registerEnable生效。")
  public Boolean getRegisterEnable() {
    return registerEnable;
  }

   /**
   * 用户自注册使能。当normalEnable为true时，registerEnable生效。
   * Param registerEnable
  **/
  public void setRegisterEnable(Boolean registerEnable) {
    this.registerEnable = registerEnable;
  }

  public PortalContent registerExpireUnit(RegisterExpireUnitEnum registerExpireUnit) {
    this.registerExpireUnit = registerExpireUnit;
    return this;
  }

   /**
   * 用户注册有效期单位。当registerEnable为true时，registerExpireUnit生效。
   * return registerExpireUnit
  **/
  @ApiModelProperty(value = "用户注册有效期单位。当registerEnable为true时，registerExpireUnit生效。")
  public RegisterExpireUnitEnum getRegisterExpireUnit() {
    return registerExpireUnit;
  }

   /**
   * 用户注册有效期单位。当registerEnable为true时，registerExpireUnit生效。
   * Param registerExpireUnit
  **/
  public void setRegisterExpireUnit(RegisterExpireUnitEnum registerExpireUnit) {
    this.registerExpireUnit = registerExpireUnit;
  }

  public PortalContent registerExpire(Integer registerExpire) {
    this.registerExpire = registerExpire;
    return this;
  }

   /**
   * 用户注册有效期。当registerEnable为true时，registerExpire生效。当registerExpireUnit为minute时，registerExpire取值范围为1~59。当registerExpireUnit为hour时，registerExpire取值范围为1~23。当registerExpireUnit为day时，registerExpire取值范围为1~365。
   * return registerExpire
  **/
  @ApiModelProperty(value = "用户注册有效期。当registerEnable为true时，registerExpire生效。当registerExpireUnit为minute时，registerExpire取值范围为1~59。当registerExpireUnit为hour时，registerExpire取值范围为1~23。当registerExpireUnit为day时，registerExpire取值范围为1~365。")
  public Integer getRegisterExpire() {
    return registerExpire;
  }

   /**
   * 用户注册有效期。当registerEnable为true时，registerExpire生效。当registerExpireUnit为minute时，registerExpire取值范围为1~59。当registerExpireUnit为hour时，registerExpire取值范围为1~23。当registerExpireUnit为day时，registerExpire取值范围为1~365。
   * Param registerExpire
  **/
  public void setRegisterExpire(Integer registerExpire) {
    this.registerExpire = registerExpire;
  }

  public PortalContent userRegisterMaxAccessNumber(Integer userRegisterMaxAccessNumber) {
    this.userRegisterMaxAccessNumber = userRegisterMaxAccessNumber;
    return this;
  }

   /**
   * 用户最大接入数。当registerEnable为true时，userRegisterMaxAccessNumber生效。
   * minimum: 0
   * maximum: 16
   * return userRegisterMaxAccessNumber
  **/
  @ApiModelProperty(value = "用户最大接入数。当registerEnable为true时，userRegisterMaxAccessNumber生效。")
  public Integer getUserRegisterMaxAccessNumber() {
    return userRegisterMaxAccessNumber;
  }

   /**
   * 用户最大接入数。当registerEnable为true时，userRegisterMaxAccessNumber生效。
   * minimum: 0
   * maximum: 16
   * Param userRegisterMaxAccessNumber
  **/
  public void setUserRegisterMaxAccessNumber(Integer userRegisterMaxAccessNumber) {
    this.userRegisterMaxAccessNumber = userRegisterMaxAccessNumber;
  }

  public PortalContent userGroupId(String userGroupId) {
    this.userGroupId = userGroupId;
    return this;
  }

   /**
   * 用户名密码认证的自注册用户注册后所属的用户组ID，UUID格式。当registerEnable为true时，userGroupId生效。
   * return userGroupId
  **/
  @ApiModelProperty(value = "用户名密码认证的自注册用户注册后所属的用户组ID，UUID格式。当registerEnable为true时，userGroupId生效。")
  public String getUserGroupId() {
    return userGroupId;
  }

   /**
   * 用户名密码认证的自注册用户注册后所属的用户组ID，UUID格式。当registerEnable为true时，userGroupId生效。
   * Param userGroupId
  **/
  public void setUserGroupId(String userGroupId) {
    this.userGroupId = userGroupId;
  }

  public PortalContent userGroupName(String userGroupName) {
    this.userGroupName = userGroupName;
    return this;
  }

   /**
   * 用户名密码认证的自注册用户注册后所属的用户组名称。当registerEnable为true时，userGroupName生效。
   * return userGroupName
  **/
  @ApiModelProperty(value = "用户名密码认证的自注册用户注册后所属的用户组名称。当registerEnable为true时，userGroupName生效。")
  public String getUserGroupName() {
    return userGroupName;
  }

   /**
   * 用户名密码认证的自注册用户注册后所属的用户组名称。当registerEnable为true时，userGroupName生效。
   * Param userGroupName
  **/
  public void setUserGroupName(String userGroupName) {
    this.userGroupName = userGroupName;
  }

  public PortalContent freeAuthMode(FreeAuthModeEnum freeAuthMode) {
    this.freeAuthMode = freeAuthMode;
    return this;
  }

   /**
   * 有效期内免认证方式。mac表示开启免认证，reAuth则表示不开启免认证。
   * return freeAuthMode
  **/
  @ApiModelProperty(required = true, value = "有效期内免认证方式。mac表示开启免认证，reAuth则表示不开启免认证。")
  public FreeAuthModeEnum getFreeAuthMode() {
    return freeAuthMode;
  }

   /**
   * 有效期内免认证方式。mac表示开启免认证，reAuth则表示不开启免认证。
   * Param freeAuthMode
  **/
  public void setFreeAuthMode(FreeAuthModeEnum freeAuthMode) {
    this.freeAuthMode = freeAuthMode;
  }

  public PortalContent authExpire(Integer authExpire) {
    this.authExpire = authExpire;
    return this;
  }

   /**
   * Portal认证有效期，当freeAuthMode为mac时，authExpire必填。当authExpireUnit为minute时，authExpire取值范围为1~59。当authExpireUnit为hour时，authExpire取值范围为1~23。当authExpireUnit为day时，authExpire取值范围为1~365。
   * return authExpire
  **/
  @ApiModelProperty(value = "Portal认证有效期，当freeAuthMode为mac时，authExpire必填。当authExpireUnit为minute时，authExpire取值范围为1~59。当authExpireUnit为hour时，authExpire取值范围为1~23。当authExpireUnit为day时，authExpire取值范围为1~365。")
  public Integer getAuthExpire() {
    return authExpire;
  }

   /**
   * Portal认证有效期，当freeAuthMode为mac时，authExpire必填。当authExpireUnit为minute时，authExpire取值范围为1~59。当authExpireUnit为hour时，authExpire取值范围为1~23。当authExpireUnit为day时，authExpire取值范围为1~365。
   * Param authExpire
  **/
  public void setAuthExpire(Integer authExpire) {
    this.authExpire = authExpire;
  }

  public PortalContent authExpireUnit(AuthExpireUnitEnum authExpireUnit) {
    this.authExpireUnit = authExpireUnit;
    return this;
  }

   /**
   * Portal认证有效期单位，当freeAuthMode为mac时，authExpireUnit必填。只能为day、hour、minute中的一个，大小写不敏感，前后空格忽略，且不能含有全角字符。
   * return authExpireUnit
  **/
  @ApiModelProperty(value = "Portal认证有效期单位，当freeAuthMode为mac时，authExpireUnit必填。只能为day、hour、minute中的一个，大小写不敏感，前后空格忽略，且不能含有全角字符。")
  public AuthExpireUnitEnum getAuthExpireUnit() {
    return authExpireUnit;
  }

   /**
   * Portal认证有效期单位，当freeAuthMode为mac时，authExpireUnit必填。只能为day、hour、minute中的一个，大小写不敏感，前后空格忽略，且不能含有全角字符。
   * Param authExpireUnit
  **/
  public void setAuthExpireUnit(AuthExpireUnitEnum authExpireUnit) {
    this.authExpireUnit = authExpireUnit;
  }

  public PortalContent smsAuthEnable(Boolean smsAuthEnable) {
    this.smsAuthEnable = smsAuthEnable;
    return this;
  }

   /**
   * 是否启用短信认证。若smsAuthEnable值为true，则必须配置短信服务器。当fastPushEnable为false时，smsAuthEnable生效。
   * return smsAuthEnable
  **/
  @ApiModelProperty(value = "是否启用短信认证。若smsAuthEnable值为true，则必须配置短信服务器。当fastPushEnable为false时，smsAuthEnable生效。")
  public Boolean getSmsAuthEnable() {
    return smsAuthEnable;
  }

   /**
   * 是否启用短信认证。若smsAuthEnable值为true，则必须配置短信服务器。当fastPushEnable为false时，smsAuthEnable生效。
   * Param smsAuthEnable
  **/
  public void setSmsAuthEnable(Boolean smsAuthEnable) {
    this.smsAuthEnable = smsAuthEnable;
  }

  public PortalContent smsUserExpire(Integer smsUserExpire) {
    this.smsUserExpire = smsUserExpire;
    return this;
  }

   /**
   * 短信认证用户有效期，当smsAuthEnable为true时，smsUserExpire生效。当smsUserExpireUnit为minute时，smsUserExpire取值范围为1~59。当smsUserExpireUnit为hour时，smsUserExpire取值范围为1~23。当smsUserExpireUnit为day时，smsUserExpire取值范围为1~365。
   * return smsUserExpire
  **/
  @ApiModelProperty(value = "短信认证用户有效期，当smsAuthEnable为true时，smsUserExpire生效。当smsUserExpireUnit为minute时，smsUserExpire取值范围为1~59。当smsUserExpireUnit为hour时，smsUserExpire取值范围为1~23。当smsUserExpireUnit为day时，smsUserExpire取值范围为1~365。")
  public Integer getSmsUserExpire() {
    return smsUserExpire;
  }

   /**
   * 短信认证用户有效期，当smsAuthEnable为true时，smsUserExpire生效。当smsUserExpireUnit为minute时，smsUserExpire取值范围为1~59。当smsUserExpireUnit为hour时，smsUserExpire取值范围为1~23。当smsUserExpireUnit为day时，smsUserExpire取值范围为1~365。
   * Param smsUserExpire
  **/
  public void setSmsUserExpire(Integer smsUserExpire) {
    this.smsUserExpire = smsUserExpire;
  }

  public PortalContent smsUserExpireUnit(SmsUserExpireUnitEnum smsUserExpireUnit) {
    this.smsUserExpireUnit = smsUserExpireUnit;
    return this;
  }

   /**
   * 短信认证用户有效期单位只能为day、hour、minute中的一个，大小写不敏感，前后空格忽略，且不能含有全角字符。当smsAuthEnable为true时，smsUserExpireUnit生效。
   * return smsUserExpireUnit
  **/
  @ApiModelProperty(value = "短信认证用户有效期单位只能为day、hour、minute中的一个，大小写不敏感，前后空格忽略，且不能含有全角字符。当smsAuthEnable为true时，smsUserExpireUnit生效。")
  public SmsUserExpireUnitEnum getSmsUserExpireUnit() {
    return smsUserExpireUnit;
  }

   /**
   * 短信认证用户有效期单位只能为day、hour、minute中的一个，大小写不敏感，前后空格忽略，且不能含有全角字符。当smsAuthEnable为true时，smsUserExpireUnit生效。
   * Param smsUserExpireUnit
  **/
  public void setSmsUserExpireUnit(SmsUserExpireUnitEnum smsUserExpireUnit) {
    this.smsUserExpireUnit = smsUserExpireUnit;
  }

  public PortalContent smsUserMaxAccessNumber(Integer smsUserMaxAccessNumber) {
    this.smsUserMaxAccessNumber = smsUserMaxAccessNumber;
    return this;
  }

   /**
   * 短信认证用户最大接入数。当smsAuthEnable为true时，smsUserMaxAccessNumber生效。
   * minimum: 1
   * maximum: 16
   * return smsUserMaxAccessNumber
  **/
  @ApiModelProperty(value = "短信认证用户最大接入数。当smsAuthEnable为true时，smsUserMaxAccessNumber生效。")
  public Integer getSmsUserMaxAccessNumber() {
    return smsUserMaxAccessNumber;
  }

   /**
   * 短信认证用户最大接入数。当smsAuthEnable为true时，smsUserMaxAccessNumber生效。
   * minimum: 1
   * maximum: 16
   * Param smsUserMaxAccessNumber
  **/
  public void setSmsUserMaxAccessNumber(Integer smsUserMaxAccessNumber) {
    this.smsUserMaxAccessNumber = smsUserMaxAccessNumber;
  }

  public PortalContent smsPasswordExpire(Integer smsPasswordExpire) {
    this.smsPasswordExpire = smsPasswordExpire;
    return this;
  }

   /**
   * 密码有效期。当smsAuthEnable为true时，smsUserMaxAccessNumber生效。当smsPasswordExpireUnit为minute时，smsPasswordExpire取值范围为1~59。当smsPasswordExpireUnit为hour时，smsPasswordExpire取值范围为1~23。当smsPasswordExpireUnit为day时，smsPasswordExpire取值范围为1~365。
   * return smsPasswordExpire
  **/
  @ApiModelProperty(value = "密码有效期。当smsAuthEnable为true时，smsUserMaxAccessNumber生效。当smsPasswordExpireUnit为minute时，smsPasswordExpire取值范围为1~59。当smsPasswordExpireUnit为hour时，smsPasswordExpire取值范围为1~23。当smsPasswordExpireUnit为day时，smsPasswordExpire取值范围为1~365。")
  public Integer getSmsPasswordExpire() {
    return smsPasswordExpire;
  }

   /**
   * 密码有效期。当smsAuthEnable为true时，smsUserMaxAccessNumber生效。当smsPasswordExpireUnit为minute时，smsPasswordExpire取值范围为1~59。当smsPasswordExpireUnit为hour时，smsPasswordExpire取值范围为1~23。当smsPasswordExpireUnit为day时，smsPasswordExpire取值范围为1~365。
   * Param smsPasswordExpire
  **/
  public void setSmsPasswordExpire(Integer smsPasswordExpire) {
    this.smsPasswordExpire = smsPasswordExpire;
  }

  public PortalContent smsPasswordExpireUnit(SmsPasswordExpireUnitEnum smsPasswordExpireUnit) {
    this.smsPasswordExpireUnit = smsPasswordExpireUnit;
    return this;
  }

   /**
   * 密码有效期单位。只能为day、hour、minute中的一个，大小写不敏感，前后空格忽略，且不能含有全角字符。当smsAuthEnable为true时，smsUserMaxAccessNumber生效。
   * return smsPasswordExpireUnit
  **/
  @ApiModelProperty(value = "密码有效期单位。只能为day、hour、minute中的一个，大小写不敏感，前后空格忽略，且不能含有全角字符。当smsAuthEnable为true时，smsUserMaxAccessNumber生效。")
  public SmsPasswordExpireUnitEnum getSmsPasswordExpireUnit() {
    return smsPasswordExpireUnit;
  }

   /**
   * 密码有效期单位。只能为day、hour、minute中的一个，大小写不敏感，前后空格忽略，且不能含有全角字符。当smsAuthEnable为true时，smsUserMaxAccessNumber生效。
   * Param smsPasswordExpireUnit
  **/
  public void setSmsPasswordExpireUnit(SmsPasswordExpireUnitEnum smsPasswordExpireUnit) {
    this.smsPasswordExpireUnit = smsPasswordExpireUnit;
  }

  public PortalContent smsUserGroupId(String smsUserGroupId) {
    this.smsUserGroupId = smsUserGroupId;
    return this;
  }

   /**
   * 短信认证用户所属组ID，UUID格式。当smsAuthEnable为true时，smsUserMaxAccessNumber生效。
   * return smsUserGroupId
  **/
  @ApiModelProperty(value = "短信认证用户所属组ID，UUID格式。当smsAuthEnable为true时，smsUserMaxAccessNumber生效。")
  public String getSmsUserGroupId() {
    return smsUserGroupId;
  }

   /**
   * 短信认证用户所属组ID，UUID格式。当smsAuthEnable为true时，smsUserMaxAccessNumber生效。
   * Param smsUserGroupId
  **/
  public void setSmsUserGroupId(String smsUserGroupId) {
    this.smsUserGroupId = smsUserGroupId;
  }

  public PortalContent smsUserGroupName(String smsUserGroupName) {
    this.smsUserGroupName = smsUserGroupName;
    return this;
  }

   /**
   * 短信认证用户所属组名。当smsAuthEnable为true时，smsUserMaxAccessNumber生效。
   * return smsUserGroupName
  **/
  @ApiModelProperty(value = "短信认证用户所属组名。当smsAuthEnable为true时，smsUserMaxAccessNumber生效。")
  public String getSmsUserGroupName() {
    return smsUserGroupName;
  }

   /**
   * 短信认证用户所属组名。当smsAuthEnable为true时，smsUserMaxAccessNumber生效。
   * Param smsUserGroupName
  **/
  public void setSmsUserGroupName(String smsUserGroupName) {
    this.smsUserGroupName = smsUserGroupName;
  }

  public PortalContent accountingEnable(Boolean accountingEnable) {
    this.accountingEnable = accountingEnable;
    return this;
  }

   /**
   * 使能实时计费。
   * return accountingEnable
  **/
  @ApiModelProperty(required = true, value = "使能实时计费。")
  public Boolean getAccountingEnable() {
    return accountingEnable;
  }

   /**
   * 使能实时计费。
   * Param accountingEnable
  **/
  public void setAccountingEnable(Boolean accountingEnable) {
    this.accountingEnable = accountingEnable;
  }

  public PortalContent accountingExpire(Integer accountingExpire) {
    this.accountingExpire = accountingExpire;
    return this;
  }

   /**
   * 实时计费上报周期。当accountingExpireUnit为minute时，范围为1~65535。 accountingEnable为true时，accountingExpire生效。
   * minimum: 0
   * maximum: 65535
   * return accountingExpire
  **/
  @ApiModelProperty(value = "实时计费上报周期。当accountingExpireUnit为minute时，范围为1~65535。 accountingEnable为true时，accountingExpire生效。")
  public Integer getAccountingExpire() {
    return accountingExpire;
  }

   /**
   * 实时计费上报周期。当accountingExpireUnit为minute时，范围为1~65535。 accountingEnable为true时，accountingExpire生效。
   * minimum: 0
   * maximum: 65535
   * Param accountingExpire
  **/
  public void setAccountingExpire(Integer accountingExpire) {
    this.accountingExpire = accountingExpire;
  }

  public PortalContent accountingExpireUnit(AccountingExpireUnitEnum accountingExpireUnit) {
    this.accountingExpireUnit = accountingExpireUnit;
    return this;
  }

   /**
   * 实时计费上报周期单位，只能为minute，大小写不敏感，前后空格忽略，且不能含有全角字符。accountingEnable为true时，accountingExpireUnit生效。
   * return accountingExpireUnit
  **/
  @ApiModelProperty(value = "实时计费上报周期单位，只能为minute，大小写不敏感，前后空格忽略，且不能含有全角字符。accountingEnable为true时，accountingExpireUnit生效。")
  public AccountingExpireUnitEnum getAccountingExpireUnit() {
    return accountingExpireUnit;
  }

   /**
   * 实时计费上报周期单位，只能为minute，大小写不敏感，前后空格忽略，且不能含有全角字符。accountingEnable为true时，accountingExpireUnit生效。
   * Param accountingExpireUnit
  **/
  public void setAccountingExpireUnit(AccountingExpireUnitEnum accountingExpireUnit) {
    this.accountingExpireUnit = accountingExpireUnit;
  }

  public PortalContent ipV6AuthEnable(Boolean ipV6AuthEnable) {
    this.ipV6AuthEnable = ipV6AuthEnable;
    return this;
  }

   /**
   * IPV6是否开启。
   * return ipV6AuthEnable
  **/
  @ApiModelProperty(value = "IPV6是否开启。")
  public Boolean getIpV6AuthEnable() {
    return ipV6AuthEnable;
  }

   /**
   * IPV6是否开启。
   * Param ipV6AuthEnable
  **/
  public void setIpV6AuthEnable(Boolean ipV6AuthEnable) {
    this.ipV6AuthEnable = ipV6AuthEnable;
  }

  public PortalContent escapeStrategy(EscapeStrategyEnum escapeStrategy) {
    this.escapeStrategy = escapeStrategy;
    return this;
  }

   /**
   * 逃生策略。noNew：允许已认证用户继续使用网络，新用户不允许接入。默认值。noAuth：允许已认证用户继续使用网络，新用户需要输入PPSK密钥。注意：此时PPSK用户数控制MCA自动绑定功失效。 
   * return escapeStrategy
  **/
  @ApiModelProperty(required = true, value = "逃生策略。noNew：允许已认证用户继续使用网络，新用户不允许接入。默认值。noAuth：允许已认证用户继续使用网络，新用户需要输入PPSK密钥。注意：此时PPSK用户数控制MCA自动绑定功失效。 ")
  public EscapeStrategyEnum getEscapeStrategy() {
    return escapeStrategy;
  }

   /**
   * 逃生策略。noNew：允许已认证用户继续使用网络，新用户不允许接入。默认值。noAuth：允许已认证用户继续使用网络，新用户需要输入PPSK密钥。注意：此时PPSK用户数控制MCA自动绑定功失效。 
   * Param escapeStrategy
  **/
  public void setEscapeStrategy(EscapeStrategyEnum escapeStrategy) {
    this.escapeStrategy = escapeStrategy;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PortalContent portalContent = (PortalContent) o;
    return Objects.equals(this.authTypeSelection, portalContent.authTypeSelection) &&
        Objects.equals(this.fastPushEnable, portalContent.fastPushEnable) &&
        Objects.equals(this.portalPageId, portalContent.portalPageId) &&
        Objects.equals(this.wechatEnable, portalContent.wechatEnable) &&
        Objects.equals(this.anonymousEnable, portalContent.anonymousEnable) &&
        Objects.equals(this.passCodeEnable, portalContent.passCodeEnable) &&
        Objects.equals(this.socialMediaEnable, portalContent.socialMediaEnable) &&
        Objects.equals(this.normalEnable, portalContent.normalEnable) &&
        Objects.equals(this.registerEnable, portalContent.registerEnable) &&
        Objects.equals(this.registerExpireUnit, portalContent.registerExpireUnit) &&
        Objects.equals(this.registerExpire, portalContent.registerExpire) &&
        Objects.equals(this.userRegisterMaxAccessNumber, portalContent.userRegisterMaxAccessNumber) &&
        Objects.equals(this.userGroupId, portalContent.userGroupId) &&
        Objects.equals(this.userGroupName, portalContent.userGroupName) &&
        Objects.equals(this.freeAuthMode, portalContent.freeAuthMode) &&
        Objects.equals(this.authExpire, portalContent.authExpire) &&
        Objects.equals(this.authExpireUnit, portalContent.authExpireUnit) &&
        Objects.equals(this.smsAuthEnable, portalContent.smsAuthEnable) &&
        Objects.equals(this.smsUserExpire, portalContent.smsUserExpire) &&
        Objects.equals(this.smsUserExpireUnit, portalContent.smsUserExpireUnit) &&
        Objects.equals(this.smsUserMaxAccessNumber, portalContent.smsUserMaxAccessNumber) &&
        Objects.equals(this.smsPasswordExpire, portalContent.smsPasswordExpire) &&
        Objects.equals(this.smsPasswordExpireUnit, portalContent.smsPasswordExpireUnit) &&
        Objects.equals(this.smsUserGroupId, portalContent.smsUserGroupId) &&
        Objects.equals(this.smsUserGroupName, portalContent.smsUserGroupName) &&
        Objects.equals(this.accountingEnable, portalContent.accountingEnable) &&
        Objects.equals(this.accountingExpire, portalContent.accountingExpire) &&
        Objects.equals(this.accountingExpireUnit, portalContent.accountingExpireUnit) &&
        Objects.equals(this.ipV6AuthEnable, portalContent.ipV6AuthEnable) &&
        Objects.equals(this.escapeStrategy, portalContent.escapeStrategy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authTypeSelection, fastPushEnable, portalPageId, wechatEnable, anonymousEnable, passCodeEnable, socialMediaEnable, normalEnable, registerEnable, registerExpireUnit, registerExpire, userRegisterMaxAccessNumber, userGroupId, userGroupName, freeAuthMode, authExpire, authExpireUnit, smsAuthEnable, smsUserExpire, smsUserExpireUnit, smsUserMaxAccessNumber, smsPasswordExpire, smsPasswordExpireUnit, smsUserGroupId, smsUserGroupName, accountingEnable, accountingExpire, accountingExpireUnit, ipV6AuthEnable, escapeStrategy);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PortalContent {\n");
    
    sb.append("    authTypeSelection: ").append(toIndentedString(authTypeSelection)).append("\n");
    sb.append("    fastPushEnable: ").append(toIndentedString(fastPushEnable)).append("\n");
    sb.append("    portalPageId: ").append(toIndentedString(portalPageId)).append("\n");
    sb.append("    wechatEnable: ").append(toIndentedString(wechatEnable)).append("\n");
    sb.append("    anonymousEnable: ").append(toIndentedString(anonymousEnable)).append("\n");
    sb.append("    passCodeEnable: ").append(toIndentedString(passCodeEnable)).append("\n");
    sb.append("    socialMediaEnable: ").append(toIndentedString(socialMediaEnable)).append("\n");
    sb.append("    normalEnable: ").append(toIndentedString(normalEnable)).append("\n");
    sb.append("    registerEnable: ").append(toIndentedString(registerEnable)).append("\n");
    sb.append("    registerExpireUnit: ").append(toIndentedString(registerExpireUnit)).append("\n");
    sb.append("    registerExpire: ").append(toIndentedString(registerExpire)).append("\n");
    sb.append("    userRegisterMaxAccessNumber: ").append(toIndentedString(userRegisterMaxAccessNumber)).append("\n");
    sb.append("    userGroupId: ").append(toIndentedString(userGroupId)).append("\n");
    sb.append("    userGroupName: ").append(toIndentedString(userGroupName)).append("\n");
    sb.append("    freeAuthMode: ").append(toIndentedString(freeAuthMode)).append("\n");
    sb.append("    authExpire: ").append(toIndentedString(authExpire)).append("\n");
    sb.append("    authExpireUnit: ").append(toIndentedString(authExpireUnit)).append("\n");
    sb.append("    smsAuthEnable: ").append(toIndentedString(smsAuthEnable)).append("\n");
    sb.append("    smsUserExpire: ").append(toIndentedString(smsUserExpire)).append("\n");
    sb.append("    smsUserExpireUnit: ").append(toIndentedString(smsUserExpireUnit)).append("\n");
    sb.append("    smsUserMaxAccessNumber: ").append(toIndentedString(smsUserMaxAccessNumber)).append("\n");
    sb.append("    smsPasswordExpire: ").append(toIndentedString(smsPasswordExpire)).append("\n");
    sb.append("    smsPasswordExpireUnit: ").append(toIndentedString(smsPasswordExpireUnit)).append("\n");
    sb.append("    smsUserGroupId: ").append(toIndentedString(smsUserGroupId)).append("\n");
    sb.append("    smsUserGroupName: ").append(toIndentedString(smsUserGroupName)).append("\n");
    sb.append("    accountingEnable: ").append(toIndentedString(accountingEnable)).append("\n");
    sb.append("    accountingExpire: ").append(toIndentedString(accountingExpire)).append("\n");
    sb.append("    accountingExpireUnit: ").append(toIndentedString(accountingExpireUnit)).append("\n");
    sb.append("    ipV6AuthEnable: ").append(toIndentedString(ipV6AuthEnable)).append("\n");
    sb.append("    escapeStrategy: ").append(toIndentedString(escapeStrategy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

