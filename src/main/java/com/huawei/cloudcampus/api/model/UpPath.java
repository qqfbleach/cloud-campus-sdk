/*
 * 设备升级
 * · 查询设备文件 · 创建站点升级 · 查询站点升级 · 查询设备升级 · 取消设备升级 · 删除站点升级 · 重新升级设备 
 *
 * OpenAPI spec version: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.huawei.cloudcampus.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.UUID;

/**
 * 升级路径。
 */
@ApiModel(description = "升级路径。")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaSdnClientCodegen", date = "2019-12-17T15:18:28.844+08:00")
public class UpPath {
  @SerializedName("deviceModel")
  private String deviceModel = null;

  @SerializedName("targetSoftwareId")
  private UUID targetSoftwareId = null;

  @SerializedName("targetPatchId")
  private UUID targetPatchId = null;

  @SerializedName("isUninstall")
  private Integer isUninstall = null;

  @SerializedName("status")
  private Integer status = null;

  public UpPath deviceModel(String deviceModel) {
    this.deviceModel = deviceModel;
    return this;
  }

   /**
   * 设备款型。
   * return deviceModel
  **/
  @ApiModelProperty(required = true, value = "设备款型。")
  public String getDeviceModel() {
    return deviceModel;
  }

   /**
   * 设备款型。
   * Param deviceModel
  **/
  public void setDeviceModel(String deviceModel) {
    this.deviceModel = deviceModel;
  }

  public UpPath targetSoftwareId(UUID targetSoftwareId) {
    this.targetSoftwareId = targetSoftwareId;
    return this;
  }

   /**
   * 目标软件版本ID。从/version这个接口的返回的pkgList获取。targetSoftwareId和targetPatchId至少填一个。
   * return targetSoftwareId
  **/
  @ApiModelProperty(value = "目标软件版本ID。从/version这个接口的返回的pkgList获取。targetSoftwareId和targetPatchId至少填一个。")
  public UUID getTargetSoftwareId() {
    return targetSoftwareId;
  }

   /**
   * 目标软件版本ID。从/version这个接口的返回的pkgList获取。targetSoftwareId和targetPatchId至少填一个。
   * Param targetSoftwareId
  **/
  public void setTargetSoftwareId(UUID targetSoftwareId) {
    this.targetSoftwareId = targetSoftwareId;
  }

  public UpPath targetPatchId(UUID targetPatchId) {
    this.targetPatchId = targetPatchId;
    return this;
  }

   /**
   * 目标补丁ID。从/version这个接口的返回的pkgPatchMap获取。targetSoftwareId和targetPatchId至少填一个。
   * return targetPatchId
  **/
  @ApiModelProperty(value = "目标补丁ID。从/version这个接口的返回的pkgPatchMap获取。targetSoftwareId和targetPatchId至少填一个。")
  public UUID getTargetPatchId() {
    return targetPatchId;
  }

   /**
   * 目标补丁ID。从/version这个接口的返回的pkgPatchMap获取。targetSoftwareId和targetPatchId至少填一个。
   * Param targetPatchId
  **/
  public void setTargetPatchId(UUID targetPatchId) {
    this.targetPatchId = targetPatchId;
  }

  public UpPath isUninstall(Integer isUninstall) {
    this.isUninstall = isUninstall;
    return this;
  }

   /**
   * 是否卸载旧补丁。 1：是 0：否 
   * minimum: 0
   * maximum: 1
   * return isUninstall
  **/
  @ApiModelProperty(value = "是否卸载旧补丁。 1：是 0：否 ")
  public Integer getIsUninstall() {
    return isUninstall;
  }

   /**
   * 是否卸载旧补丁。 1：是 0：否 
   * minimum: 0
   * maximum: 1
   * Param isUninstall
  **/
  public void setIsUninstall(Integer isUninstall) {
    this.isUninstall = isUninstall;
  }

  public UpPath status(Integer status) {
    this.status = status;
    return this;
  }

   /**
   * 升级状态。查询站点升级计划和详情时返回。 0：未创建升级任务 1：无需升级 2：升级成功 3：升级失败 4：下载完成 5：升级中 创建多站点升级计划时无需填写。 
   * minimum: 0
   * maximum: 10
   * return status
  **/
  @ApiModelProperty(value = "升级状态。查询站点升级计划和详情时返回。 0：未创建升级任务 1：无需升级 2：升级成功 3：升级失败 4：下载完成 5：升级中 创建多站点升级计划时无需填写。 ")
  public Integer getStatus() {
    return status;
  }

   /**
   * 升级状态。查询站点升级计划和详情时返回。 0：未创建升级任务 1：无需升级 2：升级成功 3：升级失败 4：下载完成 5：升级中 创建多站点升级计划时无需填写。 
   * minimum: 0
   * maximum: 10
   * Param status
  **/
  public void setStatus(Integer status) {
    this.status = status;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpPath upPath = (UpPath) o;
    return Objects.equals(this.deviceModel, upPath.deviceModel) &&
        Objects.equals(this.targetSoftwareId, upPath.targetSoftwareId) &&
        Objects.equals(this.targetPatchId, upPath.targetPatchId) &&
        Objects.equals(this.isUninstall, upPath.isUninstall) &&
        Objects.equals(this.status, upPath.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deviceModel, targetSoftwareId, targetPatchId, isUninstall, status);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpPath {\n");
    
    sb.append("    deviceModel: ").append(toIndentedString(deviceModel)).append("\n");
    sb.append("    targetSoftwareId: ").append(toIndentedString(targetSoftwareId)).append("\n");
    sb.append("    targetPatchId: ").append(toIndentedString(targetPatchId)).append("\n");
    sb.append("    isUninstall: ").append(toIndentedString(isUninstall)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

