/*
 * 防火墙特征库升级
 * 防火墙特征库升级接口 
 *
 * OpenAPI spec version: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.huawei.cloudcampus.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * ConfigUpgradePolicyDto
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaSdnClientCodegen", date = "2019-12-17T15:19:03.141+08:00")
public class ConfigUpgradePolicyDto {
  @SerializedName("siteId")
  private String siteId = null;

  @SerializedName("upgradeRegularly")
  private Boolean upgradeRegularly = null;

  @SerializedName("upgradeImmediately")
  private Boolean upgradeImmediately = null;

  /**
   * 策略为周期升级时，周几升级。当upgradeRegularly为true时，upgradeDay生效且必填。
   */
  @JsonAdapter(UpgradeDayEnum.Adapter.class)
  public enum UpgradeDayEnum {
    SUNDAY("Sunday"),
    
    MONDAY("Monday"),
    
    TUESDAY("Tuesday"),
    
    WEDNESDAY("Wednesday"),
    
    THURSDAY("Thursday"),
    
    FRIDAY("Friday"),
    
    SATURDAY("Saturday");

    private String value;

    UpgradeDayEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UpgradeDayEnum fromValue(String text) {
      for (UpgradeDayEnum b : UpgradeDayEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<UpgradeDayEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UpgradeDayEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UpgradeDayEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return UpgradeDayEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("upgradeDay")
  private UpgradeDayEnum upgradeDay = null;

  @SerializedName("upgradeTime")
  private String upgradeTime = null;

  /**
   * Gets or Sets signatureDatabaseTypes
   */
  @JsonAdapter(SignatureDatabaseTypesEnum.Adapter.class)
  public enum SignatureDatabaseTypesEnum {
    IP_REPUTATION("ip-reputation"),
    
    ANTIVIRUS("antivirus"),
    
    INTRUSION_PREVENTION("intrusion-prevention"),
    
    FILE_REPUTATION("file-reputation"),
    
    CNC("cnc"),
    
    APPLICATION("application");

    private String value;

    SignatureDatabaseTypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SignatureDatabaseTypesEnum fromValue(String text) {
      for (SignatureDatabaseTypesEnum b : SignatureDatabaseTypesEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<SignatureDatabaseTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SignatureDatabaseTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SignatureDatabaseTypesEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return SignatureDatabaseTypesEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("signatureDatabaseTypes")
  private List<SignatureDatabaseTypesEnum> signatureDatabaseTypes = new ArrayList<SignatureDatabaseTypesEnum>();

  public ConfigUpgradePolicyDto siteId(String siteId) {
    this.siteId = siteId;
    return this;
  }

   /**
   * 站点标识，UUID格式。
   * return siteId
  **/
  @ApiModelProperty(required = true, value = "站点标识，UUID格式。")
  public String getSiteId() {
    return siteId;
  }

   /**
   * 站点标识，UUID格式。
   * Param siteId
  **/
  public void setSiteId(String siteId) {
    this.siteId = siteId;
  }

  public ConfigUpgradePolicyDto upgradeRegularly(Boolean upgradeRegularly) {
    this.upgradeRegularly = upgradeRegularly;
    return this;
  }

   /**
   * 策略是否为周期升级。当upgradeRegularly为true时，upgradeImmediately必须为false；当upgradeRegularly为false时，upgradeImmediately必须为true。
   * return upgradeRegularly
  **/
  @ApiModelProperty(required = true, value = "策略是否为周期升级。当upgradeRegularly为true时，upgradeImmediately必须为false；当upgradeRegularly为false时，upgradeImmediately必须为true。")
  public Boolean getUpgradeRegularly() {
    return upgradeRegularly;
  }

   /**
   * 策略是否为周期升级。当upgradeRegularly为true时，upgradeImmediately必须为false；当upgradeRegularly为false时，upgradeImmediately必须为true。
   * Param upgradeRegularly
  **/
  public void setUpgradeRegularly(Boolean upgradeRegularly) {
    this.upgradeRegularly = upgradeRegularly;
  }

  public ConfigUpgradePolicyDto upgradeImmediately(Boolean upgradeImmediately) {
    this.upgradeImmediately = upgradeImmediately;
    return this;
  }

   /**
   * 策略是否为立即升级。当upgradeImmediately为true时，upgradeRegularly必须为false;当upgradeImmediately为false时，upgradeRegularly必须为true。
   * return upgradeImmediately
  **/
  @ApiModelProperty(required = true, value = "策略是否为立即升级。当upgradeImmediately为true时，upgradeRegularly必须为false;当upgradeImmediately为false时，upgradeRegularly必须为true。")
  public Boolean getUpgradeImmediately() {
    return upgradeImmediately;
  }

   /**
   * 策略是否为立即升级。当upgradeImmediately为true时，upgradeRegularly必须为false;当upgradeImmediately为false时，upgradeRegularly必须为true。
   * Param upgradeImmediately
  **/
  public void setUpgradeImmediately(Boolean upgradeImmediately) {
    this.upgradeImmediately = upgradeImmediately;
  }

  public ConfigUpgradePolicyDto upgradeDay(UpgradeDayEnum upgradeDay) {
    this.upgradeDay = upgradeDay;
    return this;
  }

   /**
   * 策略为周期升级时，周几升级。当upgradeRegularly为true时，upgradeDay生效且必填。
   * return upgradeDay
  **/
  @ApiModelProperty(value = "策略为周期升级时，周几升级。当upgradeRegularly为true时，upgradeDay生效且必填。")
  public UpgradeDayEnum getUpgradeDay() {
    return upgradeDay;
  }

   /**
   * 策略为周期升级时，周几升级。当upgradeRegularly为true时，upgradeDay生效且必填。
   * Param upgradeDay
  **/
  public void setUpgradeDay(UpgradeDayEnum upgradeDay) {
    this.upgradeDay = upgradeDay;
  }

  public ConfigUpgradePolicyDto upgradeTime(String upgradeTime) {
    this.upgradeTime = upgradeTime;
    return this;
  }

   /**
   * 策略为周期升级时，升级的时间点。当upgradeRegularly为true时，upgradeTime生效且必填。
   * return upgradeTime
  **/
  @ApiModelProperty(value = "策略为周期升级时，升级的时间点。当upgradeRegularly为true时，upgradeTime生效且必填。")
  public String getUpgradeTime() {
    return upgradeTime;
  }

   /**
   * 策略为周期升级时，升级的时间点。当upgradeRegularly为true时，upgradeTime生效且必填。
   * Param upgradeTime
  **/
  public void setUpgradeTime(String upgradeTime) {
    this.upgradeTime = upgradeTime;
  }

  public ConfigUpgradePolicyDto signatureDatabaseTypes(List<SignatureDatabaseTypesEnum> signatureDatabaseTypes) {
    this.signatureDatabaseTypes = signatureDatabaseTypes;
    return this;
  }

  public ConfigUpgradePolicyDto addSignatureDatabaseTypesItem(SignatureDatabaseTypesEnum signatureDatabaseTypesItem) {
    this.signatureDatabaseTypes.add(signatureDatabaseTypesItem);
    return this;
  }

   /**
   * Get signatureDatabaseTypes
   * return signatureDatabaseTypes
  **/
  @ApiModelProperty(required = true, value = "")
  public List<SignatureDatabaseTypesEnum> getSignatureDatabaseTypes() {
    return signatureDatabaseTypes;
  }

   /**
   * Set signatureDatabaseTypes
   * Param signatureDatabaseTypes
  **/
  public void setSignatureDatabaseTypes(List<SignatureDatabaseTypesEnum> signatureDatabaseTypes) {
    this.signatureDatabaseTypes = signatureDatabaseTypes;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigUpgradePolicyDto configUpgradePolicyDto = (ConfigUpgradePolicyDto) o;
    return Objects.equals(this.siteId, configUpgradePolicyDto.siteId) &&
        Objects.equals(this.upgradeRegularly, configUpgradePolicyDto.upgradeRegularly) &&
        Objects.equals(this.upgradeImmediately, configUpgradePolicyDto.upgradeImmediately) &&
        Objects.equals(this.upgradeDay, configUpgradePolicyDto.upgradeDay) &&
        Objects.equals(this.upgradeTime, configUpgradePolicyDto.upgradeTime) &&
        Objects.equals(this.signatureDatabaseTypes, configUpgradePolicyDto.signatureDatabaseTypes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(siteId, upgradeRegularly, upgradeImmediately, upgradeDay, upgradeTime, signatureDatabaseTypes);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigUpgradePolicyDto {\n");
    
    sb.append("    siteId: ").append(toIndentedString(siteId)).append("\n");
    sb.append("    upgradeRegularly: ").append(toIndentedString(upgradeRegularly)).append("\n");
    sb.append("    upgradeImmediately: ").append(toIndentedString(upgradeImmediately)).append("\n");
    sb.append("    upgradeDay: ").append(toIndentedString(upgradeDay)).append("\n");
    sb.append("    upgradeTime: ").append(toIndentedString(upgradeTime)).append("\n");
    sb.append("    signatureDatabaseTypes: ").append(toIndentedString(signatureDatabaseTypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

