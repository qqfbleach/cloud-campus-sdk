/*
 * 设备基础性能数据信息查询
 * · 查询设备网络速率历史数据 · 查询站点维度TopN设备或者全部设备的上行流量、下行流量 · 查询站点维度设备连接终端数历史数据 · 查询单设备连接终端数历史数据 · 查询租户维度下设备状态历史数据 · 查询基于站点的站点健康度和设备健康度 · 查询站点下TOP N SSID流量和最近在线用户数 
 *
 * OpenAPI spec version: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.huawei.cloudcampus.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * 网络速率信息。
 */
@ApiModel(description = "网络速率信息。")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaSdnClientCodegen", date = "2019-12-17T15:18:47.511+08:00")
public class NetworkTraffic {
  @SerializedName("timestamp")
  private Long timestamp = null;

  @SerializedName("uplinkRate")
  private Float uplinkRate = null;

  @SerializedName("downlinkRate")
  private Float downlinkRate = null;

  @SerializedName("unit")
  private String unit = null;

  public NetworkTraffic timestamp(Long timestamp) {
    this.timestamp = timestamp;
    return this;
  }

   /**
   * 格林威治时间。
   * minimum: 0
   * maximum: 2147483647
   * return timestamp
  **/
  @ApiModelProperty(value = "格林威治时间。")
  public Long getTimestamp() {
    return timestamp;
  }

   /**
   * 格林威治时间。
   * minimum: 0
   * maximum: 2147483647
   * Param timestamp
  **/
  public void setTimestamp(Long timestamp) {
    this.timestamp = timestamp;
  }

  public NetworkTraffic uplinkRate(Float uplinkRate) {
    this.uplinkRate = uplinkRate;
    return this;
  }

   /**
   * 上行速率。
   * minimum: 0
   * maximum: 340282350000000000000000000000000000000
   * return uplinkRate
  **/
  @ApiModelProperty(value = "上行速率。")
  public Float getUplinkRate() {
    return uplinkRate;
  }

   /**
   * 上行速率。
   * minimum: 0
   * maximum: 340282350000000000000000000000000000000
   * Param uplinkRate
  **/
  public void setUplinkRate(Float uplinkRate) {
    this.uplinkRate = uplinkRate;
  }

  public NetworkTraffic downlinkRate(Float downlinkRate) {
    this.downlinkRate = downlinkRate;
    return this;
  }

   /**
   * 下行速率。
   * minimum: 0
   * maximum: 340282350000000000000000000000000000000
   * return downlinkRate
  **/
  @ApiModelProperty(value = "下行速率。")
  public Float getDownlinkRate() {
    return downlinkRate;
  }

   /**
   * 下行速率。
   * minimum: 0
   * maximum: 340282350000000000000000000000000000000
   * Param downlinkRate
  **/
  public void setDownlinkRate(Float downlinkRate) {
    this.downlinkRate = downlinkRate;
  }

  public NetworkTraffic unit(String unit) {
    this.unit = unit;
    return this;
  }

   /**
   * 速率单位。
   * return unit
  **/
  @ApiModelProperty(value = "速率单位。")
  public String getUnit() {
    return unit;
  }

   /**
   * 速率单位。
   * Param unit
  **/
  public void setUnit(String unit) {
    this.unit = unit;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NetworkTraffic networkTraffic = (NetworkTraffic) o;
    return Objects.equals(this.timestamp, networkTraffic.timestamp) &&
        Objects.equals(this.uplinkRate, networkTraffic.uplinkRate) &&
        Objects.equals(this.downlinkRate, networkTraffic.downlinkRate) &&
        Objects.equals(this.unit, networkTraffic.unit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(timestamp, uplinkRate, downlinkRate, unit);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NetworkTraffic {\n");
    
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    uplinkRate: ").append(toIndentedString(uplinkRate)).append("\n");
    sb.append("    downlinkRate: ").append(toIndentedString(downlinkRate)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

