/*
 * 框式交换机板卡信息操作
 * 框式上云相关操作接口： 场景：对框式交换机信息查询操作的第三方接口。
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.huawei.cloudcampus.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * 接口信息。
 */
@ApiModel(description = "接口信息。")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaSdnClientCodegen", date = "2019-12-17T15:19:14.794+08:00")
public class InterfaceInfoDto {
  @SerializedName("interfaceId")
  private String interfaceId = null;

  @SerializedName("ifIndex")
  private Integer ifIndex = null;

  @SerializedName("ifName")
  private String ifName = null;

  @SerializedName("deviceId")
  private String deviceId = null;

  /**
   * 接口运行态。
   */
  @JsonAdapter(IfOperStatusEnum.Adapter.class)
  public enum IfOperStatusEnum {
    UP("UP"),
    
    DOWN("DOWN"),
    
    TESTING("TESTING"),
    
    UNKOWN("UNKOWN"),
    
    DORMANT("DORMANT"),
    
    NOTPRESENT("NOTPRESENT"),
    
    LOWLAYERDOWN("LOWLAYERDOWN");

    private String value;

    IfOperStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IfOperStatusEnum fromValue(String text) {
      for (IfOperStatusEnum b : IfOperStatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<IfOperStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IfOperStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IfOperStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return IfOperStatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("ifOperStatus")
  private IfOperStatusEnum ifOperStatus = null;

  /**
   * 接口管理态。
   */
  @JsonAdapter(IfAdminStatusEnum.Adapter.class)
  public enum IfAdminStatusEnum {
    UP("UP"),
    
    DOWN("DOWN");

    private String value;

    IfAdminStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IfAdminStatusEnum fromValue(String text) {
      for (IfAdminStatusEnum b : IfAdminStatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<IfAdminStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IfAdminStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IfAdminStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return IfAdminStatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("ifAdminStatus")
  private IfAdminStatusEnum ifAdminStatus = null;

  @SerializedName("ipAddress")
  private String ipAddress = null;

  @SerializedName("ifSpeeds")
  private String ifSpeeds = null;

  @SerializedName("ifMtu")
  private String ifMtu = null;

  /**
   * 双工模式。
   */
  @JsonAdapter(IfDuplexModelEnum.Adapter.class)
  public enum IfDuplexModelEnum {
    FULL("FULL"),
    
    HALF("HALF"),
    
    AUTO("AUTO"),
    
    AUTOFULL("AUTOFULL"),
    
    AUTOHALF("AUTOHALF");

    private String value;

    IfDuplexModelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IfDuplexModelEnum fromValue(String text) {
      for (IfDuplexModelEnum b : IfDuplexModelEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<IfDuplexModelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IfDuplexModelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IfDuplexModelEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return IfDuplexModelEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("ifDuplexModel")
  private IfDuplexModelEnum ifDuplexModel = null;

  /**
   * 接口类型。
   */
  @JsonAdapter(IfTypeEnum.Adapter.class)
  public enum IfTypeEnum {
    STACK_PORT("STACK-PORT"),
    
    ETHERNET("ETHERNET"),
    
    ETH_TRUNK("ETH-TRUNK"),
    
    VIRTUAL_ETHERNET("VIRTUAL_ETHERNET"),
    
    ATM("ATM"),
    
    POS("POS"),
    
    SERIAL("SERIAL"),
    
    VLANIF("VLANIF"),
    
    E1("E1"),
    
    T1("T1"),
    
    CPOS("CPOS"),
    
    TUNNEL("TUNNEL"),
    
    LOOPBACK("LOOPBACK"),
    
    IP_TRUNK("IP-TRUNK"),
    
    VIRTUAL_TEMPLATE("VIRTUAL-TEMPLATE"),
    
    RING_IF("RING-IF"),
    
    MFR("MFR"),
    
    MP_GROUP("MP-GROUP"),
    
    AUX("AUX"),
    
    E3("E3"),
    
    T3("T3"),
    
    METH("METH"),
    
    NULL("NULL"),
    
    IRPR("IRPR"),
    
    EPON("EPON"),
    
    WLAN_ESS("WLAN-ESS"),
    
    RSERVED1("RSERVED1"),
    
    WLAN_DBSS("WLAN-DBSS"),
    
    WLAN_MESH("WLAN-MESH"),
    
    VBDIF("VBDIF"),
    
    NVE("NVE");

    private String value;

    IfTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IfTypeEnum fromValue(String text) {
      for (IfTypeEnum b : IfTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<IfTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IfTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IfTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return IfTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("ifType")
  private IfTypeEnum ifType = null;

  public InterfaceInfoDto interfaceId(String interfaceId) {
    this.interfaceId = interfaceId;
    return this;
  }

   /**
   * 接口ID，UUID格式。
   * return interfaceId
  **/
  @ApiModelProperty(value = "接口ID，UUID格式。")
  public String getInterfaceId() {
    return interfaceId;
  }

   /**
   * 接口ID，UUID格式。
   * Param interfaceId
  **/
  public void setInterfaceId(String interfaceId) {
    this.interfaceId = interfaceId;
  }

  public InterfaceInfoDto ifIndex(Integer ifIndex) {
    this.ifIndex = ifIndex;
    return this;
  }

   /**
   * 接口索引。
   * minimum: 0
   * maximum: 64
   * return ifIndex
  **/
  @ApiModelProperty(value = "接口索引。")
  public Integer getIfIndex() {
    return ifIndex;
  }

   /**
   * 接口索引。
   * minimum: 0
   * maximum: 64
   * Param ifIndex
  **/
  public void setIfIndex(Integer ifIndex) {
    this.ifIndex = ifIndex;
  }

  public InterfaceInfoDto ifName(String ifName) {
    this.ifName = ifName;
    return this;
  }

   /**
   * 接口名称。
   * return ifName
  **/
  @ApiModelProperty(value = "接口名称。")
  public String getIfName() {
    return ifName;
  }

   /**
   * 接口名称。
   * Param ifName
  **/
  public void setIfName(String ifName) {
    this.ifName = ifName;
  }

  public InterfaceInfoDto deviceId(String deviceId) {
    this.deviceId = deviceId;
    return this;
  }

   /**
   * 设备ID，UUID格式。
   * return deviceId
  **/
  @ApiModelProperty(value = "设备ID，UUID格式。")
  public String getDeviceId() {
    return deviceId;
  }

   /**
   * 设备ID，UUID格式。
   * Param deviceId
  **/
  public void setDeviceId(String deviceId) {
    this.deviceId = deviceId;
  }

  public InterfaceInfoDto ifOperStatus(IfOperStatusEnum ifOperStatus) {
    this.ifOperStatus = ifOperStatus;
    return this;
  }

   /**
   * 接口运行态。
   * return ifOperStatus
  **/
  @ApiModelProperty(value = "接口运行态。")
  public IfOperStatusEnum getIfOperStatus() {
    return ifOperStatus;
  }

   /**
   * 接口运行态。
   * Param ifOperStatus
  **/
  public void setIfOperStatus(IfOperStatusEnum ifOperStatus) {
    this.ifOperStatus = ifOperStatus;
  }

  public InterfaceInfoDto ifAdminStatus(IfAdminStatusEnum ifAdminStatus) {
    this.ifAdminStatus = ifAdminStatus;
    return this;
  }

   /**
   * 接口管理态。
   * return ifAdminStatus
  **/
  @ApiModelProperty(value = "接口管理态。")
  public IfAdminStatusEnum getIfAdminStatus() {
    return ifAdminStatus;
  }

   /**
   * 接口管理态。
   * Param ifAdminStatus
  **/
  public void setIfAdminStatus(IfAdminStatusEnum ifAdminStatus) {
    this.ifAdminStatus = ifAdminStatus;
  }

  public InterfaceInfoDto ipAddress(String ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

   /**
   * 接口IP地址。
   * return ipAddress
  **/
  @ApiModelProperty(value = "接口IP地址。")
  public String getIpAddress() {
    return ipAddress;
  }

   /**
   * 接口IP地址。
   * Param ipAddress
  **/
  public void setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
  }

  public InterfaceInfoDto ifSpeeds(String ifSpeeds) {
    this.ifSpeeds = ifSpeeds;
    return this;
  }

   /**
   * 接口速率，单位是bps。
   * return ifSpeeds
  **/
  @ApiModelProperty(value = "接口速率，单位是bps。")
  public String getIfSpeeds() {
    return ifSpeeds;
  }

   /**
   * 接口速率，单位是bps。
   * Param ifSpeeds
  **/
  public void setIfSpeeds(String ifSpeeds) {
    this.ifSpeeds = ifSpeeds;
  }

  public InterfaceInfoDto ifMtu(String ifMtu) {
    this.ifMtu = ifMtu;
    return this;
  }

   /**
   * 接口mtu，单位是Bytes。
   * return ifMtu
  **/
  @ApiModelProperty(value = "接口mtu，单位是Bytes。")
  public String getIfMtu() {
    return ifMtu;
  }

   /**
   * 接口mtu，单位是Bytes。
   * Param ifMtu
  **/
  public void setIfMtu(String ifMtu) {
    this.ifMtu = ifMtu;
  }

  public InterfaceInfoDto ifDuplexModel(IfDuplexModelEnum ifDuplexModel) {
    this.ifDuplexModel = ifDuplexModel;
    return this;
  }

   /**
   * 双工模式。
   * return ifDuplexModel
  **/
  @ApiModelProperty(value = "双工模式。")
  public IfDuplexModelEnum getIfDuplexModel() {
    return ifDuplexModel;
  }

   /**
   * 双工模式。
   * Param ifDuplexModel
  **/
  public void setIfDuplexModel(IfDuplexModelEnum ifDuplexModel) {
    this.ifDuplexModel = ifDuplexModel;
  }

  public InterfaceInfoDto ifType(IfTypeEnum ifType) {
    this.ifType = ifType;
    return this;
  }

   /**
   * 接口类型。
   * return ifType
  **/
  @ApiModelProperty(value = "接口类型。")
  public IfTypeEnum getIfType() {
    return ifType;
  }

   /**
   * 接口类型。
   * Param ifType
  **/
  public void setIfType(IfTypeEnum ifType) {
    this.ifType = ifType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InterfaceInfoDto interfaceInfoDto = (InterfaceInfoDto) o;
    return Objects.equals(this.interfaceId, interfaceInfoDto.interfaceId) &&
        Objects.equals(this.ifIndex, interfaceInfoDto.ifIndex) &&
        Objects.equals(this.ifName, interfaceInfoDto.ifName) &&
        Objects.equals(this.deviceId, interfaceInfoDto.deviceId) &&
        Objects.equals(this.ifOperStatus, interfaceInfoDto.ifOperStatus) &&
        Objects.equals(this.ifAdminStatus, interfaceInfoDto.ifAdminStatus) &&
        Objects.equals(this.ipAddress, interfaceInfoDto.ipAddress) &&
        Objects.equals(this.ifSpeeds, interfaceInfoDto.ifSpeeds) &&
        Objects.equals(this.ifMtu, interfaceInfoDto.ifMtu) &&
        Objects.equals(this.ifDuplexModel, interfaceInfoDto.ifDuplexModel) &&
        Objects.equals(this.ifType, interfaceInfoDto.ifType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(interfaceId, ifIndex, ifName, deviceId, ifOperStatus, ifAdminStatus, ipAddress, ifSpeeds, ifMtu, ifDuplexModel, ifType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InterfaceInfoDto {\n");
    
    sb.append("    interfaceId: ").append(toIndentedString(interfaceId)).append("\n");
    sb.append("    ifIndex: ").append(toIndentedString(ifIndex)).append("\n");
    sb.append("    ifName: ").append(toIndentedString(ifName)).append("\n");
    sb.append("    deviceId: ").append(toIndentedString(deviceId)).append("\n");
    sb.append("    ifOperStatus: ").append(toIndentedString(ifOperStatus)).append("\n");
    sb.append("    ifAdminStatus: ").append(toIndentedString(ifAdminStatus)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    ifSpeeds: ").append(toIndentedString(ifSpeeds)).append("\n");
    sb.append("    ifMtu: ").append(toIndentedString(ifMtu)).append("\n");
    sb.append("    ifDuplexModel: ").append(toIndentedString(ifDuplexModel)).append("\n");
    sb.append("    ifType: ").append(toIndentedString(ifType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

