/*
 * PoE电源状态查询
 * 查询设备PoE电源状态。 
 *
 * OpenAPI spec version: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.huawei.cloudcampus.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;

/**
 * PoePowerStateData
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaSdnClientCodegen", date = "2019-12-17T15:18:50.602+08:00")
public class PoePowerStateData {
  @SerializedName("interfaceId")
  private String interfaceId = null;

  @SerializedName("interfaceName")
  private String interfaceName = null;

  @SerializedName("portLegacy")
  private Boolean portLegacy = null;

  @SerializedName("portEnable")
  private Boolean portEnable = null;

  @SerializedName("portPower")
  private Boolean portPower = null;

  @SerializedName("portStatus")
  private String portStatus = null;

  @SerializedName("portClass")
  private Integer portClass = null;

  @SerializedName("portRef")
  private Integer portRef = null;

  @SerializedName("portPriority")
  private String portPriority = null;

  @SerializedName("portMax")
  private Integer portMax = null;

  @SerializedName("portCurrentMW")
  private Integer portCurrentMW = null;

  @SerializedName("portPeak")
  private Integer portPeak = null;

  @SerializedName("portAverage")
  private Integer portAverage = null;

  @SerializedName("portCurrentMA")
  private BigDecimal portCurrentMA = null;

  @SerializedName("portVoltage")
  private BigDecimal portVoltage = null;

  public PoePowerStateData interfaceId(String interfaceId) {
    this.interfaceId = interfaceId;
    return this;
  }

   /**
   * 接口ID，UUID格式。
   * return interfaceId
  **/
  @ApiModelProperty(value = "接口ID，UUID格式。")
  public String getInterfaceId() {
    return interfaceId;
  }

   /**
   * 接口ID，UUID格式。
   * Param interfaceId
  **/
  public void setInterfaceId(String interfaceId) {
    this.interfaceId = interfaceId;
  }

  public PoePowerStateData interfaceName(String interfaceName) {
    this.interfaceName = interfaceName;
    return this;
  }

   /**
   * 接口名。
   * return interfaceName
  **/
  @ApiModelProperty(value = "接口名。")
  public String getInterfaceName() {
    return interfaceName;
  }

   /**
   * 接口名。
   * Param interfaceName
  **/
  public void setInterfaceName(String interfaceName) {
    this.interfaceName = interfaceName;
  }

  public PoePowerStateData portLegacy(Boolean portLegacy) {
    this.portLegacy = portLegacy;
    return this;
  }

   /**
   * 接口是否使能兼容性检测功能(true，false)。
   * return portLegacy
  **/
  @ApiModelProperty(value = "接口是否使能兼容性检测功能(true，false)。")
  public Boolean getPortLegacy() {
    return portLegacy;
  }

   /**
   * 接口是否使能兼容性检测功能(true，false)。
   * Param portLegacy
  **/
  public void setPortLegacy(Boolean portLegacy) {
    this.portLegacy = portLegacy;
  }

  public PoePowerStateData portEnable(Boolean portEnable) {
    this.portEnable = portEnable;
    return this;
  }

   /**
   * 接口是否使能PoE供电功能(true，false)。
   * return portEnable
  **/
  @ApiModelProperty(value = "接口是否使能PoE供电功能(true，false)。")
  public Boolean getPortEnable() {
    return portEnable;
  }

   /**
   * 接口是否使能PoE供电功能(true，false)。
   * Param portEnable
  **/
  public void setPortEnable(Boolean portEnable) {
    this.portEnable = portEnable;
  }

  public PoePowerStateData portPower(Boolean portPower) {
    this.portPower = portPower;
    return this;
  }

   /**
   * 接口是否供电(true，false)。
   * return portPower
  **/
  @ApiModelProperty(value = "接口是否供电(true，false)。")
  public Boolean getPortPower() {
    return portPower;
  }

   /**
   * 接口是否供电(true，false)。
   * Param portPower
  **/
  public void setPortPower(Boolean portPower) {
    this.portPower = portPower;
  }

  public PoePowerStateData portStatus(String portStatus) {
    this.portStatus = portStatus;
    return this;
  }

   /**
   * 接口的供电状态：Test mode(测试状态)、Detecting(检测状态)、Disabled(接口PoE功能未使能状态)、Chip fault(芯片故障状态)、Power-deny(参考功率大于接口最大输出功率)、Classification overcurrent(分级过流)、Unknown class(未知分级)、Power overcurrent(接口过流)、Power-on failed(上电失败)、Power-ready(接口供电就绪)、Powering(正在上电)、Powered(上电结束)、Over loaded(功率过载)、Time-range power-off(接口处于下电时间段)、Unstable voltage(接口电压不稳定)。
   * return portStatus
  **/
  @ApiModelProperty(value = "接口的供电状态：Test mode(测试状态)、Detecting(检测状态)、Disabled(接口PoE功能未使能状态)、Chip fault(芯片故障状态)、Power-deny(参考功率大于接口最大输出功率)、Classification overcurrent(分级过流)、Unknown class(未知分级)、Power overcurrent(接口过流)、Power-on failed(上电失败)、Power-ready(接口供电就绪)、Powering(正在上电)、Powered(上电结束)、Over loaded(功率过载)、Time-range power-off(接口处于下电时间段)、Unstable voltage(接口电压不稳定)。")
  public String getPortStatus() {
    return portStatus;
  }

   /**
   * 接口的供电状态：Test mode(测试状态)、Detecting(检测状态)、Disabled(接口PoE功能未使能状态)、Chip fault(芯片故障状态)、Power-deny(参考功率大于接口最大输出功率)、Classification overcurrent(分级过流)、Unknown class(未知分级)、Power overcurrent(接口过流)、Power-on failed(上电失败)、Power-ready(接口供电就绪)、Powering(正在上电)、Powered(上电结束)、Over loaded(功率过载)、Time-range power-off(接口处于下电时间段)、Unstable voltage(接口电压不稳定)。
   * Param portStatus
  **/
  public void setPortStatus(String portStatus) {
    this.portStatus = portStatus;
  }

  public PoePowerStateData portClass(Integer portClass) {
    this.portClass = portClass;
    return this;
  }

   /**
   * 接口接入设备PD的分级，系统自动根据PD设备的最大功率给PD分类，分为0～4级。
   * return portClass
  **/
  @ApiModelProperty(value = "接口接入设备PD的分级，系统自动根据PD设备的最大功率给PD分类，分为0～4级。")
  public Integer getPortClass() {
    return portClass;
  }

   /**
   * 接口接入设备PD的分级，系统自动根据PD设备的最大功率给PD分类，分为0～4级。
   * Param portClass
  **/
  public void setPortClass(Integer portClass) {
    this.portClass = portClass;
  }

  public PoePowerStateData portRef(Integer portRef) {
    this.portRef = portRef;
    return this;
  }

   /**
   * 接口的参考功率（系统会自动识别PD设备的最大功率，并给PD设备归类，定义各类别的参考功率。PD类型和参考功率的对应关系为：0-参考功率为15400mW。1-参考功率为4000mW。2-参考功率为7000mW。3-参考功率为15400mW。4-参考功率为30000mW。）。
   * return portRef
  **/
  @ApiModelProperty(value = "接口的参考功率（系统会自动识别PD设备的最大功率，并给PD设备归类，定义各类别的参考功率。PD类型和参考功率的对应关系为：0-参考功率为15400mW。1-参考功率为4000mW。2-参考功率为7000mW。3-参考功率为15400mW。4-参考功率为30000mW。）。")
  public Integer getPortRef() {
    return portRef;
  }

   /**
   * 接口的参考功率（系统会自动识别PD设备的最大功率，并给PD设备归类，定义各类别的参考功率。PD类型和参考功率的对应关系为：0-参考功率为15400mW。1-参考功率为4000mW。2-参考功率为7000mW。3-参考功率为15400mW。4-参考功率为30000mW。）。
   * Param portRef
  **/
  public void setPortRef(Integer portRef) {
    this.portRef = portRef;
  }

  public PoePowerStateData portPriority(String portPriority) {
    this.portPriority = portPriority;
    return this;
  }

   /**
   * 接口供电的优先级，有三种取值：Critical-最高的优先级，High-次高的优先级，Low-最低的优先级。
   * return portPriority
  **/
  @ApiModelProperty(value = "接口供电的优先级，有三种取值：Critical-最高的优先级，High-次高的优先级，Low-最低的优先级。")
  public String getPortPriority() {
    return portPriority;
  }

   /**
   * 接口供电的优先级，有三种取值：Critical-最高的优先级，High-次高的优先级，Low-最低的优先级。
   * Param portPriority
  **/
  public void setPortPriority(String portPriority) {
    this.portPriority = portPriority;
  }

  public PoePowerStateData portMax(Integer portMax) {
    this.portMax = portMax;
    return this;
  }

   /**
   * 接口最大输出功率，如果最大输出功率为15400mW，说明此设备支持802.3af标准；如果最大输出功率为30000mW，说明此设备支持802.3at标准。
   * return portMax
  **/
  @ApiModelProperty(value = "接口最大输出功率，如果最大输出功率为15400mW，说明此设备支持802.3af标准；如果最大输出功率为30000mW，说明此设备支持802.3at标准。")
  public Integer getPortMax() {
    return portMax;
  }

   /**
   * 接口最大输出功率，如果最大输出功率为15400mW，说明此设备支持802.3af标准；如果最大输出功率为30000mW，说明此设备支持802.3at标准。
   * Param portMax
  **/
  public void setPortMax(Integer portMax) {
    this.portMax = portMax;
  }

  public PoePowerStateData portCurrentMW(Integer portCurrentMW) {
    this.portCurrentMW = portCurrentMW;
    return this;
  }

   /**
   * 接口当前的输出功率。
   * return portCurrentMW
  **/
  @ApiModelProperty(value = "接口当前的输出功率。")
  public Integer getPortCurrentMW() {
    return portCurrentMW;
  }

   /**
   * 接口当前的输出功率。
   * Param portCurrentMW
  **/
  public void setPortCurrentMW(Integer portCurrentMW) {
    this.portCurrentMW = portCurrentMW;
  }

  public PoePowerStateData portPeak(Integer portPeak) {
    this.portPeak = portPeak;
    return this;
  }

   /**
   * 接口的峰值输出功率。
   * return portPeak
  **/
  @ApiModelProperty(value = "接口的峰值输出功率。")
  public Integer getPortPeak() {
    return portPeak;
  }

   /**
   * 接口的峰值输出功率。
   * Param portPeak
  **/
  public void setPortPeak(Integer portPeak) {
    this.portPeak = portPeak;
  }

  public PoePowerStateData portAverage(Integer portAverage) {
    this.portAverage = portAverage;
    return this;
  }

   /**
   * 接口的平均输出功率。
   * return portAverage
  **/
  @ApiModelProperty(value = "接口的平均输出功率。")
  public Integer getPortAverage() {
    return portAverage;
  }

   /**
   * 接口的平均输出功率。
   * Param portAverage
  **/
  public void setPortAverage(Integer portAverage) {
    this.portAverage = portAverage;
  }

  public PoePowerStateData portCurrentMA(BigDecimal portCurrentMA) {
    this.portCurrentMA = portCurrentMA;
    return this;
  }

   /**
   * 接口的输出电流。
   * return portCurrentMA
  **/
  @ApiModelProperty(value = "接口的输出电流。")
  public BigDecimal getPortCurrentMA() {
    return portCurrentMA;
  }

   /**
   * 接口的输出电流。
   * Param portCurrentMA
  **/
  public void setPortCurrentMA(BigDecimal portCurrentMA) {
    this.portCurrentMA = portCurrentMA;
  }

  public PoePowerStateData portVoltage(BigDecimal portVoltage) {
    this.portVoltage = portVoltage;
    return this;
  }

   /**
   * 接口的输出电压。
   * return portVoltage
  **/
  @ApiModelProperty(value = "接口的输出电压。")
  public BigDecimal getPortVoltage() {
    return portVoltage;
  }

   /**
   * 接口的输出电压。
   * Param portVoltage
  **/
  public void setPortVoltage(BigDecimal portVoltage) {
    this.portVoltage = portVoltage;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PoePowerStateData poePowerStateData = (PoePowerStateData) o;
    return Objects.equals(this.interfaceId, poePowerStateData.interfaceId) &&
        Objects.equals(this.interfaceName, poePowerStateData.interfaceName) &&
        Objects.equals(this.portLegacy, poePowerStateData.portLegacy) &&
        Objects.equals(this.portEnable, poePowerStateData.portEnable) &&
        Objects.equals(this.portPower, poePowerStateData.portPower) &&
        Objects.equals(this.portStatus, poePowerStateData.portStatus) &&
        Objects.equals(this.portClass, poePowerStateData.portClass) &&
        Objects.equals(this.portRef, poePowerStateData.portRef) &&
        Objects.equals(this.portPriority, poePowerStateData.portPriority) &&
        Objects.equals(this.portMax, poePowerStateData.portMax) &&
        Objects.equals(this.portCurrentMW, poePowerStateData.portCurrentMW) &&
        Objects.equals(this.portPeak, poePowerStateData.portPeak) &&
        Objects.equals(this.portAverage, poePowerStateData.portAverage) &&
        Objects.equals(this.portCurrentMA, poePowerStateData.portCurrentMA) &&
        Objects.equals(this.portVoltage, poePowerStateData.portVoltage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(interfaceId, interfaceName, portLegacy, portEnable, portPower, portStatus, portClass, portRef, portPriority, portMax, portCurrentMW, portPeak, portAverage, portCurrentMA, portVoltage);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PoePowerStateData {\n");
    
    sb.append("    interfaceId: ").append(toIndentedString(interfaceId)).append("\n");
    sb.append("    interfaceName: ").append(toIndentedString(interfaceName)).append("\n");
    sb.append("    portLegacy: ").append(toIndentedString(portLegacy)).append("\n");
    sb.append("    portEnable: ").append(toIndentedString(portEnable)).append("\n");
    sb.append("    portPower: ").append(toIndentedString(portPower)).append("\n");
    sb.append("    portStatus: ").append(toIndentedString(portStatus)).append("\n");
    sb.append("    portClass: ").append(toIndentedString(portClass)).append("\n");
    sb.append("    portRef: ").append(toIndentedString(portRef)).append("\n");
    sb.append("    portPriority: ").append(toIndentedString(portPriority)).append("\n");
    sb.append("    portMax: ").append(toIndentedString(portMax)).append("\n");
    sb.append("    portCurrentMW: ").append(toIndentedString(portCurrentMW)).append("\n");
    sb.append("    portPeak: ").append(toIndentedString(portPeak)).append("\n");
    sb.append("    portAverage: ").append(toIndentedString(portAverage)).append("\n");
    sb.append("    portCurrentMA: ").append(toIndentedString(portCurrentMA)).append("\n");
    sb.append("    portVoltage: ").append(toIndentedString(portVoltage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

