/*
 * 设备升级
 * · 查询设备文件 · 创建站点升级 · 查询站点升级 · 查询设备升级 · 取消设备升级 · 删除站点升级 · 重新升级设备 
 *
 * OpenAPI spec version: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.huawei.cloudcampus.api.service;

import com.huawei.cloudcampus.api.ApiCallback;
import com.huawei.cloudcampus.api.ApiClient;
import com.huawei.cloudcampus.api.ApiException;
import com.huawei.cloudcampus.api.ApiResponse;
import com.huawei.cloudcampus.api.Configuration;
import com.huawei.cloudcampus.api.Pair;
import com.huawei.cloudcampus.api.ProgressRequestBody;
import com.huawei.cloudcampus.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.huawei.cloudcampus.api.model.AvailableVersion;
import com.huawei.cloudcampus.api.model.CommonResponseBody;
import com.huawei.cloudcampus.api.model.DeviceDetailListRes;
import com.huawei.cloudcampus.api.model.PolicyConfig;
import com.huawei.cloudcampus.api.model.PolicyConfigRes;
import com.huawei.cloudcampus.api.model.PolicyDeviceCancelInputList;
import com.huawei.cloudcampus.api.model.PolicySiteCancelInputList;
import com.huawei.cloudcampus.api.model.ReupgradeRequestBody;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UpgradeOpenApiApi {
    private ApiClient apiClient;

    public UpgradeOpenApiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UpgradeOpenApiApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for cancelPolicy
     * @param policyDeviceCancelInputList 取消设备升级入参。 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cancelPolicyCall(PolicyDeviceCancelInputList policyDeviceCancelInputList, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = policyDeviceCancelInputList;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v1/oamservice/upgrade/policy/device/cancel";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cancelPolicyValidateBeforeCall(PolicyDeviceCancelInputList policyDeviceCancelInputList, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'policyDeviceCancelInputList' is set
        if (policyDeviceCancelInputList == null) {
            throw new ApiException("Missing the required parameter 'policyDeviceCancelInputList' when calling cancelPolicy(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cancelPolicyCall(policyDeviceCancelInputList, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 取消设备升级
     * ## 典型场景 ##    取消设备升级。 ## 接口功能 ##    取消设备升级。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。 
     * @param policyDeviceCancelInputList 取消设备升级入参。 (required)
     * @return CommonResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CommonResponseBody cancelPolicy(PolicyDeviceCancelInputList policyDeviceCancelInputList) throws ApiException {
        ApiResponse<CommonResponseBody> resp = cancelPolicyWithHttpInfo(policyDeviceCancelInputList);
        return resp.getData();
    }

    /**
     * 取消设备升级
     * ## 典型场景 ##    取消设备升级。 ## 接口功能 ##    取消设备升级。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。 
     * @param policyDeviceCancelInputList 取消设备升级入参。 (required)
     * @return ApiResponse&lt;CommonResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CommonResponseBody> cancelPolicyWithHttpInfo(PolicyDeviceCancelInputList policyDeviceCancelInputList) throws ApiException {
        com.squareup.okhttp.Call call = cancelPolicyValidateBeforeCall(policyDeviceCancelInputList, null, null);
        Type localVarReturnType = new TypeToken<CommonResponseBody>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 取消设备升级 (asynchronously)
     * ## 典型场景 ##    取消设备升级。 ## 接口功能 ##    取消设备升级。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。 
     * @param policyDeviceCancelInputList 取消设备升级入参。 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cancelPolicyAsync(PolicyDeviceCancelInputList policyDeviceCancelInputList, final ApiCallback<CommonResponseBody> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cancelPolicyValidateBeforeCall(policyDeviceCancelInputList, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CommonResponseBody>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cancelSitePolicy
     * @param policySiteCancelInputList 删除多站点升级计划入参。 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cancelSitePolicyCall(PolicySiteCancelInputList policySiteCancelInputList, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = policySiteCancelInputList;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v1/oamservice/upgrade/policy/site/cancel";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cancelSitePolicyValidateBeforeCall(PolicySiteCancelInputList policySiteCancelInputList, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'policySiteCancelInputList' is set
        if (policySiteCancelInputList == null) {
            throw new ApiException("Missing the required parameter 'policySiteCancelInputList' when calling cancelSitePolicy(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cancelSitePolicyCall(policySiteCancelInputList, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 删除站点升级
     * ## 典型场景 ##    删除多站点升级计划。 ## 接口功能 ##    删除多站点升级计划。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。    建议先取消所有站点下正在升级的设备。 
     * @param policySiteCancelInputList 删除多站点升级计划入参。 (required)
     * @return CommonResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CommonResponseBody cancelSitePolicy(PolicySiteCancelInputList policySiteCancelInputList) throws ApiException {
        ApiResponse<CommonResponseBody> resp = cancelSitePolicyWithHttpInfo(policySiteCancelInputList);
        return resp.getData();
    }

    /**
     * 删除站点升级
     * ## 典型场景 ##    删除多站点升级计划。 ## 接口功能 ##    删除多站点升级计划。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。    建议先取消所有站点下正在升级的设备。 
     * @param policySiteCancelInputList 删除多站点升级计划入参。 (required)
     * @return ApiResponse&lt;CommonResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CommonResponseBody> cancelSitePolicyWithHttpInfo(PolicySiteCancelInputList policySiteCancelInputList) throws ApiException {
        com.squareup.okhttp.Call call = cancelSitePolicyValidateBeforeCall(policySiteCancelInputList, null, null);
        Type localVarReturnType = new TypeToken<CommonResponseBody>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 删除站点升级 (asynchronously)
     * ## 典型场景 ##    删除多站点升级计划。 ## 接口功能 ##    删除多站点升级计划。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。    建议先取消所有站点下正在升级的设备。 
     * @param policySiteCancelInputList 删除多站点升级计划入参。 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cancelSitePolicyAsync(PolicySiteCancelInputList policySiteCancelInputList, final ApiCallback<CommonResponseBody> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cancelSitePolicyValidateBeforeCall(policySiteCancelInputList, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CommonResponseBody>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for policyConfiguration
     * @param policyConfig 多站点升级计划。 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call policyConfigurationCall(PolicyConfig policyConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = policyConfig;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v1/oamservice/upgrade/policy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call policyConfigurationValidateBeforeCall(PolicyConfig policyConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'policyConfig' is set
        if (policyConfig == null) {
            throw new ApiException("Missing the required parameter 'policyConfig' when calling policyConfiguration(Async)");
        }
        
        
        com.squareup.okhttp.Call call = policyConfigurationCall(policyConfig, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 创建站点升级
     * ## 典型场景 ##    创建多站点升级计划。 ## 接口功能 ##    创建多站点升级计划。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。 
     * @param policyConfig 多站点升级计划。 (required)
     * @return PolicyConfigRes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PolicyConfigRes policyConfiguration(PolicyConfig policyConfig) throws ApiException {
        ApiResponse<PolicyConfigRes> resp = policyConfigurationWithHttpInfo(policyConfig);
        return resp.getData();
    }

    /**
     * 创建站点升级
     * ## 典型场景 ##    创建多站点升级计划。 ## 接口功能 ##    创建多站点升级计划。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。 
     * @param policyConfig 多站点升级计划。 (required)
     * @return ApiResponse&lt;PolicyConfigRes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PolicyConfigRes> policyConfigurationWithHttpInfo(PolicyConfig policyConfig) throws ApiException {
        com.squareup.okhttp.Call call = policyConfigurationValidateBeforeCall(policyConfig, null, null);
        Type localVarReturnType = new TypeToken<PolicyConfigRes>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 创建站点升级 (asynchronously)
     * ## 典型场景 ##    创建多站点升级计划。 ## 接口功能 ##    创建多站点升级计划。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。 
     * @param policyConfig 多站点升级计划。 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call policyConfigurationAsync(PolicyConfig policyConfig, final ApiCallback<PolicyConfigRes> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = policyConfigurationValidateBeforeCall(policyConfig, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PolicyConfigRes>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for queryPolicy
     * @param siteId 站点ID。 (required)
     * @param deviceModel 设备款型。 如果不填就是站点下全量的数据。 如果填写了设备款型，就是该站点下该款型的升级计划。  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call queryPolicyCall(UUID siteId, String deviceModel, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v1/oamservice/upgrade/policy/{siteId}"
            .replaceAll("\\{" + "siteId" + "\\}", apiClient.escapeString(siteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (deviceModel != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "deviceModel", deviceModel));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call queryPolicyValidateBeforeCall(UUID siteId, String deviceModel, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling queryPolicy(Async)");
        }
        
        
        com.squareup.okhttp.Call call = queryPolicyCall(siteId, deviceModel, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 查询站点升级
     * ## 典型场景 ##    查询站点升级计划概要。 ## 接口功能 ##    查询站点升级计划概要。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。 
     * @param siteId 站点ID。 (required)
     * @param deviceModel 设备款型。 如果不填就是站点下全量的数据。 如果填写了设备款型，就是该站点下该款型的升级计划。  (optional)
     * @return PolicyConfigRes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PolicyConfigRes queryPolicy(UUID siteId, String deviceModel) throws ApiException {
        ApiResponse<PolicyConfigRes> resp = queryPolicyWithHttpInfo(siteId, deviceModel);
        return resp.getData();
    }

    /**
     * 查询站点升级
     * ## 典型场景 ##    查询站点升级计划概要。 ## 接口功能 ##    查询站点升级计划概要。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。 
     * @param siteId 站点ID。 (required)
     * @param deviceModel 设备款型。 如果不填就是站点下全量的数据。 如果填写了设备款型，就是该站点下该款型的升级计划。  (optional)
     * @return ApiResponse&lt;PolicyConfigRes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PolicyConfigRes> queryPolicyWithHttpInfo(UUID siteId, String deviceModel) throws ApiException {
        com.squareup.okhttp.Call call = queryPolicyValidateBeforeCall(siteId, deviceModel, null, null);
        Type localVarReturnType = new TypeToken<PolicyConfigRes>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 查询站点升级 (asynchronously)
     * ## 典型场景 ##    查询站点升级计划概要。 ## 接口功能 ##    查询站点升级计划概要。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。 
     * @param siteId 站点ID。 (required)
     * @param deviceModel 设备款型。 如果不填就是站点下全量的数据。 如果填写了设备款型，就是该站点下该款型的升级计划。  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call queryPolicyAsync(UUID siteId, String deviceModel, final ApiCallback<PolicyConfigRes> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = queryPolicyValidateBeforeCall(siteId, deviceModel, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PolicyConfigRes>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for queryPolicyDetail
     * @param siteId 站点ID。 (required)
     * @param deviceModel 设备款型。 如果不填就是站点下全量的数据。 如果填写了设备款型，就是该站点下该款型的升级状态。  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call queryPolicyDetailCall(UUID siteId, String deviceModel, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v1/oamservice/upgrade/policy-detail/{siteId}"
            .replaceAll("\\{" + "siteId" + "\\}", apiClient.escapeString(siteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (deviceModel != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "deviceModel", deviceModel));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call queryPolicyDetailValidateBeforeCall(UUID siteId, String deviceModel, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling queryPolicyDetail(Async)");
        }
        
        
        com.squareup.okhttp.Call call = queryPolicyDetailCall(siteId, deviceModel, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 查询设备升级
     * ## 典型场景 ##    查询站点下具体设备的升级状态。 ## 接口功能 ##    查询站点下具体设备的升级状态。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。 
     * @param siteId 站点ID。 (required)
     * @param deviceModel 设备款型。 如果不填就是站点下全量的数据。 如果填写了设备款型，就是该站点下该款型的升级状态。  (optional)
     * @return DeviceDetailListRes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeviceDetailListRes queryPolicyDetail(UUID siteId, String deviceModel) throws ApiException {
        ApiResponse<DeviceDetailListRes> resp = queryPolicyDetailWithHttpInfo(siteId, deviceModel);
        return resp.getData();
    }

    /**
     * 查询设备升级
     * ## 典型场景 ##    查询站点下具体设备的升级状态。 ## 接口功能 ##    查询站点下具体设备的升级状态。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。 
     * @param siteId 站点ID。 (required)
     * @param deviceModel 设备款型。 如果不填就是站点下全量的数据。 如果填写了设备款型，就是该站点下该款型的升级状态。  (optional)
     * @return ApiResponse&lt;DeviceDetailListRes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeviceDetailListRes> queryPolicyDetailWithHttpInfo(UUID siteId, String deviceModel) throws ApiException {
        com.squareup.okhttp.Call call = queryPolicyDetailValidateBeforeCall(siteId, deviceModel, null, null);
        Type localVarReturnType = new TypeToken<DeviceDetailListRes>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 查询设备升级 (asynchronously)
     * ## 典型场景 ##    查询站点下具体设备的升级状态。 ## 接口功能 ##    查询站点下具体设备的升级状态。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。 
     * @param siteId 站点ID。 (required)
     * @param deviceModel 设备款型。 如果不填就是站点下全量的数据。 如果填写了设备款型，就是该站点下该款型的升级状态。  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call queryPolicyDetailAsync(UUID siteId, String deviceModel, final ApiCallback<DeviceDetailListRes> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = queryPolicyDetailValidateBeforeCall(siteId, deviceModel, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeviceDetailListRes>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for queryVersion
     * @param deviceModel 设备款型。 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call queryVersionCall(String deviceModel, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v1/oamservice/upgrade/version";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (deviceModel != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "deviceModel", deviceModel));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call queryVersionValidateBeforeCall(String deviceModel, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deviceModel' is set
        if (deviceModel == null) {
            throw new ApiException("Missing the required parameter 'deviceModel' when calling queryVersion(Async)");
        }
        
        
        com.squareup.okhttp.Call call = queryVersionCall(deviceModel, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 查询设备文件
     * ## 典型场景 ##    根据设备款型查询可用文件列表。 ## 接口功能 ##    根据设备款型查询可用文件列表。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。 
     * @param deviceModel 设备款型。 (required)
     * @return AvailableVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AvailableVersion queryVersion(String deviceModel) throws ApiException {
        ApiResponse<AvailableVersion> resp = queryVersionWithHttpInfo(deviceModel);
        return resp.getData();
    }

    /**
     * 查询设备文件
     * ## 典型场景 ##    根据设备款型查询可用文件列表。 ## 接口功能 ##    根据设备款型查询可用文件列表。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。 
     * @param deviceModel 设备款型。 (required)
     * @return ApiResponse&lt;AvailableVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AvailableVersion> queryVersionWithHttpInfo(String deviceModel) throws ApiException {
        com.squareup.okhttp.Call call = queryVersionValidateBeforeCall(deviceModel, null, null);
        Type localVarReturnType = new TypeToken<AvailableVersion>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 查询设备文件 (asynchronously)
     * ## 典型场景 ##    根据设备款型查询可用文件列表。 ## 接口功能 ##    根据设备款型查询可用文件列表。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。 
     * @param deviceModel 设备款型。 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call queryVersionAsync(String deviceModel, final ApiCallback<AvailableVersion> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = queryVersionValidateBeforeCall(deviceModel, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AvailableVersion>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for reUpgrade
     * @param reupgradeRequestBody 重新升级入参。 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call reUpgradeCall(ReupgradeRequestBody reupgradeRequestBody, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = reupgradeRequestBody;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v1/oamservice/upgrade/reupgrade";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call reUpgradeValidateBeforeCall(ReupgradeRequestBody reupgradeRequestBody, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'reupgradeRequestBody' is set
        if (reupgradeRequestBody == null) {
            throw new ApiException("Missing the required parameter 'reupgradeRequestBody' when calling reUpgrade(Async)");
        }
        
        
        com.squareup.okhttp.Call call = reUpgradeCall(reupgradeRequestBody, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 重新升级设备
     * ## 典型场景 ##    升级失败的设备重新升级。 ## 接口功能 ##    升级失败的设备重新升级。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。 
     * @param reupgradeRequestBody 重新升级入参。 (required)
     * @return CommonResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CommonResponseBody reUpgrade(ReupgradeRequestBody reupgradeRequestBody) throws ApiException {
        ApiResponse<CommonResponseBody> resp = reUpgradeWithHttpInfo(reupgradeRequestBody);
        return resp.getData();
    }

    /**
     * 重新升级设备
     * ## 典型场景 ##    升级失败的设备重新升级。 ## 接口功能 ##    升级失败的设备重新升级。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。 
     * @param reupgradeRequestBody 重新升级入参。 (required)
     * @return ApiResponse&lt;CommonResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CommonResponseBody> reUpgradeWithHttpInfo(ReupgradeRequestBody reupgradeRequestBody) throws ApiException {
        com.squareup.okhttp.Call call = reUpgradeValidateBeforeCall(reupgradeRequestBody, null, null);
        Type localVarReturnType = new TypeToken<CommonResponseBody>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 重新升级设备 (asynchronously)
     * ## 典型场景 ##    升级失败的设备重新升级。 ## 接口功能 ##    升级失败的设备重新升级。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。 
     * @param reupgradeRequestBody 重新升级入参。 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call reUpgradeAsync(ReupgradeRequestBody reupgradeRequestBody, final ApiCallback<CommonResponseBody> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = reUpgradeValidateBeforeCall(reupgradeRequestBody, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CommonResponseBody>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
