/*
 * Portal在线用户查询
 * 查询Portal在线用户第三方北向接口。提供了Portal在线用户的查询、强制下线接口。 
 *
 * OpenAPI spec version: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.huawei.cloudcampus.api.service;

import com.huawei.cloudcampus.api.ApiCallback;
import com.huawei.cloudcampus.api.ApiClient;
import com.huawei.cloudcampus.api.ApiException;
import com.huawei.cloudcampus.api.ApiResponse;
import com.huawei.cloudcampus.api.Configuration;
import com.huawei.cloudcampus.api.Pair;
import com.huawei.cloudcampus.api.ProgressRequestBody;
import com.huawei.cloudcampus.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.huawei.cloudcampus.api.model.CutPortalOnlineUserInputDto;
import com.huawei.cloudcampus.api.model.CutPortalOnlineUserOutputDto;
import com.huawei.cloudcampus.api.model.QueryPortalOnlineUserInfoOutputDto;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PortalOnlineUsersMgrApi {
    private ApiClient apiClient;

    public PortalOnlineUsersMgrApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PortalOnlineUsersMgrApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for cutPortalOnlineUsers
     * @param body 管理员强制Portal在线用户下线参数。 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cutPortalOnlineUsersCall(CutPortalOnlineUserInputDto body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v1/accountservice/onlineusers/batch-delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cutPortalOnlineUsersValidateBeforeCall(CutPortalOnlineUserInputDto body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling cutPortalOnlineUsers(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cutPortalOnlineUsersCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 管理员强制Portal在线用户下线
     * ## 典型场景 ##  提供管理员强制Portal在线用户下线北向接口。 ## 接口功能 ##  管理员强制Portal在线用户下线 ## 接口约束 ##  只有租户管理员获取token并建立会话后才能调用该接口。 
     * @param body 管理员强制Portal在线用户下线参数。 (required)
     * @return CutPortalOnlineUserOutputDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CutPortalOnlineUserOutputDto cutPortalOnlineUsers(CutPortalOnlineUserInputDto body) throws ApiException {
        ApiResponse<CutPortalOnlineUserOutputDto> resp = cutPortalOnlineUsersWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * 管理员强制Portal在线用户下线
     * ## 典型场景 ##  提供管理员强制Portal在线用户下线北向接口。 ## 接口功能 ##  管理员强制Portal在线用户下线 ## 接口约束 ##  只有租户管理员获取token并建立会话后才能调用该接口。 
     * @param body 管理员强制Portal在线用户下线参数。 (required)
     * @return ApiResponse&lt;CutPortalOnlineUserOutputDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CutPortalOnlineUserOutputDto> cutPortalOnlineUsersWithHttpInfo(CutPortalOnlineUserInputDto body) throws ApiException {
        com.squareup.okhttp.Call call = cutPortalOnlineUsersValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<CutPortalOnlineUserOutputDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 管理员强制Portal在线用户下线 (asynchronously)
     * ## 典型场景 ##  提供管理员强制Portal在线用户下线北向接口。 ## 接口功能 ##  管理员强制Portal在线用户下线 ## 接口约束 ##  只有租户管理员获取token并建立会话后才能调用该接口。 
     * @param body 管理员强制Portal在线用户下线参数。 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cutPortalOnlineUsersAsync(CutPortalOnlineUserInputDto body, final ApiCallback<CutPortalOnlineUserOutputDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cutPortalOnlineUsersValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CutPortalOnlineUserOutputDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for queryPortalOnlineUser
     * @param userType 用户类型： 0---普通用户 1---短信注册用户 2---自注册用户 4---社交媒体用户 5---微信用户 6---Passcode用户 7---第三方用户 11---PPSK 20---普通访客 64---匿名用户 如果不填，查询所有类型。  (optional, default to -1)
     * @param authMode 认证方式： 1---Portal认证 2---Mac优先认证 3---第三方认证 4---PPSK 如果不填，查询所有类型。  (optional, default to 0)
     * @param pageIndex 起始页。 (optional, default to 1)
     * @param pageSize 分页大小。 (optional, default to 20)
     * @param userName 用户名。用户名使用模糊查询。 (optional)
     * @param beginTimeLong 查询起始时间。 (optional)
     * @param endTimeLong 查询结束时间。 (optional)
     * @param accessPolicy 认证策略名。 (optional)
     * @param terminalIp 认证终端IP。 (optional)
     * @param terminalMac 认证终端MAC。 (optional)
     * @param ssid SSID (optional)
     * @param userGroupId 用户组ID。 (optional)
     * @param siteId 站点ID。 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call queryPortalOnlineUserCall(String userType, String authMode, Integer pageIndex, Integer pageSize, String userName, Long beginTimeLong, Long endTimeLong, String accessPolicy, String terminalIp, String terminalMac, String ssid, String userGroupId, String siteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v1/accountservice/onlineusers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (userType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "userType", userType));
        if (authMode != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "authMode", authMode));
        if (pageIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pageIndex", pageIndex));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pageSize", pageSize));
        if (userName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "userName", userName));
        if (beginTimeLong != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "beginTimeLong", beginTimeLong));
        if (endTimeLong != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "endTimeLong", endTimeLong));
        if (accessPolicy != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "accessPolicy", accessPolicy));
        if (terminalIp != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "terminalIp", terminalIp));
        if (terminalMac != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "terminalMac", terminalMac));
        if (ssid != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "ssid", ssid));
        if (userGroupId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "userGroupId", userGroupId));
        if (siteId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "siteId", siteId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call queryPortalOnlineUserValidateBeforeCall(String userType, String authMode, Integer pageIndex, Integer pageSize, String userName, Long beginTimeLong, Long endTimeLong, String accessPolicy, String terminalIp, String terminalMac, String ssid, String userGroupId, String siteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = queryPortalOnlineUserCall(userType, authMode, pageIndex, pageSize, userName, beginTimeLong, endTimeLong, accessPolicy, terminalIp, terminalMac, ssid, userGroupId, siteId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 查询Portal在线用户
     * ## 典型场景 ##  提供查询Portal在线用户北向接口。 ## 接口功能 ##  查询Portal在线用户列表。默认按照认证时间降序排列。 ## 接口约束 ##  只有租户管理员获取token并建立会话后才能调用该接口。 
     * @param userType 用户类型： 0---普通用户 1---短信注册用户 2---自注册用户 4---社交媒体用户 5---微信用户 6---Passcode用户 7---第三方用户 11---PPSK 20---普通访客 64---匿名用户 如果不填，查询所有类型。  (optional, default to -1)
     * @param authMode 认证方式： 1---Portal认证 2---Mac优先认证 3---第三方认证 4---PPSK 如果不填，查询所有类型。  (optional, default to 0)
     * @param pageIndex 起始页。 (optional, default to 1)
     * @param pageSize 分页大小。 (optional, default to 20)
     * @param userName 用户名。用户名使用模糊查询。 (optional)
     * @param beginTimeLong 查询起始时间。 (optional)
     * @param endTimeLong 查询结束时间。 (optional)
     * @param accessPolicy 认证策略名。 (optional)
     * @param terminalIp 认证终端IP。 (optional)
     * @param terminalMac 认证终端MAC。 (optional)
     * @param ssid SSID (optional)
     * @param userGroupId 用户组ID。 (optional)
     * @param siteId 站点ID。 (optional)
     * @return List&lt;QueryPortalOnlineUserInfoOutputDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<QueryPortalOnlineUserInfoOutputDto> queryPortalOnlineUser(String userType, String authMode, Integer pageIndex, Integer pageSize, String userName, Long beginTimeLong, Long endTimeLong, String accessPolicy, String terminalIp, String terminalMac, String ssid, String userGroupId, String siteId) throws ApiException {
        ApiResponse<List<QueryPortalOnlineUserInfoOutputDto>> resp = queryPortalOnlineUserWithHttpInfo(userType, authMode, pageIndex, pageSize, userName, beginTimeLong, endTimeLong, accessPolicy, terminalIp, terminalMac, ssid, userGroupId, siteId);
        return resp.getData();
    }

    /**
     * 查询Portal在线用户
     * ## 典型场景 ##  提供查询Portal在线用户北向接口。 ## 接口功能 ##  查询Portal在线用户列表。默认按照认证时间降序排列。 ## 接口约束 ##  只有租户管理员获取token并建立会话后才能调用该接口。 
     * @param userType 用户类型： 0---普通用户 1---短信注册用户 2---自注册用户 4---社交媒体用户 5---微信用户 6---Passcode用户 7---第三方用户 11---PPSK 20---普通访客 64---匿名用户 如果不填，查询所有类型。  (optional, default to -1)
     * @param authMode 认证方式： 1---Portal认证 2---Mac优先认证 3---第三方认证 4---PPSK 如果不填，查询所有类型。  (optional, default to 0)
     * @param pageIndex 起始页。 (optional, default to 1)
     * @param pageSize 分页大小。 (optional, default to 20)
     * @param userName 用户名。用户名使用模糊查询。 (optional)
     * @param beginTimeLong 查询起始时间。 (optional)
     * @param endTimeLong 查询结束时间。 (optional)
     * @param accessPolicy 认证策略名。 (optional)
     * @param terminalIp 认证终端IP。 (optional)
     * @param terminalMac 认证终端MAC。 (optional)
     * @param ssid SSID (optional)
     * @param userGroupId 用户组ID。 (optional)
     * @param siteId 站点ID。 (optional)
     * @return ApiResponse&lt;List&lt;QueryPortalOnlineUserInfoOutputDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<QueryPortalOnlineUserInfoOutputDto>> queryPortalOnlineUserWithHttpInfo(String userType, String authMode, Integer pageIndex, Integer pageSize, String userName, Long beginTimeLong, Long endTimeLong, String accessPolicy, String terminalIp, String terminalMac, String ssid, String userGroupId, String siteId) throws ApiException {
        com.squareup.okhttp.Call call = queryPortalOnlineUserValidateBeforeCall(userType, authMode, pageIndex, pageSize, userName, beginTimeLong, endTimeLong, accessPolicy, terminalIp, terminalMac, ssid, userGroupId, siteId, null, null);
        Type localVarReturnType = new TypeToken<List<QueryPortalOnlineUserInfoOutputDto>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 查询Portal在线用户 (asynchronously)
     * ## 典型场景 ##  提供查询Portal在线用户北向接口。 ## 接口功能 ##  查询Portal在线用户列表。默认按照认证时间降序排列。 ## 接口约束 ##  只有租户管理员获取token并建立会话后才能调用该接口。 
     * @param userType 用户类型： 0---普通用户 1---短信注册用户 2---自注册用户 4---社交媒体用户 5---微信用户 6---Passcode用户 7---第三方用户 11---PPSK 20---普通访客 64---匿名用户 如果不填，查询所有类型。  (optional, default to -1)
     * @param authMode 认证方式： 1---Portal认证 2---Mac优先认证 3---第三方认证 4---PPSK 如果不填，查询所有类型。  (optional, default to 0)
     * @param pageIndex 起始页。 (optional, default to 1)
     * @param pageSize 分页大小。 (optional, default to 20)
     * @param userName 用户名。用户名使用模糊查询。 (optional)
     * @param beginTimeLong 查询起始时间。 (optional)
     * @param endTimeLong 查询结束时间。 (optional)
     * @param accessPolicy 认证策略名。 (optional)
     * @param terminalIp 认证终端IP。 (optional)
     * @param terminalMac 认证终端MAC。 (optional)
     * @param ssid SSID (optional)
     * @param userGroupId 用户组ID。 (optional)
     * @param siteId 站点ID。 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call queryPortalOnlineUserAsync(String userType, String authMode, Integer pageIndex, Integer pageSize, String userName, Long beginTimeLong, Long endTimeLong, String accessPolicy, String terminalIp, String terminalMac, String ssid, String userGroupId, String siteId, final ApiCallback<List<QueryPortalOnlineUserInfoOutputDto>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = queryPortalOnlineUserValidateBeforeCall(userType, authMode, pageIndex, pageSize, userName, beginTimeLong, endTimeLong, accessPolicy, terminalIp, terminalMac, ssid, userGroupId, siteId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<QueryPortalOnlineUserInfoOutputDto>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
