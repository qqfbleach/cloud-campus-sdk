/*
 * 上网时长流量策略
 * 上网时长流量策略编辑查询开放API。 
 *
 * OpenAPI spec version: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.huawei.cloudcampus.api.service;

import com.huawei.cloudcampus.api.ApiCallback;
import com.huawei.cloudcampus.api.ApiClient;
import com.huawei.cloudcampus.api.ApiException;
import com.huawei.cloudcampus.api.ApiResponse;
import com.huawei.cloudcampus.api.Configuration;
import com.huawei.cloudcampus.api.Pair;
import com.huawei.cloudcampus.api.ProgressRequestBody;
import com.huawei.cloudcampus.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.huawei.cloudcampus.api.model.CommonTimeFlowConfigDto;
import com.huawei.cloudcampus.api.model.DeleteTimeFlowConfigOutputDto;
import com.huawei.cloudcampus.api.model.TimeFlowConfigCommon;
import com.huawei.cloudcampus.api.model.TimeFlowConfigDeleteDto;
import com.huawei.cloudcampus.api.model.TimeFlowConfigsOutputDto;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TimeFlowConfigApi {
    private ApiClient apiClient;

    public TimeFlowConfigApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TimeFlowConfigApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addTimeFlowConfig
     * @param body 计费信息。 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addTimeFlowConfigCall(TimeFlowConfigCommon body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v1/authconfigservice/accessconfig/timeflowconfig";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addTimeFlowConfigValidateBeforeCall(TimeFlowConfigCommon body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addTimeFlowConfig(Async)");
        }
        
        
        com.squareup.okhttp.Call call = addTimeFlowConfigCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 新增计费策略
     * ## 操作场景 ##  提供新增计费策略北向接口。 ## 接口功能 ##  为指定的租户的站点新增计费策略。 ## 接口约束 ##  该接口支持北向管理员访问，必须在用户会话建立后使用。  
     * @param body 计费信息。 (required)
     * @return TimeFlowConfigsOutputDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TimeFlowConfigsOutputDto addTimeFlowConfig(TimeFlowConfigCommon body) throws ApiException {
        ApiResponse<TimeFlowConfigsOutputDto> resp = addTimeFlowConfigWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * 新增计费策略
     * ## 操作场景 ##  提供新增计费策略北向接口。 ## 接口功能 ##  为指定的租户的站点新增计费策略。 ## 接口约束 ##  该接口支持北向管理员访问，必须在用户会话建立后使用。  
     * @param body 计费信息。 (required)
     * @return ApiResponse&lt;TimeFlowConfigsOutputDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TimeFlowConfigsOutputDto> addTimeFlowConfigWithHttpInfo(TimeFlowConfigCommon body) throws ApiException {
        com.squareup.okhttp.Call call = addTimeFlowConfigValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<TimeFlowConfigsOutputDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 新增计费策略 (asynchronously)
     * ## 操作场景 ##  提供新增计费策略北向接口。 ## 接口功能 ##  为指定的租户的站点新增计费策略。 ## 接口约束 ##  该接口支持北向管理员访问，必须在用户会话建立后使用。  
     * @param body 计费信息。 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addTimeFlowConfigAsync(TimeFlowConfigCommon body, final ApiCallback<TimeFlowConfigsOutputDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addTimeFlowConfigValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TimeFlowConfigsOutputDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for delTimeFlowConfig
     * @param body 删除条件，策略ID列表。 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call delTimeFlowConfigCall(TimeFlowConfigDeleteDto body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v1/authconfigservice/accessconfig/timeflowconfig/batch-delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call delTimeFlowConfigValidateBeforeCall(TimeFlowConfigDeleteDto body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling delTimeFlowConfig(Async)");
        }
        
        
        com.squareup.okhttp.Call call = delTimeFlowConfigCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 删除计费策略
     * ## 操作场景 ##  提供删除计费策略北向接口。 ## 接口功能 ##  为指定的租户的站点删除计费策略。 ## 接口约束 ##  该接口支持北向管理员访问，必须在用户会话建立后使用。  
     * @param body 删除条件，策略ID列表。 (required)
     * @return DeleteTimeFlowConfigOutputDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeleteTimeFlowConfigOutputDto delTimeFlowConfig(TimeFlowConfigDeleteDto body) throws ApiException {
        ApiResponse<DeleteTimeFlowConfigOutputDto> resp = delTimeFlowConfigWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * 删除计费策略
     * ## 操作场景 ##  提供删除计费策略北向接口。 ## 接口功能 ##  为指定的租户的站点删除计费策略。 ## 接口约束 ##  该接口支持北向管理员访问，必须在用户会话建立后使用。  
     * @param body 删除条件，策略ID列表。 (required)
     * @return ApiResponse&lt;DeleteTimeFlowConfigOutputDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeleteTimeFlowConfigOutputDto> delTimeFlowConfigWithHttpInfo(TimeFlowConfigDeleteDto body) throws ApiException {
        com.squareup.okhttp.Call call = delTimeFlowConfigValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<DeleteTimeFlowConfigOutputDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 删除计费策略 (asynchronously)
     * ## 操作场景 ##  提供删除计费策略北向接口。 ## 接口功能 ##  为指定的租户的站点删除计费策略。 ## 接口约束 ##  该接口支持北向管理员访问，必须在用户会话建立后使用。  
     * @param body 删除条件，策略ID列表。 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call delTimeFlowConfigAsync(TimeFlowConfigDeleteDto body, final ApiCallback<DeleteTimeFlowConfigOutputDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = delTimeFlowConfigValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeleteTimeFlowConfigOutputDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTimeFlowConfig
     * @param siteId 站点ID，UUID格式。 (required)
     * @param id 计费策略ID，UUID格式。 (optional)
     * @param timeFlowName 计费策略名称，模糊查询。 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTimeFlowConfigCall(String siteId, String id, String timeFlowName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v1/authconfigservice/accessconfig/timeflowconfig";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "id", id));
        if (timeFlowName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "timeFlowName", timeFlowName));
        if (siteId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "siteId", siteId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTimeFlowConfigValidateBeforeCall(String siteId, String id, String timeFlowName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling getTimeFlowConfig(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getTimeFlowConfigCall(siteId, id, timeFlowName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 查询计费策略
     * ## 操作场景 ##  提供查询计费策略北向接口。 ## 接口功能 ##  查询计费策略。 ## 接口约束 ##  该接口支持北向管理员访问，必须在用户会话建立后使用。  
     * @param siteId 站点ID，UUID格式。 (required)
     * @param id 计费策略ID，UUID格式。 (optional)
     * @param timeFlowName 计费策略名称，模糊查询。 (optional)
     * @return TimeFlowConfigsOutputDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TimeFlowConfigsOutputDto getTimeFlowConfig(String siteId, String id, String timeFlowName) throws ApiException {
        ApiResponse<TimeFlowConfigsOutputDto> resp = getTimeFlowConfigWithHttpInfo(siteId, id, timeFlowName);
        return resp.getData();
    }

    /**
     * 查询计费策略
     * ## 操作场景 ##  提供查询计费策略北向接口。 ## 接口功能 ##  查询计费策略。 ## 接口约束 ##  该接口支持北向管理员访问，必须在用户会话建立后使用。  
     * @param siteId 站点ID，UUID格式。 (required)
     * @param id 计费策略ID，UUID格式。 (optional)
     * @param timeFlowName 计费策略名称，模糊查询。 (optional)
     * @return ApiResponse&lt;TimeFlowConfigsOutputDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TimeFlowConfigsOutputDto> getTimeFlowConfigWithHttpInfo(String siteId, String id, String timeFlowName) throws ApiException {
        com.squareup.okhttp.Call call = getTimeFlowConfigValidateBeforeCall(siteId, id, timeFlowName, null, null);
        Type localVarReturnType = new TypeToken<TimeFlowConfigsOutputDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 查询计费策略 (asynchronously)
     * ## 操作场景 ##  提供查询计费策略北向接口。 ## 接口功能 ##  查询计费策略。 ## 接口约束 ##  该接口支持北向管理员访问，必须在用户会话建立后使用。  
     * @param siteId 站点ID，UUID格式。 (required)
     * @param id 计费策略ID，UUID格式。 (optional)
     * @param timeFlowName 计费策略名称，模糊查询。 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTimeFlowConfigAsync(String siteId, String id, String timeFlowName, final ApiCallback<TimeFlowConfigsOutputDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTimeFlowConfigValidateBeforeCall(siteId, id, timeFlowName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TimeFlowConfigsOutputDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for modifyTimeFlowConfig
     * @param id 修改条件，计费策略ID。 (required)
     * @param body 修改内容。 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call modifyTimeFlowConfigCall(String id, TimeFlowConfigCommon body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v1/authconfigservice/accessconfig/timeflowconfig/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call modifyTimeFlowConfigValidateBeforeCall(String id, TimeFlowConfigCommon body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling modifyTimeFlowConfig(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling modifyTimeFlowConfig(Async)");
        }
        
        
        com.squareup.okhttp.Call call = modifyTimeFlowConfigCall(id, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 修改计费策略
     * ## 操作场景 ##  提供修改计费策略北向接口。 ## 接口功能 ##  为指定的租户的站点修改计费策略。 ## 接口约束 ##  该接口支持北向管理员访问，必须在用户会话建立后使用。  
     * @param id 修改条件，计费策略ID。 (required)
     * @param body 修改内容。 (required)
     * @return CommonTimeFlowConfigDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CommonTimeFlowConfigDto modifyTimeFlowConfig(String id, TimeFlowConfigCommon body) throws ApiException {
        ApiResponse<CommonTimeFlowConfigDto> resp = modifyTimeFlowConfigWithHttpInfo(id, body);
        return resp.getData();
    }

    /**
     * 修改计费策略
     * ## 操作场景 ##  提供修改计费策略北向接口。 ## 接口功能 ##  为指定的租户的站点修改计费策略。 ## 接口约束 ##  该接口支持北向管理员访问，必须在用户会话建立后使用。  
     * @param id 修改条件，计费策略ID。 (required)
     * @param body 修改内容。 (required)
     * @return ApiResponse&lt;CommonTimeFlowConfigDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CommonTimeFlowConfigDto> modifyTimeFlowConfigWithHttpInfo(String id, TimeFlowConfigCommon body) throws ApiException {
        com.squareup.okhttp.Call call = modifyTimeFlowConfigValidateBeforeCall(id, body, null, null);
        Type localVarReturnType = new TypeToken<CommonTimeFlowConfigDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 修改计费策略 (asynchronously)
     * ## 操作场景 ##  提供修改计费策略北向接口。 ## 接口功能 ##  为指定的租户的站点修改计费策略。 ## 接口约束 ##  该接口支持北向管理员访问，必须在用户会话建立后使用。  
     * @param id 修改条件，计费策略ID。 (required)
     * @param body 修改内容。 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call modifyTimeFlowConfigAsync(String id, TimeFlowConfigCommon body, final ApiCallback<CommonTimeFlowConfigDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = modifyTimeFlowConfigValidateBeforeCall(id, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CommonTimeFlowConfigDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
