/*
 * 链路管理
 * 链路管理北向接口 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.huawei.cloudcampus.api.service;

import com.huawei.cloudcampus.api.ApiCallback;
import com.huawei.cloudcampus.api.ApiClient;
import com.huawei.cloudcampus.api.ApiException;
import com.huawei.cloudcampus.api.ApiResponse;
import com.huawei.cloudcampus.api.Configuration;
import com.huawei.cloudcampus.api.Pair;
import com.huawei.cloudcampus.api.ProgressRequestBody;
import com.huawei.cloudcampus.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.huawei.cloudcampus.api.model.ItQueryResonse;
import com.huawei.cloudcampus.api.model.NorthResponse;
import com.huawei.cloudcampus.api.model.RegistryInfo;
import com.huawei.cloudcampus.api.model.SubscribeResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NotificateServiceApi {
    private ApiClient apiClient;

    public NotificateServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NotificateServiceApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for cancelItNotificateMessage
     * @param openid 会话标识，用于Open API的鉴权。 (required)
     * @param systemID 第三方系统标识（可为IP地址） (required)
     * @param desc 第三方系统描述 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cancelItNotificateMessageCall(String openid, String systemID, String desc, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/rest/openapi/notification/it/link";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (systemID != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "systemID", systemID));
        if (desc != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "desc", desc));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (openid != null)
        localVarHeaderParams.put("openid", apiClient.parameterToString(openid));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cancelItNotificateMessageValidateBeforeCall(String openid, String systemID, String desc, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'openid' is set
        if (openid == null) {
            throw new ApiException("Missing the required parameter 'openid' when calling cancelItNotificateMessage(Async)");
        }
        
        // verify the required parameter 'systemID' is set
        if (systemID == null) {
            throw new ApiException("Missing the required parameter 'systemID' when calling cancelItNotificateMessage(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cancelItNotificateMessageCall(openid, systemID, desc, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 取消订阅IT设备链路变更通知
     * ## 典型场景 ##   需要取消IT设备链路变更通知时使用。 ## 接口功能 ##   删除IT设备链路变更通知，IT设备链路发生变更时，不再发送通知消息。 ## 接口约束 ##   该接口支持北向用户访问，必须在用户会话建立后使用。 
     * @param openid 会话标识，用于Open API的鉴权。 (required)
     * @param systemID 第三方系统标识（可为IP地址） (required)
     * @param desc 第三方系统描述 (optional)
     * @return SubscribeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SubscribeResponse cancelItNotificateMessage(String openid, String systemID, String desc) throws ApiException {
        ApiResponse<SubscribeResponse> resp = cancelItNotificateMessageWithHttpInfo(openid, systemID, desc);
        return resp.getData();
    }

    /**
     * 取消订阅IT设备链路变更通知
     * ## 典型场景 ##   需要取消IT设备链路变更通知时使用。 ## 接口功能 ##   删除IT设备链路变更通知，IT设备链路发生变更时，不再发送通知消息。 ## 接口约束 ##   该接口支持北向用户访问，必须在用户会话建立后使用。 
     * @param openid 会话标识，用于Open API的鉴权。 (required)
     * @param systemID 第三方系统标识（可为IP地址） (required)
     * @param desc 第三方系统描述 (optional)
     * @return ApiResponse&lt;SubscribeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SubscribeResponse> cancelItNotificateMessageWithHttpInfo(String openid, String systemID, String desc) throws ApiException {
        com.squareup.okhttp.Call call = cancelItNotificateMessageValidateBeforeCall(openid, systemID, desc, null, null);
        Type localVarReturnType = new TypeToken<SubscribeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 取消订阅IT设备链路变更通知 (asynchronously)
     * ## 典型场景 ##   需要取消IT设备链路变更通知时使用。 ## 接口功能 ##   删除IT设备链路变更通知，IT设备链路发生变更时，不再发送通知消息。 ## 接口约束 ##   该接口支持北向用户访问，必须在用户会话建立后使用。 
     * @param openid 会话标识，用于Open API的鉴权。 (required)
     * @param systemID 第三方系统标识（可为IP地址） (required)
     * @param desc 第三方系统描述 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cancelItNotificateMessageAsync(String openid, String systemID, String desc, final ApiCallback<SubscribeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cancelItNotificateMessageValidateBeforeCall(openid, systemID, desc, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SubscribeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cancelNetworkNotificateMessage
     * @param openid 会话标识，用于Open API的鉴权。 (required)
     * @param systemID 第三方系统标识（可为IP地址） (required)
     * @param desc 第三方系统描述 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cancelNetworkNotificateMessageCall(String openid, String systemID, String desc, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/rest/openapi/notification/network/link";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (systemID != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "systemID", systemID));
        if (desc != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "desc", desc));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (openid != null)
        localVarHeaderParams.put("openid", apiClient.parameterToString(openid));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cancelNetworkNotificateMessageValidateBeforeCall(String openid, String systemID, String desc, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'openid' is set
        if (openid == null) {
            throw new ApiException("Missing the required parameter 'openid' when calling cancelNetworkNotificateMessage(Async)");
        }
        
        // verify the required parameter 'systemID' is set
        if (systemID == null) {
            throw new ApiException("Missing the required parameter 'systemID' when calling cancelNetworkNotificateMessage(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cancelNetworkNotificateMessageCall(openid, systemID, desc, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 取消订阅网络链路变更通知
     * ## 典型场景 ##   需要取消网络链路变更通知时使用。 ## 接口功能 ##   删除网络链路变更通知，网络链路发生变更时，不再发送通知消息。 ## 接口约束 ##   该接口支持北向用户访问，必须在用户会话建立后使用。 
     * @param openid 会话标识，用于Open API的鉴权。 (required)
     * @param systemID 第三方系统标识（可为IP地址） (required)
     * @param desc 第三方系统描述 (optional)
     * @return SubscribeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SubscribeResponse cancelNetworkNotificateMessage(String openid, String systemID, String desc) throws ApiException {
        ApiResponse<SubscribeResponse> resp = cancelNetworkNotificateMessageWithHttpInfo(openid, systemID, desc);
        return resp.getData();
    }

    /**
     * 取消订阅网络链路变更通知
     * ## 典型场景 ##   需要取消网络链路变更通知时使用。 ## 接口功能 ##   删除网络链路变更通知，网络链路发生变更时，不再发送通知消息。 ## 接口约束 ##   该接口支持北向用户访问，必须在用户会话建立后使用。 
     * @param openid 会话标识，用于Open API的鉴权。 (required)
     * @param systemID 第三方系统标识（可为IP地址） (required)
     * @param desc 第三方系统描述 (optional)
     * @return ApiResponse&lt;SubscribeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SubscribeResponse> cancelNetworkNotificateMessageWithHttpInfo(String openid, String systemID, String desc) throws ApiException {
        com.squareup.okhttp.Call call = cancelNetworkNotificateMessageValidateBeforeCall(openid, systemID, desc, null, null);
        Type localVarReturnType = new TypeToken<SubscribeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 取消订阅网络链路变更通知 (asynchronously)
     * ## 典型场景 ##   需要取消网络链路变更通知时使用。 ## 接口功能 ##   删除网络链路变更通知，网络链路发生变更时，不再发送通知消息。 ## 接口约束 ##   该接口支持北向用户访问，必须在用户会话建立后使用。 
     * @param openid 会话标识，用于Open API的鉴权。 (required)
     * @param systemID 第三方系统标识（可为IP地址） (required)
     * @param desc 第三方系统描述 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cancelNetworkNotificateMessageAsync(String openid, String systemID, String desc, final ApiCallback<SubscribeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cancelNetworkNotificateMessageValidateBeforeCall(openid, systemID, desc, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SubscribeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for doGet
     * @param openid 会话标识，用于Open API的鉴权。 (required)
     * @param anedn 源网元DN (optional)
     * @param anename 源网元名称 (optional)
     * @param aneip 源网元IP (optional)
     * @param anestate 源网元状态取值： 0：未管理 1：在线 2：离线 3：未知  (optional)
     * @param aportdn 源端口DN (optional)
     * @param aportname 源端口名称 (optional)
     * @param aportip 源端口IP (optional)
     * @param aportadminstatus 源端口管理状态： 1：up正常状态 2：down故障状态 3：testing测试状态  (optional)
     * @param aportoperstatus 源端口运行状态： 1：up正常状态 2：down故障状态 3：testing测试状态 4：unknown未知状态 5：dormant休眠状态 6：notPresent不存在状态 7：lowerLayerDown下层状态down状态  (optional)
     * @param znedn 宿网元DN (optional)
     * @param znename 宿网元名称 (optional)
     * @param zneip 宿网元IP (optional)
     * @param znestate 宿网元状态： 0：未管理 1：在线 2：离线 3：未知  (optional)
     * @param zportdn 宿端口DN (optional)
     * @param zportname 宿端口名称 (optional)
     * @param zportip 宿端口IP (optional)
     * @param zportadminstatus 宿端口管理状态： 1：up正常状态 2：down故障状态 3：testing测试状态  (optional)
     * @param zportoperstatus 宿端口运行状态： 1：up正常状态 2：down故障状态 3：testing测试状态 4：unknown未知状态 5：dormant休眠状态 6：notPresent不存在状态 7：lowerLayerDown下层状态down状态  (optional)
     * @param linkdn 链路DN (optional)
     * @param linkname 链路名称 (optional)
     * @param linkstatus 链路状态： 0：正常 1：未知 2：重要故障 3：紧急故障 4：离线 5：不管理  (optional)
     * @param linktype 链路类型： 1：LLDP 2：Side-By-Side链路 3：MACARP 4：CDP 5：IP 6：由物理链路生成Eth-Trunk链路 99：手工  (optional)
     * @param speed 单位：Mbit/s (optional)
     * @param start 指定从哪个起始记录位置开始返回查询结果集。缺省值是0。小于0使用缺省值。 (optional, default to 0)
     * @param size 指定返回查询结果集总数。缺省值是20。（如果值小于0，将使用缺省值。） (optional, default to 20)
     * @param orderby 指定查询结果集采用的排序字段。缺省排序字段是linkdn。可指定的排序字段包括：linkdn，linkname，anedn，anename，aportdn，aportname，znedn，znename，zportdn，zportname，linktype，speed。指定多个排序字段时字段间用英文半角逗号“,”分隔。 (optional, default to linkdn)
     * @param desc 指定查询结果是否按照降序排序。只有指定orderby请求参数才生效 (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call doGetCall(String openid, String anedn, String anename, String aneip, Integer anestate, String aportdn, String aportname, String aportip, Integer aportadminstatus, Integer aportoperstatus, String znedn, String znename, String zneip, Integer znestate, String zportdn, String zportname, String zportip, Integer zportadminstatus, Integer zportoperstatus, String linkdn, String linkname, Integer linkstatus, Integer linktype, String speed, Integer start, Integer size, String orderby, Boolean desc, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/rest/openapi/network/link";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (anedn != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "anedn", anedn));
        if (anename != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "anename", anename));
        if (aneip != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "aneip", aneip));
        if (anestate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "anestate", anestate));
        if (aportdn != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "aportdn", aportdn));
        if (aportname != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "aportname", aportname));
        if (aportip != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "aportip", aportip));
        if (aportadminstatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "aportadminstatus", aportadminstatus));
        if (aportoperstatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "aportoperstatus", aportoperstatus));
        if (znedn != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "znedn", znedn));
        if (znename != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "znename", znename));
        if (zneip != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "zneip", zneip));
        if (znestate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "znestate", znestate));
        if (zportdn != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "zportdn", zportdn));
        if (zportname != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "zportname", zportname));
        if (zportip != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "zportip", zportip));
        if (zportadminstatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "zportadminstatus", zportadminstatus));
        if (zportoperstatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "zportoperstatus", zportoperstatus));
        if (linkdn != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "linkdn", linkdn));
        if (linkname != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "linkname", linkname));
        if (linkstatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "linkstatus", linkstatus));
        if (linktype != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "linktype", linktype));
        if (speed != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "speed", speed));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start", start));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));
        if (orderby != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "orderby", orderby));
        if (desc != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "desc", desc));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (openid != null)
        localVarHeaderParams.put("openid", apiClient.parameterToString(openid));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call doGetValidateBeforeCall(String openid, String anedn, String anename, String aneip, Integer anestate, String aportdn, String aportname, String aportip, Integer aportadminstatus, Integer aportoperstatus, String znedn, String znename, String zneip, Integer znestate, String zportdn, String zportname, String zportip, Integer zportadminstatus, Integer zportoperstatus, String linkdn, String linkname, Integer linkstatus, Integer linktype, String speed, Integer start, Integer size, String orderby, Boolean desc, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'openid' is set
        if (openid == null) {
            throw new ApiException("Missing the required parameter 'openid' when calling doGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = doGetCall(openid, anedn, anename, aneip, anestate, aportdn, aportname, aportip, aportadminstatus, aportoperstatus, znedn, znename, zneip, znestate, zportdn, zportname, zportip, zportadminstatus, zportoperstatus, linkdn, linkname, linkstatus, linktype, speed, start, size, orderby, desc, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 查询网络链路列表信息
     * ## 典型场景 ##   需要查询网络链路列表使用。 ## 接口功能 ##  查询网络链路信息，包括链路列表，符合查询条件的设备记录总数以及分页查询总页数。 ## 接口约束 ##   该接口支持北向用户访问，必须在用户会话建立后使用。 
     * @param openid 会话标识，用于Open API的鉴权。 (required)
     * @param anedn 源网元DN (optional)
     * @param anename 源网元名称 (optional)
     * @param aneip 源网元IP (optional)
     * @param anestate 源网元状态取值： 0：未管理 1：在线 2：离线 3：未知  (optional)
     * @param aportdn 源端口DN (optional)
     * @param aportname 源端口名称 (optional)
     * @param aportip 源端口IP (optional)
     * @param aportadminstatus 源端口管理状态： 1：up正常状态 2：down故障状态 3：testing测试状态  (optional)
     * @param aportoperstatus 源端口运行状态： 1：up正常状态 2：down故障状态 3：testing测试状态 4：unknown未知状态 5：dormant休眠状态 6：notPresent不存在状态 7：lowerLayerDown下层状态down状态  (optional)
     * @param znedn 宿网元DN (optional)
     * @param znename 宿网元名称 (optional)
     * @param zneip 宿网元IP (optional)
     * @param znestate 宿网元状态： 0：未管理 1：在线 2：离线 3：未知  (optional)
     * @param zportdn 宿端口DN (optional)
     * @param zportname 宿端口名称 (optional)
     * @param zportip 宿端口IP (optional)
     * @param zportadminstatus 宿端口管理状态： 1：up正常状态 2：down故障状态 3：testing测试状态  (optional)
     * @param zportoperstatus 宿端口运行状态： 1：up正常状态 2：down故障状态 3：testing测试状态 4：unknown未知状态 5：dormant休眠状态 6：notPresent不存在状态 7：lowerLayerDown下层状态down状态  (optional)
     * @param linkdn 链路DN (optional)
     * @param linkname 链路名称 (optional)
     * @param linkstatus 链路状态： 0：正常 1：未知 2：重要故障 3：紧急故障 4：离线 5：不管理  (optional)
     * @param linktype 链路类型： 1：LLDP 2：Side-By-Side链路 3：MACARP 4：CDP 5：IP 6：由物理链路生成Eth-Trunk链路 99：手工  (optional)
     * @param speed 单位：Mbit/s (optional)
     * @param start 指定从哪个起始记录位置开始返回查询结果集。缺省值是0。小于0使用缺省值。 (optional, default to 0)
     * @param size 指定返回查询结果集总数。缺省值是20。（如果值小于0，将使用缺省值。） (optional, default to 20)
     * @param orderby 指定查询结果集采用的排序字段。缺省排序字段是linkdn。可指定的排序字段包括：linkdn，linkname，anedn，anename，aportdn，aportname，znedn，znename，zportdn，zportname，linktype，speed。指定多个排序字段时字段间用英文半角逗号“,”分隔。 (optional, default to linkdn)
     * @param desc 指定查询结果是否按照降序排序。只有指定orderby请求参数才生效 (optional, default to false)
     * @return NorthResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NorthResponse doGet(String openid, String anedn, String anename, String aneip, Integer anestate, String aportdn, String aportname, String aportip, Integer aportadminstatus, Integer aportoperstatus, String znedn, String znename, String zneip, Integer znestate, String zportdn, String zportname, String zportip, Integer zportadminstatus, Integer zportoperstatus, String linkdn, String linkname, Integer linkstatus, Integer linktype, String speed, Integer start, Integer size, String orderby, Boolean desc) throws ApiException {
        ApiResponse<NorthResponse> resp = doGetWithHttpInfo(openid, anedn, anename, aneip, anestate, aportdn, aportname, aportip, aportadminstatus, aportoperstatus, znedn, znename, zneip, znestate, zportdn, zportname, zportip, zportadminstatus, zportoperstatus, linkdn, linkname, linkstatus, linktype, speed, start, size, orderby, desc);
        return resp.getData();
    }

    /**
     * 查询网络链路列表信息
     * ## 典型场景 ##   需要查询网络链路列表使用。 ## 接口功能 ##  查询网络链路信息，包括链路列表，符合查询条件的设备记录总数以及分页查询总页数。 ## 接口约束 ##   该接口支持北向用户访问，必须在用户会话建立后使用。 
     * @param openid 会话标识，用于Open API的鉴权。 (required)
     * @param anedn 源网元DN (optional)
     * @param anename 源网元名称 (optional)
     * @param aneip 源网元IP (optional)
     * @param anestate 源网元状态取值： 0：未管理 1：在线 2：离线 3：未知  (optional)
     * @param aportdn 源端口DN (optional)
     * @param aportname 源端口名称 (optional)
     * @param aportip 源端口IP (optional)
     * @param aportadminstatus 源端口管理状态： 1：up正常状态 2：down故障状态 3：testing测试状态  (optional)
     * @param aportoperstatus 源端口运行状态： 1：up正常状态 2：down故障状态 3：testing测试状态 4：unknown未知状态 5：dormant休眠状态 6：notPresent不存在状态 7：lowerLayerDown下层状态down状态  (optional)
     * @param znedn 宿网元DN (optional)
     * @param znename 宿网元名称 (optional)
     * @param zneip 宿网元IP (optional)
     * @param znestate 宿网元状态： 0：未管理 1：在线 2：离线 3：未知  (optional)
     * @param zportdn 宿端口DN (optional)
     * @param zportname 宿端口名称 (optional)
     * @param zportip 宿端口IP (optional)
     * @param zportadminstatus 宿端口管理状态： 1：up正常状态 2：down故障状态 3：testing测试状态  (optional)
     * @param zportoperstatus 宿端口运行状态： 1：up正常状态 2：down故障状态 3：testing测试状态 4：unknown未知状态 5：dormant休眠状态 6：notPresent不存在状态 7：lowerLayerDown下层状态down状态  (optional)
     * @param linkdn 链路DN (optional)
     * @param linkname 链路名称 (optional)
     * @param linkstatus 链路状态： 0：正常 1：未知 2：重要故障 3：紧急故障 4：离线 5：不管理  (optional)
     * @param linktype 链路类型： 1：LLDP 2：Side-By-Side链路 3：MACARP 4：CDP 5：IP 6：由物理链路生成Eth-Trunk链路 99：手工  (optional)
     * @param speed 单位：Mbit/s (optional)
     * @param start 指定从哪个起始记录位置开始返回查询结果集。缺省值是0。小于0使用缺省值。 (optional, default to 0)
     * @param size 指定返回查询结果集总数。缺省值是20。（如果值小于0，将使用缺省值。） (optional, default to 20)
     * @param orderby 指定查询结果集采用的排序字段。缺省排序字段是linkdn。可指定的排序字段包括：linkdn，linkname，anedn，anename，aportdn，aportname，znedn，znename，zportdn，zportname，linktype，speed。指定多个排序字段时字段间用英文半角逗号“,”分隔。 (optional, default to linkdn)
     * @param desc 指定查询结果是否按照降序排序。只有指定orderby请求参数才生效 (optional, default to false)
     * @return ApiResponse&lt;NorthResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NorthResponse> doGetWithHttpInfo(String openid, String anedn, String anename, String aneip, Integer anestate, String aportdn, String aportname, String aportip, Integer aportadminstatus, Integer aportoperstatus, String znedn, String znename, String zneip, Integer znestate, String zportdn, String zportname, String zportip, Integer zportadminstatus, Integer zportoperstatus, String linkdn, String linkname, Integer linkstatus, Integer linktype, String speed, Integer start, Integer size, String orderby, Boolean desc) throws ApiException {
        com.squareup.okhttp.Call call = doGetValidateBeforeCall(openid, anedn, anename, aneip, anestate, aportdn, aportname, aportip, aportadminstatus, aportoperstatus, znedn, znename, zneip, znestate, zportdn, zportname, zportip, zportadminstatus, zportoperstatus, linkdn, linkname, linkstatus, linktype, speed, start, size, orderby, desc, null, null);
        Type localVarReturnType = new TypeToken<NorthResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 查询网络链路列表信息 (asynchronously)
     * ## 典型场景 ##   需要查询网络链路列表使用。 ## 接口功能 ##  查询网络链路信息，包括链路列表，符合查询条件的设备记录总数以及分页查询总页数。 ## 接口约束 ##   该接口支持北向用户访问，必须在用户会话建立后使用。 
     * @param openid 会话标识，用于Open API的鉴权。 (required)
     * @param anedn 源网元DN (optional)
     * @param anename 源网元名称 (optional)
     * @param aneip 源网元IP (optional)
     * @param anestate 源网元状态取值： 0：未管理 1：在线 2：离线 3：未知  (optional)
     * @param aportdn 源端口DN (optional)
     * @param aportname 源端口名称 (optional)
     * @param aportip 源端口IP (optional)
     * @param aportadminstatus 源端口管理状态： 1：up正常状态 2：down故障状态 3：testing测试状态  (optional)
     * @param aportoperstatus 源端口运行状态： 1：up正常状态 2：down故障状态 3：testing测试状态 4：unknown未知状态 5：dormant休眠状态 6：notPresent不存在状态 7：lowerLayerDown下层状态down状态  (optional)
     * @param znedn 宿网元DN (optional)
     * @param znename 宿网元名称 (optional)
     * @param zneip 宿网元IP (optional)
     * @param znestate 宿网元状态： 0：未管理 1：在线 2：离线 3：未知  (optional)
     * @param zportdn 宿端口DN (optional)
     * @param zportname 宿端口名称 (optional)
     * @param zportip 宿端口IP (optional)
     * @param zportadminstatus 宿端口管理状态： 1：up正常状态 2：down故障状态 3：testing测试状态  (optional)
     * @param zportoperstatus 宿端口运行状态： 1：up正常状态 2：down故障状态 3：testing测试状态 4：unknown未知状态 5：dormant休眠状态 6：notPresent不存在状态 7：lowerLayerDown下层状态down状态  (optional)
     * @param linkdn 链路DN (optional)
     * @param linkname 链路名称 (optional)
     * @param linkstatus 链路状态： 0：正常 1：未知 2：重要故障 3：紧急故障 4：离线 5：不管理  (optional)
     * @param linktype 链路类型： 1：LLDP 2：Side-By-Side链路 3：MACARP 4：CDP 5：IP 6：由物理链路生成Eth-Trunk链路 99：手工  (optional)
     * @param speed 单位：Mbit/s (optional)
     * @param start 指定从哪个起始记录位置开始返回查询结果集。缺省值是0。小于0使用缺省值。 (optional, default to 0)
     * @param size 指定返回查询结果集总数。缺省值是20。（如果值小于0，将使用缺省值。） (optional, default to 20)
     * @param orderby 指定查询结果集采用的排序字段。缺省排序字段是linkdn。可指定的排序字段包括：linkdn，linkname，anedn，anename，aportdn，aportname，znedn，znename，zportdn，zportname，linktype，speed。指定多个排序字段时字段间用英文半角逗号“,”分隔。 (optional, default to linkdn)
     * @param desc 指定查询结果是否按照降序排序。只有指定orderby请求参数才生效 (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call doGetAsync(String openid, String anedn, String anename, String aneip, Integer anestate, String aportdn, String aportname, String aportip, Integer aportadminstatus, Integer aportoperstatus, String znedn, String znename, String zneip, Integer znestate, String zportdn, String zportname, String zportip, Integer zportadminstatus, Integer zportoperstatus, String linkdn, String linkname, Integer linkstatus, Integer linktype, String speed, Integer start, Integer size, String orderby, Boolean desc, final ApiCallback<NorthResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = doGetValidateBeforeCall(openid, anedn, anename, aneip, anestate, aportdn, aportname, aportip, aportadminstatus, aportoperstatus, znedn, znename, zneip, znestate, zportdn, zportname, zportip, zportadminstatus, zportoperstatus, linkdn, linkname, linkstatus, linktype, speed, start, size, orderby, desc, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NorthResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for queryItLinks
     * @param openid 会话标识，用于OpenAPI的鉴权。 (required)
     * @param anedn 源网元DN (optional)
     * @param znedn 目的网元DN (optional)
     * @param start 页查询的第几页，从1开始，默认取第1页。 (optional, default to 1)
     * @param size 分页查询的每页记录数，支持1～100条，默认值20条。说明pageSize小于1或大于100时，使用默认值20。 (optional, default to 20)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call queryItLinksCall(String openid, String anedn, String znedn, Integer start, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/rest/openapi/it/link";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (anedn != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "anedn", anedn));
        if (znedn != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "znedn", znedn));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start", start));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (openid != null)
        localVarHeaderParams.put("openid", apiClient.parameterToString(openid));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call queryItLinksValidateBeforeCall(String openid, String anedn, String znedn, Integer start, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'openid' is set
        if (openid == null) {
            throw new ApiException("Missing the required parameter 'openid' when calling queryItLinks(Async)");
        }
        
        
        com.squareup.okhttp.Call call = queryItLinksCall(openid, anedn, znedn, start, size, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 查询IT设备链路信息
     * ## 典型场景 ##   需要查询IT设备链路使用。 ## 接口功能 ##  查询IT设备链路信息，包括链路列表，符合查询条件的设备记录总数以及分页查询总页数。 ## 接口约束 ##   该接口支持北向用户访问，必须在用户会话建立后使用。 
     * @param openid 会话标识，用于OpenAPI的鉴权。 (required)
     * @param anedn 源网元DN (optional)
     * @param znedn 目的网元DN (optional)
     * @param start 页查询的第几页，从1开始，默认取第1页。 (optional, default to 1)
     * @param size 分页查询的每页记录数，支持1～100条，默认值20条。说明pageSize小于1或大于100时，使用默认值20。 (optional, default to 20)
     * @return ItQueryResonse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ItQueryResonse queryItLinks(String openid, String anedn, String znedn, Integer start, Integer size) throws ApiException {
        ApiResponse<ItQueryResonse> resp = queryItLinksWithHttpInfo(openid, anedn, znedn, start, size);
        return resp.getData();
    }

    /**
     * 查询IT设备链路信息
     * ## 典型场景 ##   需要查询IT设备链路使用。 ## 接口功能 ##  查询IT设备链路信息，包括链路列表，符合查询条件的设备记录总数以及分页查询总页数。 ## 接口约束 ##   该接口支持北向用户访问，必须在用户会话建立后使用。 
     * @param openid 会话标识，用于OpenAPI的鉴权。 (required)
     * @param anedn 源网元DN (optional)
     * @param znedn 目的网元DN (optional)
     * @param start 页查询的第几页，从1开始，默认取第1页。 (optional, default to 1)
     * @param size 分页查询的每页记录数，支持1～100条，默认值20条。说明pageSize小于1或大于100时，使用默认值20。 (optional, default to 20)
     * @return ApiResponse&lt;ItQueryResonse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ItQueryResonse> queryItLinksWithHttpInfo(String openid, String anedn, String znedn, Integer start, Integer size) throws ApiException {
        com.squareup.okhttp.Call call = queryItLinksValidateBeforeCall(openid, anedn, znedn, start, size, null, null);
        Type localVarReturnType = new TypeToken<ItQueryResonse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 查询IT设备链路信息 (asynchronously)
     * ## 典型场景 ##   需要查询IT设备链路使用。 ## 接口功能 ##  查询IT设备链路信息，包括链路列表，符合查询条件的设备记录总数以及分页查询总页数。 ## 接口约束 ##   该接口支持北向用户访问，必须在用户会话建立后使用。 
     * @param openid 会话标识，用于OpenAPI的鉴权。 (required)
     * @param anedn 源网元DN (optional)
     * @param znedn 目的网元DN (optional)
     * @param start 页查询的第几页，从1开始，默认取第1页。 (optional, default to 1)
     * @param size 分页查询的每页记录数，支持1～100条，默认值20条。说明pageSize小于1或大于100时，使用默认值20。 (optional, default to 20)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call queryItLinksAsync(String openid, String anedn, String znedn, Integer start, Integer size, final ApiCallback<ItQueryResonse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = queryItLinksValidateBeforeCall(openid, anedn, znedn, start, size, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ItQueryResonse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for suscrbieItLinkChangeMessage
     * @param openid 会话标识，用于Open API的鉴权。 (required)
     * @param registryInfo  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call suscrbieItLinkChangeMessageCall(String openid, RegistryInfo registryInfo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = registryInfo;
        
        // create path and map variables
        String localVarPath = "/rest/openapi/notification/it/link";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (openid != null)
        localVarHeaderParams.put("openid", apiClient.parameterToString(openid));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call suscrbieItLinkChangeMessageValidateBeforeCall(String openid, RegistryInfo registryInfo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'openid' is set
        if (openid == null) {
            throw new ApiException("Missing the required parameter 'openid' when calling suscrbieItLinkChangeMessage(Async)");
        }
        
        // verify the required parameter 'registryInfo' is set
        if (registryInfo == null) {
            throw new ApiException("Missing the required parameter 'registryInfo' when calling suscrbieItLinkChangeMessage(Async)");
        }
        
        
        com.squareup.okhttp.Call call = suscrbieItLinkChangeMessageCall(openid, registryInfo, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 订阅IT设备链路变更通知
     * ## 典型场景 ##   需要接受IT设备链路变更消息时使用。 ## 接口功能 ##   注册IT设备链路变更通知，注册时携带URL路径，IT设备链路发生变更时，网管以POST方式向该URL发送通知消息。 ## 接口约束 ##   该接口支持北向用户访问，必须在用户会话建立后使用。 
     * @param openid 会话标识，用于Open API的鉴权。 (required)
     * @param registryInfo  (required)
     * @return SubscribeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SubscribeResponse suscrbieItLinkChangeMessage(String openid, RegistryInfo registryInfo) throws ApiException {
        ApiResponse<SubscribeResponse> resp = suscrbieItLinkChangeMessageWithHttpInfo(openid, registryInfo);
        return resp.getData();
    }

    /**
     * 订阅IT设备链路变更通知
     * ## 典型场景 ##   需要接受IT设备链路变更消息时使用。 ## 接口功能 ##   注册IT设备链路变更通知，注册时携带URL路径，IT设备链路发生变更时，网管以POST方式向该URL发送通知消息。 ## 接口约束 ##   该接口支持北向用户访问，必须在用户会话建立后使用。 
     * @param openid 会话标识，用于Open API的鉴权。 (required)
     * @param registryInfo  (required)
     * @return ApiResponse&lt;SubscribeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SubscribeResponse> suscrbieItLinkChangeMessageWithHttpInfo(String openid, RegistryInfo registryInfo) throws ApiException {
        com.squareup.okhttp.Call call = suscrbieItLinkChangeMessageValidateBeforeCall(openid, registryInfo, null, null);
        Type localVarReturnType = new TypeToken<SubscribeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 订阅IT设备链路变更通知 (asynchronously)
     * ## 典型场景 ##   需要接受IT设备链路变更消息时使用。 ## 接口功能 ##   注册IT设备链路变更通知，注册时携带URL路径，IT设备链路发生变更时，网管以POST方式向该URL发送通知消息。 ## 接口约束 ##   该接口支持北向用户访问，必须在用户会话建立后使用。 
     * @param openid 会话标识，用于Open API的鉴权。 (required)
     * @param registryInfo  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call suscrbieItLinkChangeMessageAsync(String openid, RegistryInfo registryInfo, final ApiCallback<SubscribeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = suscrbieItLinkChangeMessageValidateBeforeCall(openid, registryInfo, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SubscribeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for suscrbieNetworkLinkChangeMessage
     * @param openid 会话标识，用于Open API的鉴权。 (required)
     * @param registryInfo  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call suscrbieNetworkLinkChangeMessageCall(String openid, RegistryInfo registryInfo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = registryInfo;
        
        // create path and map variables
        String localVarPath = "/rest/openapi/notification/network/link";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (openid != null)
        localVarHeaderParams.put("openid", apiClient.parameterToString(openid));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call suscrbieNetworkLinkChangeMessageValidateBeforeCall(String openid, RegistryInfo registryInfo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'openid' is set
        if (openid == null) {
            throw new ApiException("Missing the required parameter 'openid' when calling suscrbieNetworkLinkChangeMessage(Async)");
        }
        
        // verify the required parameter 'registryInfo' is set
        if (registryInfo == null) {
            throw new ApiException("Missing the required parameter 'registryInfo' when calling suscrbieNetworkLinkChangeMessage(Async)");
        }
        
        
        com.squareup.okhttp.Call call = suscrbieNetworkLinkChangeMessageCall(openid, registryInfo, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 订阅网络链路变更通知
     * ## 典型场景 ##   需要接受网络链路变更消息时使用。 ## 接口功能 ##   注册网络链路变更通知，注册时携带URL路径，网络链路发生变更时，网管以POST方式向该URL发送通知消息。 ## 接口约束 ##   该接口支持北向用户访问，必须在用户会话建立后使用。 
     * @param openid 会话标识，用于Open API的鉴权。 (required)
     * @param registryInfo  (required)
     * @return SubscribeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SubscribeResponse suscrbieNetworkLinkChangeMessage(String openid, RegistryInfo registryInfo) throws ApiException {
        ApiResponse<SubscribeResponse> resp = suscrbieNetworkLinkChangeMessageWithHttpInfo(openid, registryInfo);
        return resp.getData();
    }

    /**
     * 订阅网络链路变更通知
     * ## 典型场景 ##   需要接受网络链路变更消息时使用。 ## 接口功能 ##   注册网络链路变更通知，注册时携带URL路径，网络链路发生变更时，网管以POST方式向该URL发送通知消息。 ## 接口约束 ##   该接口支持北向用户访问，必须在用户会话建立后使用。 
     * @param openid 会话标识，用于Open API的鉴权。 (required)
     * @param registryInfo  (required)
     * @return ApiResponse&lt;SubscribeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SubscribeResponse> suscrbieNetworkLinkChangeMessageWithHttpInfo(String openid, RegistryInfo registryInfo) throws ApiException {
        com.squareup.okhttp.Call call = suscrbieNetworkLinkChangeMessageValidateBeforeCall(openid, registryInfo, null, null);
        Type localVarReturnType = new TypeToken<SubscribeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 订阅网络链路变更通知 (asynchronously)
     * ## 典型场景 ##   需要接受网络链路变更消息时使用。 ## 接口功能 ##   注册网络链路变更通知，注册时携带URL路径，网络链路发生变更时，网管以POST方式向该URL发送通知消息。 ## 接口约束 ##   该接口支持北向用户访问，必须在用户会话建立后使用。 
     * @param openid 会话标识，用于Open API的鉴权。 (required)
     * @param registryInfo  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call suscrbieNetworkLinkChangeMessageAsync(String openid, RegistryInfo registryInfo, final ApiCallback<SubscribeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = suscrbieNetworkLinkChangeMessageValidateBeforeCall(openid, registryInfo, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SubscribeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
