/*
 * 时间模板管理
 * 时间模板第三方接口说明。 
 *
 * OpenAPI spec version: 1.2.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.huawei.cloudcampus.api.service;

import com.huawei.cloudcampus.api.ApiCallback;
import com.huawei.cloudcampus.api.ApiClient;
import com.huawei.cloudcampus.api.ApiException;
import com.huawei.cloudcampus.api.ApiResponse;
import com.huawei.cloudcampus.api.Configuration;
import com.huawei.cloudcampus.api.Pair;
import com.huawei.cloudcampus.api.ProgressRequestBody;
import com.huawei.cloudcampus.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.huawei.cloudcampus.api.model.AddTemplateDto;
import com.huawei.cloudcampus.api.model.TemplateResultDto;
import com.huawei.cloudcampus.api.model.TimeInfo;
import com.huawei.cloudcampus.api.model.TimeTemplateDto;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TimeRangeTemplateNetcfgNorthboundApi {
    private ApiClient apiClient;

    public TimeRangeTemplateNetcfgNorthboundApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TimeRangeTemplateNetcfgNorthboundApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getTimeRangeTemplate
     * @param name 模板名称。 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTimeRangeTemplateCall(String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v3/networkconfig/timetemplate/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "name", name));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTimeRangeTemplateValidateBeforeCall(String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getTimeRangeTemplateCall(name, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 查询时间段模板
     * ## 典型场景 ##  提供查询时间段模板接口。 ## 接口功能 ##  查询时间段模板。  ## 接口约束 ##  该接口支持北向接口管理访问，必须在用户会话建立后使用。  
     * @param name 模板名称。 (optional)
     * @return TimeInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TimeInfo getTimeRangeTemplate(String name) throws ApiException {
        ApiResponse<TimeInfo> resp = getTimeRangeTemplateWithHttpInfo(name);
        return resp.getData();
    }

    /**
     * 查询时间段模板
     * ## 典型场景 ##  提供查询时间段模板接口。 ## 接口功能 ##  查询时间段模板。  ## 接口约束 ##  该接口支持北向接口管理访问，必须在用户会话建立后使用。  
     * @param name 模板名称。 (optional)
     * @return ApiResponse&lt;TimeInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TimeInfo> getTimeRangeTemplateWithHttpInfo(String name) throws ApiException {
        com.squareup.okhttp.Call call = getTimeRangeTemplateValidateBeforeCall(name, null, null);
        Type localVarReturnType = new TypeToken<TimeInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 查询时间段模板 (asynchronously)
     * ## 典型场景 ##  提供查询时间段模板接口。 ## 接口功能 ##  查询时间段模板。  ## 接口约束 ##  该接口支持北向接口管理访问，必须在用户会话建立后使用。  
     * @param name 模板名称。 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTimeRangeTemplateAsync(String name, final ApiCallback<TimeInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTimeRangeTemplateValidateBeforeCall(name, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TimeInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for modifyTimeRangeTemplate
     * @param modifyDto 修改时间段模板入参。 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call modifyTimeRangeTemplateCall(TimeTemplateDto modifyDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = modifyDto;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v3/networkconfig/timetemplate/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call modifyTimeRangeTemplateValidateBeforeCall(TimeTemplateDto modifyDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modifyDto' is set
        if (modifyDto == null) {
            throw new ApiException("Missing the required parameter 'modifyDto' when calling modifyTimeRangeTemplate(Async)");
        }
        
        
        com.squareup.okhttp.Call call = modifyTimeRangeTemplateCall(modifyDto, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 修改时间段模板
     * ## 典型场景 ##  提供修改时间段模板接口。 ## 接口功能 ##  修改时间段模板。  ## 接口约束 ##  该接口支持北向接口管理访问，必须在用户会话建立后使用。 
     * @param modifyDto 修改时间段模板入参。 (required)
     * @return TemplateResultDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TemplateResultDto modifyTimeRangeTemplate(TimeTemplateDto modifyDto) throws ApiException {
        ApiResponse<TemplateResultDto> resp = modifyTimeRangeTemplateWithHttpInfo(modifyDto);
        return resp.getData();
    }

    /**
     * 修改时间段模板
     * ## 典型场景 ##  提供修改时间段模板接口。 ## 接口功能 ##  修改时间段模板。  ## 接口约束 ##  该接口支持北向接口管理访问，必须在用户会话建立后使用。 
     * @param modifyDto 修改时间段模板入参。 (required)
     * @return ApiResponse&lt;TemplateResultDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TemplateResultDto> modifyTimeRangeTemplateWithHttpInfo(TimeTemplateDto modifyDto) throws ApiException {
        com.squareup.okhttp.Call call = modifyTimeRangeTemplateValidateBeforeCall(modifyDto, null, null);
        Type localVarReturnType = new TypeToken<TemplateResultDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 修改时间段模板 (asynchronously)
     * ## 典型场景 ##  提供修改时间段模板接口。 ## 接口功能 ##  修改时间段模板。  ## 接口约束 ##  该接口支持北向接口管理访问，必须在用户会话建立后使用。 
     * @param modifyDto 修改时间段模板入参。 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call modifyTimeRangeTemplateAsync(TimeTemplateDto modifyDto, final ApiCallback<TemplateResultDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = modifyTimeRangeTemplateValidateBeforeCall(modifyDto, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TemplateResultDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for timeRangetemplatePost
     * @param timeTemplate 增加时间段模板入参。 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call timeRangetemplatePostCall(AddTemplateDto timeTemplate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = timeTemplate;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v3/networkconfig/timetemplate/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call timeRangetemplatePostValidateBeforeCall(AddTemplateDto timeTemplate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'timeTemplate' is set
        if (timeTemplate == null) {
            throw new ApiException("Missing the required parameter 'timeTemplate' when calling timeRangetemplatePost(Async)");
        }
        
        
        com.squareup.okhttp.Call call = timeRangetemplatePostCall(timeTemplate, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 新增时间段模板
     * ## 典型场景 ##  提供新增时间段模板接口。 ## 接口功能 ##  新增时间段模板。  ## 接口约束 ##  该接口支持北向接口管理访问，必须在用户会话建立后使用。 
     * @param timeTemplate 增加时间段模板入参。 (required)
     * @return TemplateResultDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TemplateResultDto timeRangetemplatePost(AddTemplateDto timeTemplate) throws ApiException {
        ApiResponse<TemplateResultDto> resp = timeRangetemplatePostWithHttpInfo(timeTemplate);
        return resp.getData();
    }

    /**
     * 新增时间段模板
     * ## 典型场景 ##  提供新增时间段模板接口。 ## 接口功能 ##  新增时间段模板。  ## 接口约束 ##  该接口支持北向接口管理访问，必须在用户会话建立后使用。 
     * @param timeTemplate 增加时间段模板入参。 (required)
     * @return ApiResponse&lt;TemplateResultDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TemplateResultDto> timeRangetemplatePostWithHttpInfo(AddTemplateDto timeTemplate) throws ApiException {
        com.squareup.okhttp.Call call = timeRangetemplatePostValidateBeforeCall(timeTemplate, null, null);
        Type localVarReturnType = new TypeToken<TemplateResultDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 新增时间段模板 (asynchronously)
     * ## 典型场景 ##  提供新增时间段模板接口。 ## 接口功能 ##  新增时间段模板。  ## 接口约束 ##  该接口支持北向接口管理访问，必须在用户会话建立后使用。 
     * @param timeTemplate 增加时间段模板入参。 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call timeRangetemplatePostAsync(AddTemplateDto timeTemplate, final ApiCallback<TemplateResultDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = timeRangetemplatePostValidateBeforeCall(timeTemplate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TemplateResultDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
