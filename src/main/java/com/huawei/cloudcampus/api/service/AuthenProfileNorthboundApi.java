/*
 * 认证模板管理
 * 认证模板北向接口定义 
 *
 * OpenAPI spec version: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.huawei.cloudcampus.api.service;

import com.huawei.cloudcampus.api.ApiCallback;
import com.huawei.cloudcampus.api.ApiClient;
import com.huawei.cloudcampus.api.ApiException;
import com.huawei.cloudcampus.api.ApiResponse;
import com.huawei.cloudcampus.api.Configuration;
import com.huawei.cloudcampus.api.Pair;
import com.huawei.cloudcampus.api.ProgressRequestBody;
import com.huawei.cloudcampus.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.huawei.cloudcampus.api.model.AuthenProfileDeleteDto;
import com.huawei.cloudcampus.api.model.AuthenProfileDeleteRespDto;
import com.huawei.cloudcampus.api.model.AuthenProfileDto;
import com.huawei.cloudcampus.api.model.AuthenProfileQueryResultDto;
import com.huawei.cloudcampus.api.model.AuthenRespDto;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AuthenProfileNorthboundApi {
    private ApiClient apiClient;

    public AuthenProfileNorthboundApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AuthenProfileNorthboundApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createAuthenProfile
     * @param authenProfileDto 创建认证模板北向入参。 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createAuthenProfileCall(AuthenProfileDto authenProfileDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = authenProfileDto;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v3/networkconfig/openprofile/authenprofile";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createAuthenProfileValidateBeforeCall(AuthenProfileDto authenProfileDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authenProfileDto' is set
        if (authenProfileDto == null) {
            throw new ApiException("Missing the required parameter 'authenProfileDto' when calling createAuthenProfile(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createAuthenProfileCall(authenProfileDto, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 创建认证模板
     * ## 典型场景 ##  提供创建认证模板的接口。&lt;br&gt; ## 接口功能 ##  提供创建认证模板的接口。 &lt;br&gt; ## 接口约束 ##  该接口支持租户管理员下北向接口管理访问，必须在用户会话建立后使用。 &lt;br&gt; 
     * @param authenProfileDto 创建认证模板北向入参。 (required)
     * @return AuthenRespDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AuthenRespDto createAuthenProfile(AuthenProfileDto authenProfileDto) throws ApiException {
        ApiResponse<AuthenRespDto> resp = createAuthenProfileWithHttpInfo(authenProfileDto);
        return resp.getData();
    }

    /**
     * 创建认证模板
     * ## 典型场景 ##  提供创建认证模板的接口。&lt;br&gt; ## 接口功能 ##  提供创建认证模板的接口。 &lt;br&gt; ## 接口约束 ##  该接口支持租户管理员下北向接口管理访问，必须在用户会话建立后使用。 &lt;br&gt; 
     * @param authenProfileDto 创建认证模板北向入参。 (required)
     * @return ApiResponse&lt;AuthenRespDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AuthenRespDto> createAuthenProfileWithHttpInfo(AuthenProfileDto authenProfileDto) throws ApiException {
        com.squareup.okhttp.Call call = createAuthenProfileValidateBeforeCall(authenProfileDto, null, null);
        Type localVarReturnType = new TypeToken<AuthenRespDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 创建认证模板 (asynchronously)
     * ## 典型场景 ##  提供创建认证模板的接口。&lt;br&gt; ## 接口功能 ##  提供创建认证模板的接口。 &lt;br&gt; ## 接口约束 ##  该接口支持租户管理员下北向接口管理访问，必须在用户会话建立后使用。 &lt;br&gt; 
     * @param authenProfileDto 创建认证模板北向入参。 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createAuthenProfileAsync(AuthenProfileDto authenProfileDto, final ApiCallback<AuthenRespDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createAuthenProfileValidateBeforeCall(authenProfileDto, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AuthenRespDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteAuthenProfile
     * @param authenProfileDeleteDto 删除认证模板北向入参。 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAuthenProfileCall(AuthenProfileDeleteDto authenProfileDeleteDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = authenProfileDeleteDto;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v3/networkconfig/openprofile/authenprofile/batch-delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAuthenProfileValidateBeforeCall(AuthenProfileDeleteDto authenProfileDeleteDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authenProfileDeleteDto' is set
        if (authenProfileDeleteDto == null) {
            throw new ApiException("Missing the required parameter 'authenProfileDeleteDto' when calling deleteAuthenProfile(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteAuthenProfileCall(authenProfileDeleteDto, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 删除认证模板
     * ## 典型场景 ##  提供批量删除认证模板的接口。&lt;br&gt; ## 接口功能 ##  提供批量删除认证模板的接口。 &lt;br&gt; ## 接口约束 ##  该接口支持租户管理员下北向接口管理访问，必须在用户会话建立后使用。 &lt;br&gt; 
     * @param authenProfileDeleteDto 删除认证模板北向入参。 (required)
     * @return AuthenProfileDeleteRespDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AuthenProfileDeleteRespDto deleteAuthenProfile(AuthenProfileDeleteDto authenProfileDeleteDto) throws ApiException {
        ApiResponse<AuthenProfileDeleteRespDto> resp = deleteAuthenProfileWithHttpInfo(authenProfileDeleteDto);
        return resp.getData();
    }

    /**
     * 删除认证模板
     * ## 典型场景 ##  提供批量删除认证模板的接口。&lt;br&gt; ## 接口功能 ##  提供批量删除认证模板的接口。 &lt;br&gt; ## 接口约束 ##  该接口支持租户管理员下北向接口管理访问，必须在用户会话建立后使用。 &lt;br&gt; 
     * @param authenProfileDeleteDto 删除认证模板北向入参。 (required)
     * @return ApiResponse&lt;AuthenProfileDeleteRespDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AuthenProfileDeleteRespDto> deleteAuthenProfileWithHttpInfo(AuthenProfileDeleteDto authenProfileDeleteDto) throws ApiException {
        com.squareup.okhttp.Call call = deleteAuthenProfileValidateBeforeCall(authenProfileDeleteDto, null, null);
        Type localVarReturnType = new TypeToken<AuthenProfileDeleteRespDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 删除认证模板 (asynchronously)
     * ## 典型场景 ##  提供批量删除认证模板的接口。&lt;br&gt; ## 接口功能 ##  提供批量删除认证模板的接口。 &lt;br&gt; ## 接口约束 ##  该接口支持租户管理员下北向接口管理访问，必须在用户会话建立后使用。 &lt;br&gt; 
     * @param authenProfileDeleteDto 删除认证模板北向入参。 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAuthenProfileAsync(AuthenProfileDeleteDto authenProfileDeleteDto, final ApiCallback<AuthenProfileDeleteRespDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAuthenProfileValidateBeforeCall(authenProfileDeleteDto, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AuthenProfileDeleteRespDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAuthenProfile
     * @param pageNum 页码。 (optional)
     * @param pageSize 分页尺寸。 (optional)
     * @param queryValue 认证模板名称模糊查询，支持精确和模糊匹配，不支持正则。 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAuthenProfileCall(Integer pageNum, Integer pageSize, String queryValue, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v3/networkconfig/openprofile/authenprofile";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (pageNum != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pageNum", pageNum));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pageSize", pageSize));
        if (queryValue != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "queryValue", queryValue));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAuthenProfileValidateBeforeCall(Integer pageNum, Integer pageSize, String queryValue, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getAuthenProfileCall(pageNum, pageSize, queryValue, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 查询认证模板
     * ## 典型场景 ##  提供查询认证模板的接口。&lt;br&gt; ## 接口功能 ##  提供查询认证模板的接口。 &lt;br&gt; ## 接口约束 ##  该接口支持租户管理员下北向接口管理访问，必须在用户会话建立后使用。 &lt;br&gt; 
     * @param pageNum 页码。 (optional)
     * @param pageSize 分页尺寸。 (optional)
     * @param queryValue 认证模板名称模糊查询，支持精确和模糊匹配，不支持正则。 (optional)
     * @return AuthenProfileQueryResultDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AuthenProfileQueryResultDto getAuthenProfile(Integer pageNum, Integer pageSize, String queryValue) throws ApiException {
        ApiResponse<AuthenProfileQueryResultDto> resp = getAuthenProfileWithHttpInfo(pageNum, pageSize, queryValue);
        return resp.getData();
    }

    /**
     * 查询认证模板
     * ## 典型场景 ##  提供查询认证模板的接口。&lt;br&gt; ## 接口功能 ##  提供查询认证模板的接口。 &lt;br&gt; ## 接口约束 ##  该接口支持租户管理员下北向接口管理访问，必须在用户会话建立后使用。 &lt;br&gt; 
     * @param pageNum 页码。 (optional)
     * @param pageSize 分页尺寸。 (optional)
     * @param queryValue 认证模板名称模糊查询，支持精确和模糊匹配，不支持正则。 (optional)
     * @return ApiResponse&lt;AuthenProfileQueryResultDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AuthenProfileQueryResultDto> getAuthenProfileWithHttpInfo(Integer pageNum, Integer pageSize, String queryValue) throws ApiException {
        com.squareup.okhttp.Call call = getAuthenProfileValidateBeforeCall(pageNum, pageSize, queryValue, null, null);
        Type localVarReturnType = new TypeToken<AuthenProfileQueryResultDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 查询认证模板 (asynchronously)
     * ## 典型场景 ##  提供查询认证模板的接口。&lt;br&gt; ## 接口功能 ##  提供查询认证模板的接口。 &lt;br&gt; ## 接口约束 ##  该接口支持租户管理员下北向接口管理访问，必须在用户会话建立后使用。 &lt;br&gt; 
     * @param pageNum 页码。 (optional)
     * @param pageSize 分页尺寸。 (optional)
     * @param queryValue 认证模板名称模糊查询，支持精确和模糊匹配，不支持正则。 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAuthenProfileAsync(Integer pageNum, Integer pageSize, String queryValue, final ApiCallback<AuthenProfileQueryResultDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAuthenProfileValidateBeforeCall(pageNum, pageSize, queryValue, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AuthenProfileQueryResultDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAuthenProfileById
     * @param id 认证模板ID。 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAuthenProfileByIdCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v3/networkconfig/openprofile/authenprofile/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAuthenProfileByIdValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getAuthenProfileById(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getAuthenProfileByIdCall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 根据ID查询认证模板
     * ## 典型场景 ##  提供根据ID查询认证模板的接口。&lt;br&gt; ## 接口功能 ##  提供根据ID查询认证模板的接口。 &lt;br&gt; ## 接口约束 ##  该接口支持租户管理员下北向接口管理访问，必须在用户会话建立后使用。 &lt;br&gt; 
     * @param id 认证模板ID。 (required)
     * @return AuthenRespDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AuthenRespDto getAuthenProfileById(String id) throws ApiException {
        ApiResponse<AuthenRespDto> resp = getAuthenProfileByIdWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * 根据ID查询认证模板
     * ## 典型场景 ##  提供根据ID查询认证模板的接口。&lt;br&gt; ## 接口功能 ##  提供根据ID查询认证模板的接口。 &lt;br&gt; ## 接口约束 ##  该接口支持租户管理员下北向接口管理访问，必须在用户会话建立后使用。 &lt;br&gt; 
     * @param id 认证模板ID。 (required)
     * @return ApiResponse&lt;AuthenRespDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AuthenRespDto> getAuthenProfileByIdWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = getAuthenProfileByIdValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<AuthenRespDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 根据ID查询认证模板 (asynchronously)
     * ## 典型场景 ##  提供根据ID查询认证模板的接口。&lt;br&gt; ## 接口功能 ##  提供根据ID查询认证模板的接口。 &lt;br&gt; ## 接口约束 ##  该接口支持租户管理员下北向接口管理访问，必须在用户会话建立后使用。 &lt;br&gt; 
     * @param id 认证模板ID。 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAuthenProfileByIdAsync(String id, final ApiCallback<AuthenRespDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAuthenProfileByIdValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AuthenRespDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateAuthenProfile
     * @param id 认证模板ID。 (required)
     * @param authenProfileDto 更新认证模板北向入参。 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateAuthenProfileCall(String id, AuthenProfileDto authenProfileDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = authenProfileDto;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v3/networkconfig/openprofile/authenprofile/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateAuthenProfileValidateBeforeCall(String id, AuthenProfileDto authenProfileDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateAuthenProfile(Async)");
        }
        
        // verify the required parameter 'authenProfileDto' is set
        if (authenProfileDto == null) {
            throw new ApiException("Missing the required parameter 'authenProfileDto' when calling updateAuthenProfile(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateAuthenProfileCall(id, authenProfileDto, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 更新认证模板
     * ## 典型场景 ##  提供更新认证模板的接口。&lt;br&gt; ## 接口功能 ##  提供更新认证模板的接口。 &lt;br&gt; ## 接口约束 ##  该接口支持租户管理员下北向接口管理访问，必须在用户会话建立后使用。 &lt;br&gt; 
     * @param id 认证模板ID。 (required)
     * @param authenProfileDto 更新认证模板北向入参。 (required)
     * @return AuthenRespDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AuthenRespDto updateAuthenProfile(String id, AuthenProfileDto authenProfileDto) throws ApiException {
        ApiResponse<AuthenRespDto> resp = updateAuthenProfileWithHttpInfo(id, authenProfileDto);
        return resp.getData();
    }

    /**
     * 更新认证模板
     * ## 典型场景 ##  提供更新认证模板的接口。&lt;br&gt; ## 接口功能 ##  提供更新认证模板的接口。 &lt;br&gt; ## 接口约束 ##  该接口支持租户管理员下北向接口管理访问，必须在用户会话建立后使用。 &lt;br&gt; 
     * @param id 认证模板ID。 (required)
     * @param authenProfileDto 更新认证模板北向入参。 (required)
     * @return ApiResponse&lt;AuthenRespDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AuthenRespDto> updateAuthenProfileWithHttpInfo(String id, AuthenProfileDto authenProfileDto) throws ApiException {
        com.squareup.okhttp.Call call = updateAuthenProfileValidateBeforeCall(id, authenProfileDto, null, null);
        Type localVarReturnType = new TypeToken<AuthenRespDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 更新认证模板 (asynchronously)
     * ## 典型场景 ##  提供更新认证模板的接口。&lt;br&gt; ## 接口功能 ##  提供更新认证模板的接口。 &lt;br&gt; ## 接口约束 ##  该接口支持租户管理员下北向接口管理访问，必须在用户会话建立后使用。 &lt;br&gt; 
     * @param id 认证模板ID。 (required)
     * @param authenProfileDto 更新认证模板北向入参。 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateAuthenProfileAsync(String id, AuthenProfileDto authenProfileDto, final ApiCallback<AuthenRespDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateAuthenProfileValidateBeforeCall(id, authenProfileDto, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AuthenRespDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
