/*
 * 交换机有线认证模板配置
 * 交换机有线认证模板，主要包括： · 创建站点下交换机有线认证模板配置 · 查询站点下交换机有线认证模板配置 · 修改站点下交换机有线认证模板配置 · 删除站点下交换机有线认证模板配置 · 修改站点交换机有线认证部分模板配置 · 增量绑站点交换机有线认证模板配置定 
 *
 * OpenAPI spec version: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.huawei.cloudcampus.api.service;

import com.huawei.cloudcampus.api.ApiCallback;
import com.huawei.cloudcampus.api.ApiClient;
import com.huawei.cloudcampus.api.ApiException;
import com.huawei.cloudcampus.api.ApiResponse;
import com.huawei.cloudcampus.api.Configuration;
import com.huawei.cloudcampus.api.Pair;
import com.huawei.cloudcampus.api.ProgressRequestBody;
import com.huawei.cloudcampus.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.huawei.cloudcampus.api.model.DeleteAuthResponse;
import com.huawei.cloudcampus.api.model.LswAuthConfig;
import com.huawei.cloudcampus.api.model.LswAuthConfigCore;
import com.huawei.cloudcampus.api.model.LswAuthConfigProfile;
import com.huawei.cloudcampus.api.model.LswAuthConfigResponse;
import com.huawei.cloudcampus.api.model.LswAuthDeleteDto;
import com.huawei.cloudcampus.api.model.LswDeviceInfo;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LswauthApi {
    private ApiClient apiClient;

    public LswauthApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LswauthApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createLswAuth
     * @param lswAuthConfigCore 交换机认证模板配置信息。 (required)
     * @param siteId 站点标识，UUID格式。 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createLswAuthCall(LswAuthConfigCore lswAuthConfigCore, String siteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = lswAuthConfigCore;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v1/authconfigservice/accessconfig/lswauth/{siteId}/profiles"
            .replaceAll("\\{" + "siteId" + "\\}", apiClient.escapeString(siteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createLswAuthValidateBeforeCall(LswAuthConfigCore lswAuthConfigCore, String siteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lswAuthConfigCore' is set
        if (lswAuthConfigCore == null) {
            throw new ApiException("Missing the required parameter 'lswAuthConfigCore' when calling createLswAuth(Async)");
        }
        
        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling createLswAuth(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createLswAuthCall(lswAuthConfigCore, siteId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 创建站点下交换机有线认证模板配置
     * ## 典型场景 ##  创建站点下交换机有线认证模板配置。&lt;br&gt; ## 接口功能 ##  创建站点下交换机有线认证模板配置。 &lt;br&gt; ## 接口约束 ##  该接口支持租户下北向接口管理员访问，必须在用户会话建立后使用。 &lt;br&gt; 
     * @param lswAuthConfigCore 交换机认证模板配置信息。 (required)
     * @param siteId 站点标识，UUID格式。 (required)
     * @return LswAuthConfigResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LswAuthConfigResponse createLswAuth(LswAuthConfigCore lswAuthConfigCore, String siteId) throws ApiException {
        ApiResponse<LswAuthConfigResponse> resp = createLswAuthWithHttpInfo(lswAuthConfigCore, siteId);
        return resp.getData();
    }

    /**
     * 创建站点下交换机有线认证模板配置
     * ## 典型场景 ##  创建站点下交换机有线认证模板配置。&lt;br&gt; ## 接口功能 ##  创建站点下交换机有线认证模板配置。 &lt;br&gt; ## 接口约束 ##  该接口支持租户下北向接口管理员访问，必须在用户会话建立后使用。 &lt;br&gt; 
     * @param lswAuthConfigCore 交换机认证模板配置信息。 (required)
     * @param siteId 站点标识，UUID格式。 (required)
     * @return ApiResponse&lt;LswAuthConfigResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LswAuthConfigResponse> createLswAuthWithHttpInfo(LswAuthConfigCore lswAuthConfigCore, String siteId) throws ApiException {
        com.squareup.okhttp.Call call = createLswAuthValidateBeforeCall(lswAuthConfigCore, siteId, null, null);
        Type localVarReturnType = new TypeToken<LswAuthConfigResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 创建站点下交换机有线认证模板配置 (asynchronously)
     * ## 典型场景 ##  创建站点下交换机有线认证模板配置。&lt;br&gt; ## 接口功能 ##  创建站点下交换机有线认证模板配置。 &lt;br&gt; ## 接口约束 ##  该接口支持租户下北向接口管理员访问，必须在用户会话建立后使用。 &lt;br&gt; 
     * @param lswAuthConfigCore 交换机认证模板配置信息。 (required)
     * @param siteId 站点标识，UUID格式。 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createLswAuthAsync(LswAuthConfigCore lswAuthConfigCore, String siteId, final ApiCallback<LswAuthConfigResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createLswAuthValidateBeforeCall(lswAuthConfigCore, siteId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LswAuthConfigResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteLswAuth
     * @param siteId 站点标识，UUID格式。 (required)
     * @param ids 待删除的有线认证模板。 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteLswAuthCall(String siteId, LswAuthDeleteDto ids, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = ids;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v1/authconfigservice/accessconfig/lswauth/{siteId}/profiles/batch-delete"
            .replaceAll("\\{" + "siteId" + "\\}", apiClient.escapeString(siteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteLswAuthValidateBeforeCall(String siteId, LswAuthDeleteDto ids, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling deleteLswAuth(Async)");
        }
        
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling deleteLswAuth(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteLswAuthCall(siteId, ids, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 删除站点下交换机有线认证模板配置
     * ## 典型场景 ##  批量删除站点下交换机有线认证模板。&lt;br&gt; ## 接口功能 ##  批量删除站点下交换机有线认证模板。 &lt;br&gt; ## 接口约束 ##  该接口支持租户下北向接口管理员访问，必须在用户会话建立后使用。 &lt;br&gt; 
     * @param siteId 站点标识，UUID格式。 (required)
     * @param ids 待删除的有线认证模板。 (required)
     * @return DeleteAuthResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeleteAuthResponse deleteLswAuth(String siteId, LswAuthDeleteDto ids) throws ApiException {
        ApiResponse<DeleteAuthResponse> resp = deleteLswAuthWithHttpInfo(siteId, ids);
        return resp.getData();
    }

    /**
     * 删除站点下交换机有线认证模板配置
     * ## 典型场景 ##  批量删除站点下交换机有线认证模板。&lt;br&gt; ## 接口功能 ##  批量删除站点下交换机有线认证模板。 &lt;br&gt; ## 接口约束 ##  该接口支持租户下北向接口管理员访问，必须在用户会话建立后使用。 &lt;br&gt; 
     * @param siteId 站点标识，UUID格式。 (required)
     * @param ids 待删除的有线认证模板。 (required)
     * @return ApiResponse&lt;DeleteAuthResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeleteAuthResponse> deleteLswAuthWithHttpInfo(String siteId, LswAuthDeleteDto ids) throws ApiException {
        com.squareup.okhttp.Call call = deleteLswAuthValidateBeforeCall(siteId, ids, null, null);
        Type localVarReturnType = new TypeToken<DeleteAuthResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 删除站点下交换机有线认证模板配置 (asynchronously)
     * ## 典型场景 ##  批量删除站点下交换机有线认证模板。&lt;br&gt; ## 接口功能 ##  批量删除站点下交换机有线认证模板。 &lt;br&gt; ## 接口约束 ##  该接口支持租户下北向接口管理员访问，必须在用户会话建立后使用。 &lt;br&gt; 
     * @param siteId 站点标识，UUID格式。 (required)
     * @param ids 待删除的有线认证模板。 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteLswAuthAsync(String siteId, LswAuthDeleteDto ids, final ApiCallback<DeleteAuthResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteLswAuthValidateBeforeCall(siteId, ids, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeleteAuthResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLswAuth
     * @param siteId 站点标识，UUID格式。 (required)
     * @param profileName 认证模板名称，支持模糊查询。 (optional)
     * @param policyId 认证模板ID，UUID格式。 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLswAuthCall(String siteId, String profileName, String policyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v1/authconfigservice/accessconfig/lswauth/{siteId}/profiles"
            .replaceAll("\\{" + "siteId" + "\\}", apiClient.escapeString(siteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (profileName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "profileName", profileName));
        if (policyId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "policyId", policyId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLswAuthValidateBeforeCall(String siteId, String profileName, String policyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling getLswAuth(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getLswAuthCall(siteId, profileName, policyId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 查询站点下交换机有线认证模板配置
     * ## 典型场景 ##  查询指定站点内交换机有线认证模板列表。&lt;br&gt; ## 接口功能 ##  查询站点下交换机有线认证模板列表。 &lt;br&gt; ## 接口约束 ##  该接口支持租户下北向接口管理员访问，必须在用户会话建立后使用。 &lt;br&gt; 
     * @param siteId 站点标识，UUID格式。 (required)
     * @param profileName 认证模板名称，支持模糊查询。 (optional)
     * @param policyId 认证模板ID，UUID格式。 (optional)
     * @return LswAuthConfigResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LswAuthConfigResponse getLswAuth(String siteId, String profileName, String policyId) throws ApiException {
        ApiResponse<LswAuthConfigResponse> resp = getLswAuthWithHttpInfo(siteId, profileName, policyId);
        return resp.getData();
    }

    /**
     * 查询站点下交换机有线认证模板配置
     * ## 典型场景 ##  查询指定站点内交换机有线认证模板列表。&lt;br&gt; ## 接口功能 ##  查询站点下交换机有线认证模板列表。 &lt;br&gt; ## 接口约束 ##  该接口支持租户下北向接口管理员访问，必须在用户会话建立后使用。 &lt;br&gt; 
     * @param siteId 站点标识，UUID格式。 (required)
     * @param profileName 认证模板名称，支持模糊查询。 (optional)
     * @param policyId 认证模板ID，UUID格式。 (optional)
     * @return ApiResponse&lt;LswAuthConfigResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LswAuthConfigResponse> getLswAuthWithHttpInfo(String siteId, String profileName, String policyId) throws ApiException {
        com.squareup.okhttp.Call call = getLswAuthValidateBeforeCall(siteId, profileName, policyId, null, null);
        Type localVarReturnType = new TypeToken<LswAuthConfigResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 查询站点下交换机有线认证模板配置 (asynchronously)
     * ## 典型场景 ##  查询指定站点内交换机有线认证模板列表。&lt;br&gt; ## 接口功能 ##  查询站点下交换机有线认证模板列表。 &lt;br&gt; ## 接口约束 ##  该接口支持租户下北向接口管理员访问，必须在用户会话建立后使用。 &lt;br&gt; 
     * @param siteId 站点标识，UUID格式。 (required)
     * @param profileName 认证模板名称，支持模糊查询。 (optional)
     * @param policyId 认证模板ID，UUID格式。 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLswAuthAsync(String siteId, String profileName, String policyId, final ApiCallback<LswAuthConfigResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLswAuthValidateBeforeCall(siteId, profileName, policyId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LswAuthConfigResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateLswAuth
     * @param siteId 站点标识，UUID格式。 (required)
     * @param profileId 认证模板ID，UUID格式。 (required)
     * @param lswAuthConfig 有线认证配置。 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateLswAuthCall(String siteId, String profileId, LswAuthConfig lswAuthConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = lswAuthConfig;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v1/authconfigservice/accessconfig/lswauth/{siteId}/profiles/{profileId}"
            .replaceAll("\\{" + "siteId" + "\\}", apiClient.escapeString(siteId.toString()))
            .replaceAll("\\{" + "profileId" + "\\}", apiClient.escapeString(profileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateLswAuthValidateBeforeCall(String siteId, String profileId, LswAuthConfig lswAuthConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling updateLswAuth(Async)");
        }
        
        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling updateLswAuth(Async)");
        }
        
        // verify the required parameter 'lswAuthConfig' is set
        if (lswAuthConfig == null) {
            throw new ApiException("Missing the required parameter 'lswAuthConfig' when calling updateLswAuth(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateLswAuthCall(siteId, profileId, lswAuthConfig, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 修改站点下交换机有线认证模板配置
     * ## 典型场景 ##  修改站点下交换机有线认证模板。&lt;br&gt; ## 接口功能 ##  修改站点下交换机有线认证模板。 &lt;br&gt; ## 接口约束 ##  该接口支持租户下北向接口管理员访问，必须在用户会话建立后使用。 &lt;br&gt; 
     * @param siteId 站点标识，UUID格式。 (required)
     * @param profileId 认证模板ID，UUID格式。 (required)
     * @param lswAuthConfig 有线认证配置。 (required)
     * @return LswAuthConfigResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LswAuthConfigResponse updateLswAuth(String siteId, String profileId, LswAuthConfig lswAuthConfig) throws ApiException {
        ApiResponse<LswAuthConfigResponse> resp = updateLswAuthWithHttpInfo(siteId, profileId, lswAuthConfig);
        return resp.getData();
    }

    /**
     * 修改站点下交换机有线认证模板配置
     * ## 典型场景 ##  修改站点下交换机有线认证模板。&lt;br&gt; ## 接口功能 ##  修改站点下交换机有线认证模板。 &lt;br&gt; ## 接口约束 ##  该接口支持租户下北向接口管理员访问，必须在用户会话建立后使用。 &lt;br&gt; 
     * @param siteId 站点标识，UUID格式。 (required)
     * @param profileId 认证模板ID，UUID格式。 (required)
     * @param lswAuthConfig 有线认证配置。 (required)
     * @return ApiResponse&lt;LswAuthConfigResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LswAuthConfigResponse> updateLswAuthWithHttpInfo(String siteId, String profileId, LswAuthConfig lswAuthConfig) throws ApiException {
        com.squareup.okhttp.Call call = updateLswAuthValidateBeforeCall(siteId, profileId, lswAuthConfig, null, null);
        Type localVarReturnType = new TypeToken<LswAuthConfigResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 修改站点下交换机有线认证模板配置 (asynchronously)
     * ## 典型场景 ##  修改站点下交换机有线认证模板。&lt;br&gt; ## 接口功能 ##  修改站点下交换机有线认证模板。 &lt;br&gt; ## 接口约束 ##  该接口支持租户下北向接口管理员访问，必须在用户会话建立后使用。 &lt;br&gt; 
     * @param siteId 站点标识，UUID格式。 (required)
     * @param profileId 认证模板ID，UUID格式。 (required)
     * @param lswAuthConfig 有线认证配置。 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateLswAuthAsync(String siteId, String profileId, LswAuthConfig lswAuthConfig, final ApiCallback<LswAuthConfigResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateLswAuthValidateBeforeCall(siteId, profileId, lswAuthConfig, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LswAuthConfigResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateLswAuthInc
     * @param siteId 站点标识，UUID格式。 (required)
     * @param profileId 认证模板ID，UUID格式。 (required)
     * @param lswDeviceInfo 设备接口列表。 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateLswAuthIncCall(String siteId, String profileId, LswDeviceInfo lswDeviceInfo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = lswDeviceInfo;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v1/authconfigservice/accessconfig/lswauth/{siteId}/profiles/{profileId}/devices"
            .replaceAll("\\{" + "siteId" + "\\}", apiClient.escapeString(siteId.toString()))
            .replaceAll("\\{" + "profileId" + "\\}", apiClient.escapeString(profileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateLswAuthIncValidateBeforeCall(String siteId, String profileId, LswDeviceInfo lswDeviceInfo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling updateLswAuthInc(Async)");
        }
        
        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling updateLswAuthInc(Async)");
        }
        
        // verify the required parameter 'lswDeviceInfo' is set
        if (lswDeviceInfo == null) {
            throw new ApiException("Missing the required parameter 'lswDeviceInfo' when calling updateLswAuthInc(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateLswAuthIncCall(siteId, profileId, lswDeviceInfo, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 增量绑定交换机无线认证模板配置
     * ## 典型场景 ##  交换机无线认证配置增量绑定设备。&lt;br&gt; ## 接口功能 ##  交换机无线认证配置增量绑定设备。 &lt;br&gt; ## 接口约束 ##  该接口支持租户下北向接口管理员访问，必须在用户会话建立后使用。 &lt;br&gt; 
     * @param siteId 站点标识，UUID格式。 (required)
     * @param profileId 认证模板ID，UUID格式。 (required)
     * @param lswDeviceInfo 设备接口列表。 (required)
     * @return LswAuthConfigResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LswAuthConfigResponse updateLswAuthInc(String siteId, String profileId, LswDeviceInfo lswDeviceInfo) throws ApiException {
        ApiResponse<LswAuthConfigResponse> resp = updateLswAuthIncWithHttpInfo(siteId, profileId, lswDeviceInfo);
        return resp.getData();
    }

    /**
     * 增量绑定交换机无线认证模板配置
     * ## 典型场景 ##  交换机无线认证配置增量绑定设备。&lt;br&gt; ## 接口功能 ##  交换机无线认证配置增量绑定设备。 &lt;br&gt; ## 接口约束 ##  该接口支持租户下北向接口管理员访问，必须在用户会话建立后使用。 &lt;br&gt; 
     * @param siteId 站点标识，UUID格式。 (required)
     * @param profileId 认证模板ID，UUID格式。 (required)
     * @param lswDeviceInfo 设备接口列表。 (required)
     * @return ApiResponse&lt;LswAuthConfigResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LswAuthConfigResponse> updateLswAuthIncWithHttpInfo(String siteId, String profileId, LswDeviceInfo lswDeviceInfo) throws ApiException {
        com.squareup.okhttp.Call call = updateLswAuthIncValidateBeforeCall(siteId, profileId, lswDeviceInfo, null, null);
        Type localVarReturnType = new TypeToken<LswAuthConfigResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 增量绑定交换机无线认证模板配置 (asynchronously)
     * ## 典型场景 ##  交换机无线认证配置增量绑定设备。&lt;br&gt; ## 接口功能 ##  交换机无线认证配置增量绑定设备。 &lt;br&gt; ## 接口约束 ##  该接口支持租户下北向接口管理员访问，必须在用户会话建立后使用。 &lt;br&gt; 
     * @param siteId 站点标识，UUID格式。 (required)
     * @param profileId 认证模板ID，UUID格式。 (required)
     * @param lswDeviceInfo 设备接口列表。 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateLswAuthIncAsync(String siteId, String profileId, LswDeviceInfo lswDeviceInfo, final ApiCallback<LswAuthConfigResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateLswAuthIncValidateBeforeCall(siteId, profileId, lswDeviceInfo, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LswAuthConfigResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateLswAuthProInc
     * @param siteId 站点标识，UUID格式。 (required)
     * @param profileId 认证模板ID，UUID格式。 (required)
     * @param lswAuthConfigProfile 有线认证配置。 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateLswAuthProIncCall(String siteId, String profileId, LswAuthConfigProfile lswAuthConfigProfile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = lswAuthConfigProfile;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v1/authconfigservice/accessconfig/lswauth/{siteId}/profileInfos/{profileId}"
            .replaceAll("\\{" + "siteId" + "\\}", apiClient.escapeString(siteId.toString()))
            .replaceAll("\\{" + "profileId" + "\\}", apiClient.escapeString(profileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateLswAuthProIncValidateBeforeCall(String siteId, String profileId, LswAuthConfigProfile lswAuthConfigProfile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling updateLswAuthProInc(Async)");
        }
        
        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling updateLswAuthProInc(Async)");
        }
        
        // verify the required parameter 'lswAuthConfigProfile' is set
        if (lswAuthConfigProfile == null) {
            throw new ApiException("Missing the required parameter 'lswAuthConfigProfile' when calling updateLswAuthProInc(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateLswAuthProIncCall(siteId, profileId, lswAuthConfigProfile, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 修改站点交换机有线认证部分模板配置
     * ## 典型场景 ##  修改站点交换机有线认证部分模板配置。&lt;br&gt; ## 接口功能 ##  修改站点交换机有线认证部分模板配置。 &lt;br&gt; ## 接口约束 ##  该接口支持租户下北向接口管理员访问，必须在用户会话建立后使用。 &lt;br&gt; 
     * @param siteId 站点标识，UUID格式。 (required)
     * @param profileId 认证模板ID，UUID格式。 (required)
     * @param lswAuthConfigProfile 有线认证配置。 (required)
     * @return LswAuthConfigResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LswAuthConfigResponse updateLswAuthProInc(String siteId, String profileId, LswAuthConfigProfile lswAuthConfigProfile) throws ApiException {
        ApiResponse<LswAuthConfigResponse> resp = updateLswAuthProIncWithHttpInfo(siteId, profileId, lswAuthConfigProfile);
        return resp.getData();
    }

    /**
     * 修改站点交换机有线认证部分模板配置
     * ## 典型场景 ##  修改站点交换机有线认证部分模板配置。&lt;br&gt; ## 接口功能 ##  修改站点交换机有线认证部分模板配置。 &lt;br&gt; ## 接口约束 ##  该接口支持租户下北向接口管理员访问，必须在用户会话建立后使用。 &lt;br&gt; 
     * @param siteId 站点标识，UUID格式。 (required)
     * @param profileId 认证模板ID，UUID格式。 (required)
     * @param lswAuthConfigProfile 有线认证配置。 (required)
     * @return ApiResponse&lt;LswAuthConfigResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LswAuthConfigResponse> updateLswAuthProIncWithHttpInfo(String siteId, String profileId, LswAuthConfigProfile lswAuthConfigProfile) throws ApiException {
        com.squareup.okhttp.Call call = updateLswAuthProIncValidateBeforeCall(siteId, profileId, lswAuthConfigProfile, null, null);
        Type localVarReturnType = new TypeToken<LswAuthConfigResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 修改站点交换机有线认证部分模板配置 (asynchronously)
     * ## 典型场景 ##  修改站点交换机有线认证部分模板配置。&lt;br&gt; ## 接口功能 ##  修改站点交换机有线认证部分模板配置。 &lt;br&gt; ## 接口约束 ##  该接口支持租户下北向接口管理员访问，必须在用户会话建立后使用。 &lt;br&gt; 
     * @param siteId 站点标识，UUID格式。 (required)
     * @param profileId 认证模板ID，UUID格式。 (required)
     * @param lswAuthConfigProfile 有线认证配置。 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateLswAuthProIncAsync(String siteId, String profileId, LswAuthConfigProfile lswAuthConfigProfile, final ApiCallback<LswAuthConfigResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateLswAuthProIncValidateBeforeCall(siteId, profileId, lswAuthConfigProfile, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LswAuthConfigResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
