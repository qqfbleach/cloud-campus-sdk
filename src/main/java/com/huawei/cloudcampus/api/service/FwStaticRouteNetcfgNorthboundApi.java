/*
 * 防火墙设备静态路由配置
 * 防火墙设备静态路由配置第三方接口。
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.huawei.cloudcampus.api.service;

import com.huawei.cloudcampus.api.ApiCallback;
import com.huawei.cloudcampus.api.ApiClient;
import com.huawei.cloudcampus.api.ApiException;
import com.huawei.cloudcampus.api.ApiResponse;
import com.huawei.cloudcampus.api.Configuration;
import com.huawei.cloudcampus.api.Pair;
import com.huawei.cloudcampus.api.ProgressRequestBody;
import com.huawei.cloudcampus.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.huawei.cloudcampus.api.model.DeviceFwStaticRouteInfoDto;
import com.huawei.cloudcampus.api.model.FwRouteInfo;
import com.huawei.cloudcampus.api.model.FwStaticRouteDeleteDto;
import com.huawei.cloudcampus.api.model.FwStaticRouteDeleteResponseDto;
import com.huawei.cloudcampus.api.model.FwStaticRouteResponseDto;
import com.huawei.cloudcampus.api.model.GetFwStaticRouteResponseDto;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FwStaticRouteNetcfgNorthboundApi {
    private ApiClient apiClient;

    public FwStaticRouteNetcfgNorthboundApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FwStaticRouteNetcfgNorthboundApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createDeviceFwStaticRouteConfig
     * @param deviceId 设备标识，UUID格式。 (required)
     * @param deviceFwStaticRouteInfoDto 创建的防火墙设备静态路由配置。 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createDeviceFwStaticRouteConfigCall(String deviceId, FwRouteInfo deviceFwStaticRouteInfoDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = deviceFwStaticRouteInfoDto;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v1/networkservice/networkconfig/net/fwstaticroute/devices/{deviceId}/staticroute"
            .replaceAll("\\{" + "deviceId" + "\\}", apiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createDeviceFwStaticRouteConfigValidateBeforeCall(String deviceId, FwRouteInfo deviceFwStaticRouteInfoDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling createDeviceFwStaticRouteConfig(Async)");
        }
        
        // verify the required parameter 'deviceFwStaticRouteInfoDto' is set
        if (deviceFwStaticRouteInfoDto == null) {
            throw new ApiException("Missing the required parameter 'deviceFwStaticRouteInfoDto' when calling createDeviceFwStaticRouteConfig(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createDeviceFwStaticRouteConfigCall(deviceId, deviceFwStaticRouteInfoDto, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 创建防火墙设备静态路由配置
     * ## 典型场景 ##    提供创建防火墙设备静态路由配置的接口。 ## 接口功能 ##    创建防火墙设备静态路由配置。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。 
     * @param deviceId 设备标识，UUID格式。 (required)
     * @param deviceFwStaticRouteInfoDto 创建的防火墙设备静态路由配置。 (required)
     * @return FwStaticRouteResponseDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FwStaticRouteResponseDto createDeviceFwStaticRouteConfig(String deviceId, FwRouteInfo deviceFwStaticRouteInfoDto) throws ApiException {
        ApiResponse<FwStaticRouteResponseDto> resp = createDeviceFwStaticRouteConfigWithHttpInfo(deviceId, deviceFwStaticRouteInfoDto);
        return resp.getData();
    }

    /**
     * 创建防火墙设备静态路由配置
     * ## 典型场景 ##    提供创建防火墙设备静态路由配置的接口。 ## 接口功能 ##    创建防火墙设备静态路由配置。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。 
     * @param deviceId 设备标识，UUID格式。 (required)
     * @param deviceFwStaticRouteInfoDto 创建的防火墙设备静态路由配置。 (required)
     * @return ApiResponse&lt;FwStaticRouteResponseDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FwStaticRouteResponseDto> createDeviceFwStaticRouteConfigWithHttpInfo(String deviceId, FwRouteInfo deviceFwStaticRouteInfoDto) throws ApiException {
        com.squareup.okhttp.Call call = createDeviceFwStaticRouteConfigValidateBeforeCall(deviceId, deviceFwStaticRouteInfoDto, null, null);
        Type localVarReturnType = new TypeToken<FwStaticRouteResponseDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 创建防火墙设备静态路由配置 (asynchronously)
     * ## 典型场景 ##    提供创建防火墙设备静态路由配置的接口。 ## 接口功能 ##    创建防火墙设备静态路由配置。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。 
     * @param deviceId 设备标识，UUID格式。 (required)
     * @param deviceFwStaticRouteInfoDto 创建的防火墙设备静态路由配置。 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createDeviceFwStaticRouteConfigAsync(String deviceId, FwRouteInfo deviceFwStaticRouteInfoDto, final ApiCallback<FwStaticRouteResponseDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createDeviceFwStaticRouteConfigValidateBeforeCall(deviceId, deviceFwStaticRouteInfoDto, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FwStaticRouteResponseDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteDeviceFwStaticRouteConfig
     * @param deviceId 设备标识，UUID格式。 (required)
     * @param id 要删除的防火墙设备静态路由配置ID列表。 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteDeviceFwStaticRouteConfigCall(String deviceId, FwStaticRouteDeleteDto id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = id;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v1/networkservice/networkconfig/net/fwstaticroute/devices/{deviceId}/staticroute/action/batch-delete"
            .replaceAll("\\{" + "deviceId" + "\\}", apiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteDeviceFwStaticRouteConfigValidateBeforeCall(String deviceId, FwStaticRouteDeleteDto id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling deleteDeviceFwStaticRouteConfig(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteDeviceFwStaticRouteConfig(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteDeviceFwStaticRouteConfigCall(deviceId, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 删除防火墙设备静态路由配置
     * ## 典型场景 ##    提供删除防火墙设备静态路由配置的接口。 ## 接口功能 ##    删除防火墙设备静态路由配置。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。 
     * @param deviceId 设备标识，UUID格式。 (required)
     * @param id 要删除的防火墙设备静态路由配置ID列表。 (required)
     * @return FwStaticRouteDeleteResponseDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FwStaticRouteDeleteResponseDto deleteDeviceFwStaticRouteConfig(String deviceId, FwStaticRouteDeleteDto id) throws ApiException {
        ApiResponse<FwStaticRouteDeleteResponseDto> resp = deleteDeviceFwStaticRouteConfigWithHttpInfo(deviceId, id);
        return resp.getData();
    }

    /**
     * 删除防火墙设备静态路由配置
     * ## 典型场景 ##    提供删除防火墙设备静态路由配置的接口。 ## 接口功能 ##    删除防火墙设备静态路由配置。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。 
     * @param deviceId 设备标识，UUID格式。 (required)
     * @param id 要删除的防火墙设备静态路由配置ID列表。 (required)
     * @return ApiResponse&lt;FwStaticRouteDeleteResponseDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FwStaticRouteDeleteResponseDto> deleteDeviceFwStaticRouteConfigWithHttpInfo(String deviceId, FwStaticRouteDeleteDto id) throws ApiException {
        com.squareup.okhttp.Call call = deleteDeviceFwStaticRouteConfigValidateBeforeCall(deviceId, id, null, null);
        Type localVarReturnType = new TypeToken<FwStaticRouteDeleteResponseDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 删除防火墙设备静态路由配置 (asynchronously)
     * ## 典型场景 ##    提供删除防火墙设备静态路由配置的接口。 ## 接口功能 ##    删除防火墙设备静态路由配置。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。 
     * @param deviceId 设备标识，UUID格式。 (required)
     * @param id 要删除的防火墙设备静态路由配置ID列表。 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteDeviceFwStaticRouteConfigAsync(String deviceId, FwStaticRouteDeleteDto id, final ApiCallback<FwStaticRouteDeleteResponseDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDeviceFwStaticRouteConfigValidateBeforeCall(deviceId, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FwStaticRouteDeleteResponseDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDeviceFwStaticRouteConfig
     * @param deviceId 设备标识，UUID格式。 (required)
     * @param pageIndex 页面索引。 (required)
     * @param pageSize 每页显示记录数。 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDeviceFwStaticRouteConfigCall(String deviceId, Integer pageIndex, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v1/networkservice/networkconfig/net/fwstaticroute/devices/{deviceId}/staticroute"
            .replaceAll("\\{" + "deviceId" + "\\}", apiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (pageIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pageIndex", pageIndex));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pageSize", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDeviceFwStaticRouteConfigValidateBeforeCall(String deviceId, Integer pageIndex, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling getDeviceFwStaticRouteConfig(Async)");
        }
        
        // verify the required parameter 'pageIndex' is set
        if (pageIndex == null) {
            throw new ApiException("Missing the required parameter 'pageIndex' when calling getDeviceFwStaticRouteConfig(Async)");
        }
        
        // verify the required parameter 'pageSize' is set
        if (pageSize == null) {
            throw new ApiException("Missing the required parameter 'pageSize' when calling getDeviceFwStaticRouteConfig(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getDeviceFwStaticRouteConfigCall(deviceId, pageIndex, pageSize, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 查询防火墙设备静态路由配置
     * ## 典型场景 ##    提供查询防火墙设备静态路由配置的接口。 ## 接口功能 ##    查询防火墙设备静态路由配置。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。 
     * @param deviceId 设备标识，UUID格式。 (required)
     * @param pageIndex 页面索引。 (required)
     * @param pageSize 每页显示记录数。 (required)
     * @return GetFwStaticRouteResponseDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetFwStaticRouteResponseDto getDeviceFwStaticRouteConfig(String deviceId, Integer pageIndex, Integer pageSize) throws ApiException {
        ApiResponse<GetFwStaticRouteResponseDto> resp = getDeviceFwStaticRouteConfigWithHttpInfo(deviceId, pageIndex, pageSize);
        return resp.getData();
    }

    /**
     * 查询防火墙设备静态路由配置
     * ## 典型场景 ##    提供查询防火墙设备静态路由配置的接口。 ## 接口功能 ##    查询防火墙设备静态路由配置。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。 
     * @param deviceId 设备标识，UUID格式。 (required)
     * @param pageIndex 页面索引。 (required)
     * @param pageSize 每页显示记录数。 (required)
     * @return ApiResponse&lt;GetFwStaticRouteResponseDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetFwStaticRouteResponseDto> getDeviceFwStaticRouteConfigWithHttpInfo(String deviceId, Integer pageIndex, Integer pageSize) throws ApiException {
        com.squareup.okhttp.Call call = getDeviceFwStaticRouteConfigValidateBeforeCall(deviceId, pageIndex, pageSize, null, null);
        Type localVarReturnType = new TypeToken<GetFwStaticRouteResponseDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 查询防火墙设备静态路由配置 (asynchronously)
     * ## 典型场景 ##    提供查询防火墙设备静态路由配置的接口。 ## 接口功能 ##    查询防火墙设备静态路由配置。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。 
     * @param deviceId 设备标识，UUID格式。 (required)
     * @param pageIndex 页面索引。 (required)
     * @param pageSize 每页显示记录数。 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDeviceFwStaticRouteConfigAsync(String deviceId, Integer pageIndex, Integer pageSize, final ApiCallback<GetFwStaticRouteResponseDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDeviceFwStaticRouteConfigValidateBeforeCall(deviceId, pageIndex, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetFwStaticRouteResponseDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateDeviceFwStaticRouteConfig
     * @param deviceId 设备标识，UUID格式。 (required)
     * @param deviceFwStaticRouteInfoDto 修改的防火墙设备静态路由配置。 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateDeviceFwStaticRouteConfigCall(String deviceId, DeviceFwStaticRouteInfoDto deviceFwStaticRouteInfoDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = deviceFwStaticRouteInfoDto;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v1/networkservice/networkconfig/net/fwstaticroute/devices/{deviceId}/staticroute"
            .replaceAll("\\{" + "deviceId" + "\\}", apiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateDeviceFwStaticRouteConfigValidateBeforeCall(String deviceId, DeviceFwStaticRouteInfoDto deviceFwStaticRouteInfoDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling updateDeviceFwStaticRouteConfig(Async)");
        }
        
        // verify the required parameter 'deviceFwStaticRouteInfoDto' is set
        if (deviceFwStaticRouteInfoDto == null) {
            throw new ApiException("Missing the required parameter 'deviceFwStaticRouteInfoDto' when calling updateDeviceFwStaticRouteConfig(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateDeviceFwStaticRouteConfigCall(deviceId, deviceFwStaticRouteInfoDto, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 修改防火墙设备静态路由配置
     * ## 典型场景 ##    提供修改防火墙设备静态路由配置的接口。 ## 接口功能 ##    修改防火墙设备静态路由配置。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。 
     * @param deviceId 设备标识，UUID格式。 (required)
     * @param deviceFwStaticRouteInfoDto 修改的防火墙设备静态路由配置。 (required)
     * @return FwStaticRouteResponseDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FwStaticRouteResponseDto updateDeviceFwStaticRouteConfig(String deviceId, DeviceFwStaticRouteInfoDto deviceFwStaticRouteInfoDto) throws ApiException {
        ApiResponse<FwStaticRouteResponseDto> resp = updateDeviceFwStaticRouteConfigWithHttpInfo(deviceId, deviceFwStaticRouteInfoDto);
        return resp.getData();
    }

    /**
     * 修改防火墙设备静态路由配置
     * ## 典型场景 ##    提供修改防火墙设备静态路由配置的接口。 ## 接口功能 ##    修改防火墙设备静态路由配置。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。 
     * @param deviceId 设备标识，UUID格式。 (required)
     * @param deviceFwStaticRouteInfoDto 修改的防火墙设备静态路由配置。 (required)
     * @return ApiResponse&lt;FwStaticRouteResponseDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FwStaticRouteResponseDto> updateDeviceFwStaticRouteConfigWithHttpInfo(String deviceId, DeviceFwStaticRouteInfoDto deviceFwStaticRouteInfoDto) throws ApiException {
        com.squareup.okhttp.Call call = updateDeviceFwStaticRouteConfigValidateBeforeCall(deviceId, deviceFwStaticRouteInfoDto, null, null);
        Type localVarReturnType = new TypeToken<FwStaticRouteResponseDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 修改防火墙设备静态路由配置 (asynchronously)
     * ## 典型场景 ##    提供修改防火墙设备静态路由配置的接口。 ## 接口功能 ##    修改防火墙设备静态路由配置。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。 
     * @param deviceId 设备标识，UUID格式。 (required)
     * @param deviceFwStaticRouteInfoDto 修改的防火墙设备静态路由配置。 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateDeviceFwStaticRouteConfigAsync(String deviceId, DeviceFwStaticRouteInfoDto deviceFwStaticRouteInfoDto, final ApiCallback<FwStaticRouteResponseDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateDeviceFwStaticRouteConfigValidateBeforeCall(deviceId, deviceFwStaticRouteInfoDto, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FwStaticRouteResponseDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
