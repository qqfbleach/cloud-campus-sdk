/*
 * 控制器支持第三方系统通过API接口获取用户上下线信息
 * 控制器支持第三方系统通过API接口获取用户上下线信息 
 *
 * OpenAPI spec version: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.huawei.cloudcampus.api.service;

import com.huawei.cloudcampus.api.ApiCallback;
import com.huawei.cloudcampus.api.ApiClient;
import com.huawei.cloudcampus.api.ApiException;
import com.huawei.cloudcampus.api.ApiResponse;
import com.huawei.cloudcampus.api.Configuration;
import com.huawei.cloudcampus.api.Pair;
import com.huawei.cloudcampus.api.ProgressRequestBody;
import com.huawei.cloudcampus.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AuthenticationLogApi {
    private ApiClient apiClient;

    public AuthenticationLogApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AuthenticationLogApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getAuthenticationLogInfoList
     * @param startRowKey 起始rowkey（首次查询为空字符串，分页查询时取上一次查询结果endRowKey的值）。 (required)
     * @param siteId 站点ID（使用站点查询接口获取站点ID），格式为UUID。 (required)
     * @param authResult 认证结果（0---成功，1---失败）。 (required)
     * @param lowerOnlineTime 用户上线起始时间（接口调用方格林威治时间戳）。 (required)
     * @param upperOnlineTime 用户上线的结束时间（接口调用方格林威治时间戳）。查询时不允许查询时间跨度大于7天的数据。 (required)
     * @param userName 用户名（短信认证则为手机号码）。 (optional)
     * @param terminalMac 接入终端MAC地址（格式：AA-BB-CC-DD-EE-FF）。 (optional)
     * @param userType 用户类型（0---普通用户。1---短信注册用户。2---自注册用户。4---社交媒体用户。5---微信用户。6---Passcode用户。7---三方用户。20---普通访客。64---匿名用户）。 (optional)
     * @param accessSSID 接入SSID名称。 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAuthenticationLogInfoListCall(String startRowKey, String siteId, String authResult, Long lowerOnlineTime, Long upperOnlineTime, String userName, String terminalMac, String userType, String accessSSID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v1/accountservice/user/authenticationlog";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (startRowKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "startRowKey", startRowKey));
        if (siteId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "siteId", siteId));
        if (authResult != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "authResult", authResult));
        if (lowerOnlineTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "lowerOnlineTime", lowerOnlineTime));
        if (upperOnlineTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "upperOnlineTime", upperOnlineTime));
        if (userName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "userName", userName));
        if (terminalMac != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "terminalMac", terminalMac));
        if (userType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "userType", userType));
        if (accessSSID != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "accessSSID", accessSSID));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAuthenticationLogInfoListValidateBeforeCall(String startRowKey, String siteId, String authResult, Long lowerOnlineTime, Long upperOnlineTime, String userName, String terminalMac, String userType, String accessSSID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'startRowKey' is set
        if (startRowKey == null) {
            throw new ApiException("Missing the required parameter 'startRowKey' when calling getAuthenticationLogInfoList(Async)");
        }
        
        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling getAuthenticationLogInfoList(Async)");
        }
        
        // verify the required parameter 'authResult' is set
        if (authResult == null) {
            throw new ApiException("Missing the required parameter 'authResult' when calling getAuthenticationLogInfoList(Async)");
        }
        
        // verify the required parameter 'lowerOnlineTime' is set
        if (lowerOnlineTime == null) {
            throw new ApiException("Missing the required parameter 'lowerOnlineTime' when calling getAuthenticationLogInfoList(Async)");
        }
        
        // verify the required parameter 'upperOnlineTime' is set
        if (upperOnlineTime == null) {
            throw new ApiException("Missing the required parameter 'upperOnlineTime' when calling getAuthenticationLogInfoList(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getAuthenticationLogInfoListCall(startRowKey, siteId, authResult, lowerOnlineTime, upperOnlineTime, userName, terminalMac, userType, accessSSID, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 查询用户上下线日志信息
     * ## 典型场景 ##  提供租户查询指定时间内用户上下线信息，按分页返回查询结果。例如：查询8月1日至8月7号这段时间哪些用户上线过。 ## 接口功能 ##  根据租户ID查询指定时间内用户上下线信息，每次最多返回101条数据，不足101条时表示当前数据已查询完；等于101条表示后续还有数据。下一页查询以上一次查询返回的endRowKey的值作为本次查询条件startRowKey的值。 ## 接口约束 ##  该接口支持北向管理员访问，必须在用户会话建立后使用。 
     * @param startRowKey 起始rowkey（首次查询为空字符串，分页查询时取上一次查询结果endRowKey的值）。 (required)
     * @param siteId 站点ID（使用站点查询接口获取站点ID），格式为UUID。 (required)
     * @param authResult 认证结果（0---成功，1---失败）。 (required)
     * @param lowerOnlineTime 用户上线起始时间（接口调用方格林威治时间戳）。 (required)
     * @param upperOnlineTime 用户上线的结束时间（接口调用方格林威治时间戳）。查询时不允许查询时间跨度大于7天的数据。 (required)
     * @param userName 用户名（短信认证则为手机号码）。 (optional)
     * @param terminalMac 接入终端MAC地址（格式：AA-BB-CC-DD-EE-FF）。 (optional)
     * @param userType 用户类型（0---普通用户。1---短信注册用户。2---自注册用户。4---社交媒体用户。5---微信用户。6---Passcode用户。7---三方用户。20---普通访客。64---匿名用户）。 (optional)
     * @param accessSSID 接入SSID名称。 (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getAuthenticationLogInfoList(String startRowKey, String siteId, String authResult, Long lowerOnlineTime, Long upperOnlineTime, String userName, String terminalMac, String userType, String accessSSID) throws ApiException {
        getAuthenticationLogInfoListWithHttpInfo(startRowKey, siteId, authResult, lowerOnlineTime, upperOnlineTime, userName, terminalMac, userType, accessSSID);
    }

    /**
     * 查询用户上下线日志信息
     * ## 典型场景 ##  提供租户查询指定时间内用户上下线信息，按分页返回查询结果。例如：查询8月1日至8月7号这段时间哪些用户上线过。 ## 接口功能 ##  根据租户ID查询指定时间内用户上下线信息，每次最多返回101条数据，不足101条时表示当前数据已查询完；等于101条表示后续还有数据。下一页查询以上一次查询返回的endRowKey的值作为本次查询条件startRowKey的值。 ## 接口约束 ##  该接口支持北向管理员访问，必须在用户会话建立后使用。 
     * @param startRowKey 起始rowkey（首次查询为空字符串，分页查询时取上一次查询结果endRowKey的值）。 (required)
     * @param siteId 站点ID（使用站点查询接口获取站点ID），格式为UUID。 (required)
     * @param authResult 认证结果（0---成功，1---失败）。 (required)
     * @param lowerOnlineTime 用户上线起始时间（接口调用方格林威治时间戳）。 (required)
     * @param upperOnlineTime 用户上线的结束时间（接口调用方格林威治时间戳）。查询时不允许查询时间跨度大于7天的数据。 (required)
     * @param userName 用户名（短信认证则为手机号码）。 (optional)
     * @param terminalMac 接入终端MAC地址（格式：AA-BB-CC-DD-EE-FF）。 (optional)
     * @param userType 用户类型（0---普通用户。1---短信注册用户。2---自注册用户。4---社交媒体用户。5---微信用户。6---Passcode用户。7---三方用户。20---普通访客。64---匿名用户）。 (optional)
     * @param accessSSID 接入SSID名称。 (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getAuthenticationLogInfoListWithHttpInfo(String startRowKey, String siteId, String authResult, Long lowerOnlineTime, Long upperOnlineTime, String userName, String terminalMac, String userType, String accessSSID) throws ApiException {
        com.squareup.okhttp.Call call = getAuthenticationLogInfoListValidateBeforeCall(startRowKey, siteId, authResult, lowerOnlineTime, upperOnlineTime, userName, terminalMac, userType, accessSSID, null, null);
        return apiClient.execute(call);
    }

    /**
     * 查询用户上下线日志信息 (asynchronously)
     * ## 典型场景 ##  提供租户查询指定时间内用户上下线信息，按分页返回查询结果。例如：查询8月1日至8月7号这段时间哪些用户上线过。 ## 接口功能 ##  根据租户ID查询指定时间内用户上下线信息，每次最多返回101条数据，不足101条时表示当前数据已查询完；等于101条表示后续还有数据。下一页查询以上一次查询返回的endRowKey的值作为本次查询条件startRowKey的值。 ## 接口约束 ##  该接口支持北向管理员访问，必须在用户会话建立后使用。 
     * @param startRowKey 起始rowkey（首次查询为空字符串，分页查询时取上一次查询结果endRowKey的值）。 (required)
     * @param siteId 站点ID（使用站点查询接口获取站点ID），格式为UUID。 (required)
     * @param authResult 认证结果（0---成功，1---失败）。 (required)
     * @param lowerOnlineTime 用户上线起始时间（接口调用方格林威治时间戳）。 (required)
     * @param upperOnlineTime 用户上线的结束时间（接口调用方格林威治时间戳）。查询时不允许查询时间跨度大于7天的数据。 (required)
     * @param userName 用户名（短信认证则为手机号码）。 (optional)
     * @param terminalMac 接入终端MAC地址（格式：AA-BB-CC-DD-EE-FF）。 (optional)
     * @param userType 用户类型（0---普通用户。1---短信注册用户。2---自注册用户。4---社交媒体用户。5---微信用户。6---Passcode用户。7---三方用户。20---普通访客。64---匿名用户）。 (optional)
     * @param accessSSID 接入SSID名称。 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAuthenticationLogInfoListAsync(String startRowKey, String siteId, String authResult, Long lowerOnlineTime, Long upperOnlineTime, String userName, String terminalMac, String userType, String accessSSID, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAuthenticationLogInfoListValidateBeforeCall(startRowKey, siteId, authResult, lowerOnlineTime, upperOnlineTime, userName, terminalMac, userType, accessSSID, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
