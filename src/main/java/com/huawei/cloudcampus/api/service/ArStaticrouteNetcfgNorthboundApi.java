/*
 * 路由器设备静态路由配置
 * 路由器设备静态路由配置第三方接口。
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.huawei.cloudcampus.api.service;

import com.huawei.cloudcampus.api.ApiCallback;
import com.huawei.cloudcampus.api.ApiClient;
import com.huawei.cloudcampus.api.ApiException;
import com.huawei.cloudcampus.api.ApiResponse;
import com.huawei.cloudcampus.api.Configuration;
import com.huawei.cloudcampus.api.Pair;
import com.huawei.cloudcampus.api.ProgressRequestBody;
import com.huawei.cloudcampus.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.huawei.cloudcampus.api.model.ArStaticrouteDeleteDto;
import com.huawei.cloudcampus.api.model.ArStaticrouteDeleteResponseDto;
import com.huawei.cloudcampus.api.model.ArStaticrouteResponseDto;
import com.huawei.cloudcampus.api.model.DeviceArStaticrouteInfoDto;
import com.huawei.cloudcampus.api.model.GetArStaticrouteResponseDto;
import com.huawei.cloudcampus.api.model.RouteInfo;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ArStaticrouteNetcfgNorthboundApi {
    private ApiClient apiClient;

    public ArStaticrouteNetcfgNorthboundApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ArStaticrouteNetcfgNorthboundApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createDeviceArStaticrouteConfig
     * @param deviceId 设备标识，UUID格式。 (required)
     * @param deviceArStaticrouteInfoDto 创建的路由器设备静态路由配置。 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createDeviceArStaticrouteConfigCall(String deviceId, RouteInfo deviceArStaticrouteInfoDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = deviceArStaticrouteInfoDto;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v1/networkservice/networkconfig/net/arstaticroute/devices/{deviceId}/staticroute"
            .replaceAll("\\{" + "deviceId" + "\\}", apiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createDeviceArStaticrouteConfigValidateBeforeCall(String deviceId, RouteInfo deviceArStaticrouteInfoDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling createDeviceArStaticrouteConfig(Async)");
        }
        
        // verify the required parameter 'deviceArStaticrouteInfoDto' is set
        if (deviceArStaticrouteInfoDto == null) {
            throw new ApiException("Missing the required parameter 'deviceArStaticrouteInfoDto' when calling createDeviceArStaticrouteConfig(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createDeviceArStaticrouteConfigCall(deviceId, deviceArStaticrouteInfoDto, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 创建路由器设备静态路由配置
     * ## 典型场景 ##    提供创建路由器设备静态路由配置的接口。 ## 接口功能 ##    创建路由器设备静态路由配置。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。 
     * @param deviceId 设备标识，UUID格式。 (required)
     * @param deviceArStaticrouteInfoDto 创建的路由器设备静态路由配置。 (required)
     * @return ArStaticrouteResponseDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ArStaticrouteResponseDto createDeviceArStaticrouteConfig(String deviceId, RouteInfo deviceArStaticrouteInfoDto) throws ApiException {
        ApiResponse<ArStaticrouteResponseDto> resp = createDeviceArStaticrouteConfigWithHttpInfo(deviceId, deviceArStaticrouteInfoDto);
        return resp.getData();
    }

    /**
     * 创建路由器设备静态路由配置
     * ## 典型场景 ##    提供创建路由器设备静态路由配置的接口。 ## 接口功能 ##    创建路由器设备静态路由配置。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。 
     * @param deviceId 设备标识，UUID格式。 (required)
     * @param deviceArStaticrouteInfoDto 创建的路由器设备静态路由配置。 (required)
     * @return ApiResponse&lt;ArStaticrouteResponseDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ArStaticrouteResponseDto> createDeviceArStaticrouteConfigWithHttpInfo(String deviceId, RouteInfo deviceArStaticrouteInfoDto) throws ApiException {
        com.squareup.okhttp.Call call = createDeviceArStaticrouteConfigValidateBeforeCall(deviceId, deviceArStaticrouteInfoDto, null, null);
        Type localVarReturnType = new TypeToken<ArStaticrouteResponseDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 创建路由器设备静态路由配置 (asynchronously)
     * ## 典型场景 ##    提供创建路由器设备静态路由配置的接口。 ## 接口功能 ##    创建路由器设备静态路由配置。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。 
     * @param deviceId 设备标识，UUID格式。 (required)
     * @param deviceArStaticrouteInfoDto 创建的路由器设备静态路由配置。 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createDeviceArStaticrouteConfigAsync(String deviceId, RouteInfo deviceArStaticrouteInfoDto, final ApiCallback<ArStaticrouteResponseDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createDeviceArStaticrouteConfigValidateBeforeCall(deviceId, deviceArStaticrouteInfoDto, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ArStaticrouteResponseDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteDeviceArStaticrouteConfig
     * @param deviceId 设备标识，UUID格式。 (required)
     * @param id 要删除的路由器设备静态路由配置ID列表。 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteDeviceArStaticrouteConfigCall(String deviceId, ArStaticrouteDeleteDto id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = id;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v1/networkservice/networkconfig/net/arstaticroute/devices/{deviceId}/staticroute/action/batch-delete"
            .replaceAll("\\{" + "deviceId" + "\\}", apiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteDeviceArStaticrouteConfigValidateBeforeCall(String deviceId, ArStaticrouteDeleteDto id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling deleteDeviceArStaticrouteConfig(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteDeviceArStaticrouteConfig(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteDeviceArStaticrouteConfigCall(deviceId, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 删除路由器设备静态路由配置
     * ## 典型场景 ##    提供删除路由器设备静态路由配置的接口。 ## 接口功能 ##    删除路由器设备静态路由配置。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。 
     * @param deviceId 设备标识，UUID格式。 (required)
     * @param id 要删除的路由器设备静态路由配置ID列表。 (required)
     * @return ArStaticrouteDeleteResponseDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ArStaticrouteDeleteResponseDto deleteDeviceArStaticrouteConfig(String deviceId, ArStaticrouteDeleteDto id) throws ApiException {
        ApiResponse<ArStaticrouteDeleteResponseDto> resp = deleteDeviceArStaticrouteConfigWithHttpInfo(deviceId, id);
        return resp.getData();
    }

    /**
     * 删除路由器设备静态路由配置
     * ## 典型场景 ##    提供删除路由器设备静态路由配置的接口。 ## 接口功能 ##    删除路由器设备静态路由配置。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。 
     * @param deviceId 设备标识，UUID格式。 (required)
     * @param id 要删除的路由器设备静态路由配置ID列表。 (required)
     * @return ApiResponse&lt;ArStaticrouteDeleteResponseDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ArStaticrouteDeleteResponseDto> deleteDeviceArStaticrouteConfigWithHttpInfo(String deviceId, ArStaticrouteDeleteDto id) throws ApiException {
        com.squareup.okhttp.Call call = deleteDeviceArStaticrouteConfigValidateBeforeCall(deviceId, id, null, null);
        Type localVarReturnType = new TypeToken<ArStaticrouteDeleteResponseDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 删除路由器设备静态路由配置 (asynchronously)
     * ## 典型场景 ##    提供删除路由器设备静态路由配置的接口。 ## 接口功能 ##    删除路由器设备静态路由配置。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。 
     * @param deviceId 设备标识，UUID格式。 (required)
     * @param id 要删除的路由器设备静态路由配置ID列表。 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteDeviceArStaticrouteConfigAsync(String deviceId, ArStaticrouteDeleteDto id, final ApiCallback<ArStaticrouteDeleteResponseDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDeviceArStaticrouteConfigValidateBeforeCall(deviceId, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ArStaticrouteDeleteResponseDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDeviceArStaticrouteConfig
     * @param deviceId 设备标识，UUID格式。 (required)
     * @param pageSize 每页显示记录数。 (required)
     * @param pageIndex 页面索引。 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDeviceArStaticrouteConfigCall(String deviceId, Integer pageSize, Integer pageIndex, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v1/networkservice/networkconfig/net/arstaticroute/devices/{deviceId}/staticroute"
            .replaceAll("\\{" + "deviceId" + "\\}", apiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (pageIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pageIndex", pageIndex));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pageSize", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDeviceArStaticrouteConfigValidateBeforeCall(String deviceId, Integer pageSize, Integer pageIndex, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling getDeviceArStaticrouteConfig(Async)");
        }
        
        // verify the required parameter 'pageSize' is set
        if (pageSize == null) {
            throw new ApiException("Missing the required parameter 'pageSize' when calling getDeviceArStaticrouteConfig(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getDeviceArStaticrouteConfigCall(deviceId, pageSize, pageIndex, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 查询路由器设备静态路由配置
     * ## 典型场景 ##    提供查询路由器设备静态路由配置的接口。 ## 接口功能 ##    查询路由器设备静态路由配置。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。 
     * @param deviceId 设备标识，UUID格式。 (required)
     * @param pageSize 每页显示记录数。 (required)
     * @param pageIndex 页面索引。 (optional)
     * @return GetArStaticrouteResponseDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetArStaticrouteResponseDto getDeviceArStaticrouteConfig(String deviceId, Integer pageSize, Integer pageIndex) throws ApiException {
        ApiResponse<GetArStaticrouteResponseDto> resp = getDeviceArStaticrouteConfigWithHttpInfo(deviceId, pageSize, pageIndex);
        return resp.getData();
    }

    /**
     * 查询路由器设备静态路由配置
     * ## 典型场景 ##    提供查询路由器设备静态路由配置的接口。 ## 接口功能 ##    查询路由器设备静态路由配置。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。 
     * @param deviceId 设备标识，UUID格式。 (required)
     * @param pageSize 每页显示记录数。 (required)
     * @param pageIndex 页面索引。 (optional)
     * @return ApiResponse&lt;GetArStaticrouteResponseDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetArStaticrouteResponseDto> getDeviceArStaticrouteConfigWithHttpInfo(String deviceId, Integer pageSize, Integer pageIndex) throws ApiException {
        com.squareup.okhttp.Call call = getDeviceArStaticrouteConfigValidateBeforeCall(deviceId, pageSize, pageIndex, null, null);
        Type localVarReturnType = new TypeToken<GetArStaticrouteResponseDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 查询路由器设备静态路由配置 (asynchronously)
     * ## 典型场景 ##    提供查询路由器设备静态路由配置的接口。 ## 接口功能 ##    查询路由器设备静态路由配置。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。 
     * @param deviceId 设备标识，UUID格式。 (required)
     * @param pageSize 每页显示记录数。 (required)
     * @param pageIndex 页面索引。 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDeviceArStaticrouteConfigAsync(String deviceId, Integer pageSize, Integer pageIndex, final ApiCallback<GetArStaticrouteResponseDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDeviceArStaticrouteConfigValidateBeforeCall(deviceId, pageSize, pageIndex, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetArStaticrouteResponseDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateDeviceArStaticrouteConfig
     * @param deviceId 设备标识，UUID格式。 (required)
     * @param deviceArStaticrouteInfoDto 修改的路由器设备静态路由配置。 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateDeviceArStaticrouteConfigCall(String deviceId, DeviceArStaticrouteInfoDto deviceArStaticrouteInfoDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = deviceArStaticrouteInfoDto;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v1/networkservice/networkconfig/net/arstaticroute/devices/{deviceId}/staticroute"
            .replaceAll("\\{" + "deviceId" + "\\}", apiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateDeviceArStaticrouteConfigValidateBeforeCall(String deviceId, DeviceArStaticrouteInfoDto deviceArStaticrouteInfoDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling updateDeviceArStaticrouteConfig(Async)");
        }
        
        // verify the required parameter 'deviceArStaticrouteInfoDto' is set
        if (deviceArStaticrouteInfoDto == null) {
            throw new ApiException("Missing the required parameter 'deviceArStaticrouteInfoDto' when calling updateDeviceArStaticrouteConfig(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateDeviceArStaticrouteConfigCall(deviceId, deviceArStaticrouteInfoDto, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 修改路由器设备静态路由配置
     * ## 典型场景 ##    提供修改路由器设备静态路由配置的接口。 ## 接口功能 ##    修改路由器设备静态路由配置。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。 
     * @param deviceId 设备标识，UUID格式。 (required)
     * @param deviceArStaticrouteInfoDto 修改的路由器设备静态路由配置。 (required)
     * @return ArStaticrouteResponseDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ArStaticrouteResponseDto updateDeviceArStaticrouteConfig(String deviceId, DeviceArStaticrouteInfoDto deviceArStaticrouteInfoDto) throws ApiException {
        ApiResponse<ArStaticrouteResponseDto> resp = updateDeviceArStaticrouteConfigWithHttpInfo(deviceId, deviceArStaticrouteInfoDto);
        return resp.getData();
    }

    /**
     * 修改路由器设备静态路由配置
     * ## 典型场景 ##    提供修改路由器设备静态路由配置的接口。 ## 接口功能 ##    修改路由器设备静态路由配置。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。 
     * @param deviceId 设备标识，UUID格式。 (required)
     * @param deviceArStaticrouteInfoDto 修改的路由器设备静态路由配置。 (required)
     * @return ApiResponse&lt;ArStaticrouteResponseDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ArStaticrouteResponseDto> updateDeviceArStaticrouteConfigWithHttpInfo(String deviceId, DeviceArStaticrouteInfoDto deviceArStaticrouteInfoDto) throws ApiException {
        com.squareup.okhttp.Call call = updateDeviceArStaticrouteConfigValidateBeforeCall(deviceId, deviceArStaticrouteInfoDto, null, null);
        Type localVarReturnType = new TypeToken<ArStaticrouteResponseDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 修改路由器设备静态路由配置 (asynchronously)
     * ## 典型场景 ##    提供修改路由器设备静态路由配置的接口。 ## 接口功能 ##    修改路由器设备静态路由配置。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。 
     * @param deviceId 设备标识，UUID格式。 (required)
     * @param deviceArStaticrouteInfoDto 修改的路由器设备静态路由配置。 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateDeviceArStaticrouteConfigAsync(String deviceId, DeviceArStaticrouteInfoDto deviceArStaticrouteInfoDto, final ApiCallback<ArStaticrouteResponseDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateDeviceArStaticrouteConfigValidateBeforeCall(deviceId, deviceArStaticrouteInfoDto, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ArStaticrouteResponseDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
