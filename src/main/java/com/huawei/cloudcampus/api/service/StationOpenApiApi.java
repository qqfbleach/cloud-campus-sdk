/*
 * 终端用户列表信息查询
 * · 站点维度终端用户列表查询 · 站点维度TopN终端流量数据查询 · 设备维度下终端用户信息查询 
 *
 * OpenAPI spec version: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.huawei.cloudcampus.api.service;

import com.huawei.cloudcampus.api.ApiCallback;
import com.huawei.cloudcampus.api.ApiClient;
import com.huawei.cloudcampus.api.ApiException;
import com.huawei.cloudcampus.api.ApiResponse;
import com.huawei.cloudcampus.api.Configuration;
import com.huawei.cloudcampus.api.Pair;
import com.huawei.cloudcampus.api.ProgressRequestBody;
import com.huawei.cloudcampus.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.huawei.cloudcampus.api.model.StationDataResp;
import com.huawei.cloudcampus.api.model.TrafficStatisticDataResp;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StationOpenApiApi {
    private ApiClient apiClient;

    public StationOpenApiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StationOpenApiApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for queryDeviceStationInfo
     * @param deviceId 设备ID。 (required)
     * @param pageIndex 分页查询的页码。 (required)
     * @param pageSize 分页查询每页数量。 (required)
     * @param status 用户在线状态，online---在线、offline---离线，不填代表查询全部状态。 (optional)
     * @param terminalMac 终端MAC，需要符合mac地址的格式，例如B0:06:00:0A:69:F5，需要区分大小写字母。 (optional)
     * @param terminalIP 终端IP，需要符合IP地址的格式，例如192.168.1.2。 (optional)
     * @param ssid WiFi名。 (optional)
     * @param sortKey 排序列，所有支持accessTime/accessType/account/ap/authType/channel/cumulativeTraffic/downwardSpeed/dualFrequency/frequencyBand/hostName/mode/onlineStatus/onlineTime/packageLossRate/retransRate/rssi/sendPackageSpeed/signalNoiseRatio/ssid/stickyTags/terminalIP/terminalMac/timeStamp/upwardSpeed/vlan均支持排序。如：+accessTime:按accesstime升序，-accessTime:按accessTime降序。 (optional)
     * @param account 用户名。 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call queryDeviceStationInfoCall(UUID deviceId, Integer pageIndex, Integer pageSize, String status, String terminalMac, String terminalIP, String ssid, String sortKey, String account, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v1/performanceservice/station/client/device/{deviceId}"
            .replaceAll("\\{" + "deviceId" + "\\}", apiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (pageIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pageIndex", pageIndex));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pageSize", pageSize));
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "status", status));
        if (terminalMac != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "terminalMac", terminalMac));
        if (terminalIP != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "terminalIP", terminalIP));
        if (ssid != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "ssid", ssid));
        if (sortKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "sortKey", sortKey));
        if (account != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "account", account));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call queryDeviceStationInfoValidateBeforeCall(UUID deviceId, Integer pageIndex, Integer pageSize, String status, String terminalMac, String terminalIP, String ssid, String sortKey, String account, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling queryDeviceStationInfo(Async)");
        }
        
        // verify the required parameter 'pageIndex' is set
        if (pageIndex == null) {
            throw new ApiException("Missing the required parameter 'pageIndex' when calling queryDeviceStationInfo(Async)");
        }
        
        // verify the required parameter 'pageSize' is set
        if (pageSize == null) {
            throw new ApiException("Missing the required parameter 'pageSize' when calling queryDeviceStationInfo(Async)");
        }
        
        
        com.squareup.okhttp.Call call = queryDeviceStationInfoCall(deviceId, pageIndex, pageSize, status, terminalMac, terminalIP, ssid, sortKey, account, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 查询设备维度下终端用户信息
     * ## 典型场景 ##    设备维度下终端用户信息查询接口。 ## 接口功能 ##    基于单设备查询用户列表。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。 
     * @param deviceId 设备ID。 (required)
     * @param pageIndex 分页查询的页码。 (required)
     * @param pageSize 分页查询每页数量。 (required)
     * @param status 用户在线状态，online---在线、offline---离线，不填代表查询全部状态。 (optional)
     * @param terminalMac 终端MAC，需要符合mac地址的格式，例如B0:06:00:0A:69:F5，需要区分大小写字母。 (optional)
     * @param terminalIP 终端IP，需要符合IP地址的格式，例如192.168.1.2。 (optional)
     * @param ssid WiFi名。 (optional)
     * @param sortKey 排序列，所有支持accessTime/accessType/account/ap/authType/channel/cumulativeTraffic/downwardSpeed/dualFrequency/frequencyBand/hostName/mode/onlineStatus/onlineTime/packageLossRate/retransRate/rssi/sendPackageSpeed/signalNoiseRatio/ssid/stickyTags/terminalIP/terminalMac/timeStamp/upwardSpeed/vlan均支持排序。如：+accessTime:按accesstime升序，-accessTime:按accessTime降序。 (optional)
     * @param account 用户名。 (optional)
     * @return StationDataResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StationDataResp queryDeviceStationInfo(UUID deviceId, Integer pageIndex, Integer pageSize, String status, String terminalMac, String terminalIP, String ssid, String sortKey, String account) throws ApiException {
        ApiResponse<StationDataResp> resp = queryDeviceStationInfoWithHttpInfo(deviceId, pageIndex, pageSize, status, terminalMac, terminalIP, ssid, sortKey, account);
        return resp.getData();
    }

    /**
     * 查询设备维度下终端用户信息
     * ## 典型场景 ##    设备维度下终端用户信息查询接口。 ## 接口功能 ##    基于单设备查询用户列表。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。 
     * @param deviceId 设备ID。 (required)
     * @param pageIndex 分页查询的页码。 (required)
     * @param pageSize 分页查询每页数量。 (required)
     * @param status 用户在线状态，online---在线、offline---离线，不填代表查询全部状态。 (optional)
     * @param terminalMac 终端MAC，需要符合mac地址的格式，例如B0:06:00:0A:69:F5，需要区分大小写字母。 (optional)
     * @param terminalIP 终端IP，需要符合IP地址的格式，例如192.168.1.2。 (optional)
     * @param ssid WiFi名。 (optional)
     * @param sortKey 排序列，所有支持accessTime/accessType/account/ap/authType/channel/cumulativeTraffic/downwardSpeed/dualFrequency/frequencyBand/hostName/mode/onlineStatus/onlineTime/packageLossRate/retransRate/rssi/sendPackageSpeed/signalNoiseRatio/ssid/stickyTags/terminalIP/terminalMac/timeStamp/upwardSpeed/vlan均支持排序。如：+accessTime:按accesstime升序，-accessTime:按accessTime降序。 (optional)
     * @param account 用户名。 (optional)
     * @return ApiResponse&lt;StationDataResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StationDataResp> queryDeviceStationInfoWithHttpInfo(UUID deviceId, Integer pageIndex, Integer pageSize, String status, String terminalMac, String terminalIP, String ssid, String sortKey, String account) throws ApiException {
        com.squareup.okhttp.Call call = queryDeviceStationInfoValidateBeforeCall(deviceId, pageIndex, pageSize, status, terminalMac, terminalIP, ssid, sortKey, account, null, null);
        Type localVarReturnType = new TypeToken<StationDataResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 查询设备维度下终端用户信息 (asynchronously)
     * ## 典型场景 ##    设备维度下终端用户信息查询接口。 ## 接口功能 ##    基于单设备查询用户列表。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。 
     * @param deviceId 设备ID。 (required)
     * @param pageIndex 分页查询的页码。 (required)
     * @param pageSize 分页查询每页数量。 (required)
     * @param status 用户在线状态，online---在线、offline---离线，不填代表查询全部状态。 (optional)
     * @param terminalMac 终端MAC，需要符合mac地址的格式，例如B0:06:00:0A:69:F5，需要区分大小写字母。 (optional)
     * @param terminalIP 终端IP，需要符合IP地址的格式，例如192.168.1.2。 (optional)
     * @param ssid WiFi名。 (optional)
     * @param sortKey 排序列，所有支持accessTime/accessType/account/ap/authType/channel/cumulativeTraffic/downwardSpeed/dualFrequency/frequencyBand/hostName/mode/onlineStatus/onlineTime/packageLossRate/retransRate/rssi/sendPackageSpeed/signalNoiseRatio/ssid/stickyTags/terminalIP/terminalMac/timeStamp/upwardSpeed/vlan均支持排序。如：+accessTime:按accesstime升序，-accessTime:按accessTime降序。 (optional)
     * @param account 用户名。 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call queryDeviceStationInfoAsync(UUID deviceId, Integer pageIndex, Integer pageSize, String status, String terminalMac, String terminalIP, String ssid, String sortKey, String account, final ApiCallback<StationDataResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = queryDeviceStationInfoValidateBeforeCall(deviceId, pageIndex, pageSize, status, terminalMac, terminalIP, ssid, sortKey, account, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StationDataResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for querySiteStationInfo
     * @param siteId 站点ID。 (required)
     * @param pageIndex 分页查询的页码。 (required)
     * @param pageSize 分页查询每页数量。 (required)
     * @param status 用户在线状态，online---在线、offline---离线，不填代表查询全部状态。 (optional)
     * @param terminalMac 终端MAC，需要符合MAC地址的格式，例如B0:06:00:0A:69:F5，需要区分大小写字母。 (optional)
     * @param terminalIP 终端IP，需要符合IP地址的格式，例如192.168.1.2。 (optional)
     * @param ssid SSID名称。 (optional)
     * @param sortKey 排序字段名称以及排序方式。支持按如下字段之一排序：accessTime/accessType/account/deviceName/authType/channel/cumulativeTraffic/downwardSpeed/dualFrequency/frequencyBand/hostName/mode/onlineStatus/onlineTime/packageLossRate/retransRate/rssi/sendPackageSpeed/signalNoiseRatio/ssid/stickyTags/terminalIP/terminalMac/timeStamp/upwardSpeed/vlan。如：+accessTime:按accesstime升序，-accessTime:按accessTime降序。 (optional)
     * @param account 用户名称。 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call querySiteStationInfoCall(UUID siteId, Integer pageIndex, Integer pageSize, String status, String terminalMac, String terminalIP, String ssid, String sortKey, String account, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v1/performanceservice/station/client/site/{siteId}"
            .replaceAll("\\{" + "siteId" + "\\}", apiClient.escapeString(siteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "status", status));
        if (terminalMac != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "terminalMac", terminalMac));
        if (terminalIP != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "terminalIP", terminalIP));
        if (ssid != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "ssid", ssid));
        if (sortKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "sortKey", sortKey));
        if (account != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "account", account));
        if (pageIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pageIndex", pageIndex));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pageSize", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call querySiteStationInfoValidateBeforeCall(UUID siteId, Integer pageIndex, Integer pageSize, String status, String terminalMac, String terminalIP, String ssid, String sortKey, String account, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling querySiteStationInfo(Async)");
        }
        
        // verify the required parameter 'pageIndex' is set
        if (pageIndex == null) {
            throw new ApiException("Missing the required parameter 'pageIndex' when calling querySiteStationInfo(Async)");
        }
        
        // verify the required parameter 'pageSize' is set
        if (pageSize == null) {
            throw new ApiException("Missing the required parameter 'pageSize' when calling querySiteStationInfo(Async)");
        }
        
        
        com.squareup.okhttp.Call call = querySiteStationInfoCall(siteId, pageIndex, pageSize, status, terminalMac, terminalIP, ssid, sortKey, account, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 查询站点维度下终端用户信息
     * ## 典型场景 ##    提供站点维度查询终端用户信息列表的接口。 ## 接口功能 ##    基于站点查询终端用户列表。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。 
     * @param siteId 站点ID。 (required)
     * @param pageIndex 分页查询的页码。 (required)
     * @param pageSize 分页查询每页数量。 (required)
     * @param status 用户在线状态，online---在线、offline---离线，不填代表查询全部状态。 (optional)
     * @param terminalMac 终端MAC，需要符合MAC地址的格式，例如B0:06:00:0A:69:F5，需要区分大小写字母。 (optional)
     * @param terminalIP 终端IP，需要符合IP地址的格式，例如192.168.1.2。 (optional)
     * @param ssid SSID名称。 (optional)
     * @param sortKey 排序字段名称以及排序方式。支持按如下字段之一排序：accessTime/accessType/account/deviceName/authType/channel/cumulativeTraffic/downwardSpeed/dualFrequency/frequencyBand/hostName/mode/onlineStatus/onlineTime/packageLossRate/retransRate/rssi/sendPackageSpeed/signalNoiseRatio/ssid/stickyTags/terminalIP/terminalMac/timeStamp/upwardSpeed/vlan。如：+accessTime:按accesstime升序，-accessTime:按accessTime降序。 (optional)
     * @param account 用户名称。 (optional)
     * @return StationDataResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StationDataResp querySiteStationInfo(UUID siteId, Integer pageIndex, Integer pageSize, String status, String terminalMac, String terminalIP, String ssid, String sortKey, String account) throws ApiException {
        ApiResponse<StationDataResp> resp = querySiteStationInfoWithHttpInfo(siteId, pageIndex, pageSize, status, terminalMac, terminalIP, ssid, sortKey, account);
        return resp.getData();
    }

    /**
     * 查询站点维度下终端用户信息
     * ## 典型场景 ##    提供站点维度查询终端用户信息列表的接口。 ## 接口功能 ##    基于站点查询终端用户列表。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。 
     * @param siteId 站点ID。 (required)
     * @param pageIndex 分页查询的页码。 (required)
     * @param pageSize 分页查询每页数量。 (required)
     * @param status 用户在线状态，online---在线、offline---离线，不填代表查询全部状态。 (optional)
     * @param terminalMac 终端MAC，需要符合MAC地址的格式，例如B0:06:00:0A:69:F5，需要区分大小写字母。 (optional)
     * @param terminalIP 终端IP，需要符合IP地址的格式，例如192.168.1.2。 (optional)
     * @param ssid SSID名称。 (optional)
     * @param sortKey 排序字段名称以及排序方式。支持按如下字段之一排序：accessTime/accessType/account/deviceName/authType/channel/cumulativeTraffic/downwardSpeed/dualFrequency/frequencyBand/hostName/mode/onlineStatus/onlineTime/packageLossRate/retransRate/rssi/sendPackageSpeed/signalNoiseRatio/ssid/stickyTags/terminalIP/terminalMac/timeStamp/upwardSpeed/vlan。如：+accessTime:按accesstime升序，-accessTime:按accessTime降序。 (optional)
     * @param account 用户名称。 (optional)
     * @return ApiResponse&lt;StationDataResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StationDataResp> querySiteStationInfoWithHttpInfo(UUID siteId, Integer pageIndex, Integer pageSize, String status, String terminalMac, String terminalIP, String ssid, String sortKey, String account) throws ApiException {
        com.squareup.okhttp.Call call = querySiteStationInfoValidateBeforeCall(siteId, pageIndex, pageSize, status, terminalMac, terminalIP, ssid, sortKey, account, null, null);
        Type localVarReturnType = new TypeToken<StationDataResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 查询站点维度下终端用户信息 (asynchronously)
     * ## 典型场景 ##    提供站点维度查询终端用户信息列表的接口。 ## 接口功能 ##    基于站点查询终端用户列表。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。 
     * @param siteId 站点ID。 (required)
     * @param pageIndex 分页查询的页码。 (required)
     * @param pageSize 分页查询每页数量。 (required)
     * @param status 用户在线状态，online---在线、offline---离线，不填代表查询全部状态。 (optional)
     * @param terminalMac 终端MAC，需要符合MAC地址的格式，例如B0:06:00:0A:69:F5，需要区分大小写字母。 (optional)
     * @param terminalIP 终端IP，需要符合IP地址的格式，例如192.168.1.2。 (optional)
     * @param ssid SSID名称。 (optional)
     * @param sortKey 排序字段名称以及排序方式。支持按如下字段之一排序：accessTime/accessType/account/deviceName/authType/channel/cumulativeTraffic/downwardSpeed/dualFrequency/frequencyBand/hostName/mode/onlineStatus/onlineTime/packageLossRate/retransRate/rssi/sendPackageSpeed/signalNoiseRatio/ssid/stickyTags/terminalIP/terminalMac/timeStamp/upwardSpeed/vlan。如：+accessTime:按accesstime升序，-accessTime:按accessTime降序。 (optional)
     * @param account 用户名称。 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call querySiteStationInfoAsync(UUID siteId, Integer pageIndex, Integer pageSize, String status, String terminalMac, String terminalIP, String ssid, String sortKey, String account, final ApiCallback<StationDataResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = querySiteStationInfoValidateBeforeCall(siteId, pageIndex, pageSize, status, terminalMac, terminalIP, ssid, sortKey, account, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StationDataResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for queryTrafficStatisticInfo
     * @param siteId 站点ID。 (required)
     * @param deviceType 查询过滤的设备类型，AP---AP设备、FW---FW设备、AC---AC（Fit AP）设备、ALL---所有设备。 (required)
     * @param timeDimension 统计周期，day---天、week---周、month---月、year---年。 (required)
     * @param top top数据个数，支持0、5、10、15、20。0代表查询所有终端流量。 (required)
     * @param beginTime 起始格林威治时间（时间精度对应到秒）。 (required)
     * @param endTime 结束格林威治时间（时间精度对应到秒）。 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call queryTrafficStatisticInfoCall(UUID siteId, String deviceType, String timeDimension, Integer top, Long beginTime, Long endTime, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v1/performanceservice/station/traffic/statistic/site/{siteId}"
            .replaceAll("\\{" + "siteId" + "\\}", apiClient.escapeString(siteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (deviceType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "deviceType", deviceType));
        if (timeDimension != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "timeDimension", timeDimension));
        if (top != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "top", top));
        if (beginTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "beginTime", beginTime));
        if (endTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "endTime", endTime));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call queryTrafficStatisticInfoValidateBeforeCall(UUID siteId, String deviceType, String timeDimension, Integer top, Long beginTime, Long endTime, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling queryTrafficStatisticInfo(Async)");
        }
        
        // verify the required parameter 'deviceType' is set
        if (deviceType == null) {
            throw new ApiException("Missing the required parameter 'deviceType' when calling queryTrafficStatisticInfo(Async)");
        }
        
        // verify the required parameter 'timeDimension' is set
        if (timeDimension == null) {
            throw new ApiException("Missing the required parameter 'timeDimension' when calling queryTrafficStatisticInfo(Async)");
        }
        
        // verify the required parameter 'top' is set
        if (top == null) {
            throw new ApiException("Missing the required parameter 'top' when calling queryTrafficStatisticInfo(Async)");
        }
        
        // verify the required parameter 'beginTime' is set
        if (beginTime == null) {
            throw new ApiException("Missing the required parameter 'beginTime' when calling queryTrafficStatisticInfo(Async)");
        }
        
        // verify the required parameter 'endTime' is set
        if (endTime == null) {
            throw new ApiException("Missing the required parameter 'endTime' when calling queryTrafficStatisticInfo(Async)");
        }
        
        
        com.squareup.okhttp.Call call = queryTrafficStatisticInfoCall(siteId, deviceType, timeDimension, top, beginTime, endTime, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 查询站点维度下TopN终端流量数据
     * ## 典型场景 ##    提供查询指定站点的按照终端流量大小的Top N终端数据。 ## 接口功能 ##    基于站点查询TopN终端流量数据。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。 
     * @param siteId 站点ID。 (required)
     * @param deviceType 查询过滤的设备类型，AP---AP设备、FW---FW设备、AC---AC（Fit AP）设备、ALL---所有设备。 (required)
     * @param timeDimension 统计周期，day---天、week---周、month---月、year---年。 (required)
     * @param top top数据个数，支持0、5、10、15、20。0代表查询所有终端流量。 (required)
     * @param beginTime 起始格林威治时间（时间精度对应到秒）。 (required)
     * @param endTime 结束格林威治时间（时间精度对应到秒）。 (required)
     * @return TrafficStatisticDataResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TrafficStatisticDataResp queryTrafficStatisticInfo(UUID siteId, String deviceType, String timeDimension, Integer top, Long beginTime, Long endTime) throws ApiException {
        ApiResponse<TrafficStatisticDataResp> resp = queryTrafficStatisticInfoWithHttpInfo(siteId, deviceType, timeDimension, top, beginTime, endTime);
        return resp.getData();
    }

    /**
     * 查询站点维度下TopN终端流量数据
     * ## 典型场景 ##    提供查询指定站点的按照终端流量大小的Top N终端数据。 ## 接口功能 ##    基于站点查询TopN终端流量数据。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。 
     * @param siteId 站点ID。 (required)
     * @param deviceType 查询过滤的设备类型，AP---AP设备、FW---FW设备、AC---AC（Fit AP）设备、ALL---所有设备。 (required)
     * @param timeDimension 统计周期，day---天、week---周、month---月、year---年。 (required)
     * @param top top数据个数，支持0、5、10、15、20。0代表查询所有终端流量。 (required)
     * @param beginTime 起始格林威治时间（时间精度对应到秒）。 (required)
     * @param endTime 结束格林威治时间（时间精度对应到秒）。 (required)
     * @return ApiResponse&lt;TrafficStatisticDataResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TrafficStatisticDataResp> queryTrafficStatisticInfoWithHttpInfo(UUID siteId, String deviceType, String timeDimension, Integer top, Long beginTime, Long endTime) throws ApiException {
        com.squareup.okhttp.Call call = queryTrafficStatisticInfoValidateBeforeCall(siteId, deviceType, timeDimension, top, beginTime, endTime, null, null);
        Type localVarReturnType = new TypeToken<TrafficStatisticDataResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 查询站点维度下TopN终端流量数据 (asynchronously)
     * ## 典型场景 ##    提供查询指定站点的按照终端流量大小的Top N终端数据。 ## 接口功能 ##    基于站点查询TopN终端流量数据。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。 
     * @param siteId 站点ID。 (required)
     * @param deviceType 查询过滤的设备类型，AP---AP设备、FW---FW设备、AC---AC（Fit AP）设备、ALL---所有设备。 (required)
     * @param timeDimension 统计周期，day---天、week---周、month---月、year---年。 (required)
     * @param top top数据个数，支持0、5、10、15、20。0代表查询所有终端流量。 (required)
     * @param beginTime 起始格林威治时间（时间精度对应到秒）。 (required)
     * @param endTime 结束格林威治时间（时间精度对应到秒）。 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call queryTrafficStatisticInfoAsync(UUID siteId, String deviceType, String timeDimension, Integer top, Long beginTime, Long endTime, final ApiCallback<TrafficStatisticDataResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = queryTrafficStatisticInfoValidateBeforeCall(siteId, deviceType, timeDimension, top, beginTime, endTime, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TrafficStatisticDataResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
