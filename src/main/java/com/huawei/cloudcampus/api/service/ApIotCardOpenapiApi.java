/*
 * AP网口IOT插卡管理
 * AP网口IOT插卡查询及操作接口。 场景：对AP网口IOT插卡查询及操作的第三方接口。
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.huawei.cloudcampus.api.service;

import com.huawei.cloudcampus.api.ApiCallback;
import com.huawei.cloudcampus.api.ApiClient;
import com.huawei.cloudcampus.api.ApiException;
import com.huawei.cloudcampus.api.ApiResponse;
import com.huawei.cloudcampus.api.Configuration;
import com.huawei.cloudcampus.api.Pair;
import com.huawei.cloudcampus.api.ProgressRequestBody;
import com.huawei.cloudcampus.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.huawei.cloudcampus.api.model.CardOperationOutputDto;
import com.huawei.cloudcampus.api.model.EthernetCardOutputDto;
import com.huawei.cloudcampus.api.model.IotCardOperationDto;
import com.huawei.cloudcampus.api.model.OpenApIotCommandIn;
import com.huawei.cloudcampus.api.model.OpenApIotCommandOut;
import com.huawei.cloudcampus.api.model.QueryCmdResultOut;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ApIotCardOpenapiApi {
    private ApiClient apiClient;

    public ApIotCardOpenapiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ApIotCardOpenapiApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for cardOperation
     * @param requestDto IOT插卡信息。 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cardOperationCall(IotCardOperationDto requestDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = requestDto;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v1/oamservice/apiot/card/operation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cardOperationValidateBeforeCall(IotCardOperationDto requestDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'requestDto' is set
        if (requestDto == null) {
            throw new ApiException("Missing the required parameter 'requestDto' when calling cardOperation(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cardOperationCall(requestDto, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 操作AP网口IOT插卡
     * ## 典型场景 ##   操作插卡。 ## 接口功能 ##   对插卡进行重启、重置网络配置等操作。 ## 接口约束 ##   该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
     * @param requestDto IOT插卡信息。 (required)
     * @return CardOperationOutputDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CardOperationOutputDto cardOperation(IotCardOperationDto requestDto) throws ApiException {
        ApiResponse<CardOperationOutputDto> resp = cardOperationWithHttpInfo(requestDto);
        return resp.getData();
    }

    /**
     * 操作AP网口IOT插卡
     * ## 典型场景 ##   操作插卡。 ## 接口功能 ##   对插卡进行重启、重置网络配置等操作。 ## 接口约束 ##   该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
     * @param requestDto IOT插卡信息。 (required)
     * @return ApiResponse&lt;CardOperationOutputDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CardOperationOutputDto> cardOperationWithHttpInfo(IotCardOperationDto requestDto) throws ApiException {
        com.squareup.okhttp.Call call = cardOperationValidateBeforeCall(requestDto, null, null);
        Type localVarReturnType = new TypeToken<CardOperationOutputDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 操作AP网口IOT插卡 (asynchronously)
     * ## 典型场景 ##   操作插卡。 ## 接口功能 ##   对插卡进行重启、重置网络配置等操作。 ## 接口约束 ##   该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
     * @param requestDto IOT插卡信息。 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cardOperationAsync(IotCardOperationDto requestDto, final ApiCallback<CardOperationOutputDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cardOperationValidateBeforeCall(requestDto, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CardOperationOutputDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for execIotCommand
     * @param apIotOpenCommanIn IOT命令下发结构体 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call execIotCommandCall(OpenApIotCommandIn apIotOpenCommanIn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = apIotOpenCommanIn;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v1/oamservice/apiot/cmd";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call execIotCommandValidateBeforeCall(OpenApIotCommandIn apIotOpenCommanIn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apIotOpenCommanIn' is set
        if (apIotOpenCommanIn == null) {
            throw new ApiException("Missing the required parameter 'apIotOpenCommanIn' when calling execIotCommand(Async)");
        }
        
        
        com.squareup.okhttp.Call call = execIotCommandCall(apIotOpenCommanIn, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 给IOT插卡下命令
     * ## 典型场景 ##   给IOT插卡下命令。 ## 接口功能 ##   对单个或者多个插卡进行下发CMD命令等操作。 ## 接口约束 ##   该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
     * @param apIotOpenCommanIn IOT命令下发结构体 (required)
     * @return OpenApIotCommandOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OpenApIotCommandOut execIotCommand(OpenApIotCommandIn apIotOpenCommanIn) throws ApiException {
        ApiResponse<OpenApIotCommandOut> resp = execIotCommandWithHttpInfo(apIotOpenCommanIn);
        return resp.getData();
    }

    /**
     * 给IOT插卡下命令
     * ## 典型场景 ##   给IOT插卡下命令。 ## 接口功能 ##   对单个或者多个插卡进行下发CMD命令等操作。 ## 接口约束 ##   该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
     * @param apIotOpenCommanIn IOT命令下发结构体 (required)
     * @return ApiResponse&lt;OpenApIotCommandOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OpenApIotCommandOut> execIotCommandWithHttpInfo(OpenApIotCommandIn apIotOpenCommanIn) throws ApiException {
        com.squareup.okhttp.Call call = execIotCommandValidateBeforeCall(apIotOpenCommanIn, null, null);
        Type localVarReturnType = new TypeToken<OpenApIotCommandOut>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 给IOT插卡下命令 (asynchronously)
     * ## 典型场景 ##   给IOT插卡下命令。 ## 接口功能 ##   对单个或者多个插卡进行下发CMD命令等操作。 ## 接口约束 ##   该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
     * @param apIotOpenCommanIn IOT命令下发结构体 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call execIotCommandAsync(OpenApIotCommandIn apIotOpenCommanIn, final ApiCallback<OpenApIotCommandOut> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = execIotCommandValidateBeforeCall(apIotOpenCommanIn, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OpenApIotCommandOut>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for queryEthernetCardList
     * @param siteId 站点ID，UUID格式。 (required)
     * @param keyword 搜索关键字。匹配字段：设备ESN，是否必填：否。 (optional)
     * @param pageSize 每页展示数量。是否必填：否。 (optional)
     * @param pageIndex 页面索引。是否必填：否。 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call queryEthernetCardListCall(String siteId, String keyword, Integer pageSize, Integer pageIndex, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v1/oamservice/apiot/ethernetcardlist/sites/{siteId}"
            .replaceAll("\\{" + "siteId" + "\\}", apiClient.escapeString(siteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (keyword != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "keyword", keyword));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pageSize", pageSize));
        if (pageIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pageIndex", pageIndex));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call queryEthernetCardListValidateBeforeCall(String siteId, String keyword, Integer pageSize, Integer pageIndex, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling queryEthernetCardList(Async)");
        }
        
        
        com.squareup.okhttp.Call call = queryEthernetCardListCall(siteId, keyword, pageSize, pageIndex, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 查询AP网口IOT插卡
     * ## 典型场景 ##   查询AP网口IOT插卡列表。 ## 接口功能 ##   查询AP网口IOT插卡列表。 ## 接口约束 ##   该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
     * @param siteId 站点ID，UUID格式。 (required)
     * @param keyword 搜索关键字。匹配字段：设备ESN，是否必填：否。 (optional)
     * @param pageSize 每页展示数量。是否必填：否。 (optional)
     * @param pageIndex 页面索引。是否必填：否。 (optional)
     * @return EthernetCardOutputDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EthernetCardOutputDto queryEthernetCardList(String siteId, String keyword, Integer pageSize, Integer pageIndex) throws ApiException {
        ApiResponse<EthernetCardOutputDto> resp = queryEthernetCardListWithHttpInfo(siteId, keyword, pageSize, pageIndex);
        return resp.getData();
    }

    /**
     * 查询AP网口IOT插卡
     * ## 典型场景 ##   查询AP网口IOT插卡列表。 ## 接口功能 ##   查询AP网口IOT插卡列表。 ## 接口约束 ##   该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
     * @param siteId 站点ID，UUID格式。 (required)
     * @param keyword 搜索关键字。匹配字段：设备ESN，是否必填：否。 (optional)
     * @param pageSize 每页展示数量。是否必填：否。 (optional)
     * @param pageIndex 页面索引。是否必填：否。 (optional)
     * @return ApiResponse&lt;EthernetCardOutputDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EthernetCardOutputDto> queryEthernetCardListWithHttpInfo(String siteId, String keyword, Integer pageSize, Integer pageIndex) throws ApiException {
        com.squareup.okhttp.Call call = queryEthernetCardListValidateBeforeCall(siteId, keyword, pageSize, pageIndex, null, null);
        Type localVarReturnType = new TypeToken<EthernetCardOutputDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 查询AP网口IOT插卡 (asynchronously)
     * ## 典型场景 ##   查询AP网口IOT插卡列表。 ## 接口功能 ##   查询AP网口IOT插卡列表。 ## 接口约束 ##   该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
     * @param siteId 站点ID，UUID格式。 (required)
     * @param keyword 搜索关键字。匹配字段：设备ESN，是否必填：否。 (optional)
     * @param pageSize 每页展示数量。是否必填：否。 (optional)
     * @param pageIndex 页面索引。是否必填：否。 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call queryEthernetCardListAsync(String siteId, String keyword, Integer pageSize, Integer pageIndex, final ApiCallback<EthernetCardOutputDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = queryEthernetCardListValidateBeforeCall(siteId, keyword, pageSize, pageIndex, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EthernetCardOutputDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for queryIotCommandResult
     * @param siteId 站点ID，UUID格式。 (required)
     * @param pageSize 每页展示数量。 (required)
     * @param pageIndex 页面索引。 (required)
     * @param keyword 搜索关键字。模糊匹配字段：设备名称、设备ESN。 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call queryIotCommandResultCall(String siteId, Integer pageSize, Integer pageIndex, String keyword, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v1/oamservice/apiot/cmd/result/{siteId}"
            .replaceAll("\\{" + "siteId" + "\\}", apiClient.escapeString(siteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (keyword != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "keyword", keyword));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pageSize", pageSize));
        if (pageIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pageIndex", pageIndex));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call queryIotCommandResultValidateBeforeCall(String siteId, Integer pageSize, Integer pageIndex, String keyword, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling queryIotCommandResult(Async)");
        }
        
        // verify the required parameter 'pageSize' is set
        if (pageSize == null) {
            throw new ApiException("Missing the required parameter 'pageSize' when calling queryIotCommandResult(Async)");
        }
        
        // verify the required parameter 'pageIndex' is set
        if (pageIndex == null) {
            throw new ApiException("Missing the required parameter 'pageIndex' when calling queryIotCommandResult(Async)");
        }
        
        
        com.squareup.okhttp.Call call = queryIotCommandResultCall(siteId, pageSize, pageIndex, keyword, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 查询AP IOT命令下发的状态
     * ## 典型场景 ##   查询AP IOT命令下发的状态。 ## 接口功能 ##   查询AP IOT命令下发的状态，只返回最新一次下发结果。 ## 接口约束 ##   该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
     * @param siteId 站点ID，UUID格式。 (required)
     * @param pageSize 每页展示数量。 (required)
     * @param pageIndex 页面索引。 (required)
     * @param keyword 搜索关键字。模糊匹配字段：设备名称、设备ESN。 (optional)
     * @return QueryCmdResultOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public QueryCmdResultOut queryIotCommandResult(String siteId, Integer pageSize, Integer pageIndex, String keyword) throws ApiException {
        ApiResponse<QueryCmdResultOut> resp = queryIotCommandResultWithHttpInfo(siteId, pageSize, pageIndex, keyword);
        return resp.getData();
    }

    /**
     * 查询AP IOT命令下发的状态
     * ## 典型场景 ##   查询AP IOT命令下发的状态。 ## 接口功能 ##   查询AP IOT命令下发的状态，只返回最新一次下发结果。 ## 接口约束 ##   该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
     * @param siteId 站点ID，UUID格式。 (required)
     * @param pageSize 每页展示数量。 (required)
     * @param pageIndex 页面索引。 (required)
     * @param keyword 搜索关键字。模糊匹配字段：设备名称、设备ESN。 (optional)
     * @return ApiResponse&lt;QueryCmdResultOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<QueryCmdResultOut> queryIotCommandResultWithHttpInfo(String siteId, Integer pageSize, Integer pageIndex, String keyword) throws ApiException {
        com.squareup.okhttp.Call call = queryIotCommandResultValidateBeforeCall(siteId, pageSize, pageIndex, keyword, null, null);
        Type localVarReturnType = new TypeToken<QueryCmdResultOut>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 查询AP IOT命令下发的状态 (asynchronously)
     * ## 典型场景 ##   查询AP IOT命令下发的状态。 ## 接口功能 ##   查询AP IOT命令下发的状态，只返回最新一次下发结果。 ## 接口约束 ##   该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
     * @param siteId 站点ID，UUID格式。 (required)
     * @param pageSize 每页展示数量。 (required)
     * @param pageIndex 页面索引。 (required)
     * @param keyword 搜索关键字。模糊匹配字段：设备名称、设备ESN。 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call queryIotCommandResultAsync(String siteId, Integer pageSize, Integer pageIndex, String keyword, final ApiCallback<QueryCmdResultOut> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = queryIotCommandResultValidateBeforeCall(siteId, pageSize, pageIndex, keyword, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<QueryCmdResultOut>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
