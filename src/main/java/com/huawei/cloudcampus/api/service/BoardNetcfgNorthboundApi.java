/*
 * 单板管理
 * 单板管理第三方接口。
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.huawei.cloudcampus.api.service;

import com.huawei.cloudcampus.api.ApiCallback;
import com.huawei.cloudcampus.api.ApiClient;
import com.huawei.cloudcampus.api.ApiException;
import com.huawei.cloudcampus.api.ApiResponse;
import com.huawei.cloudcampus.api.Configuration;
import com.huawei.cloudcampus.api.Pair;
import com.huawei.cloudcampus.api.ProgressRequestBody;
import com.huawei.cloudcampus.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.huawei.cloudcampus.api.model.BoardConfigDto;
import com.huawei.cloudcampus.api.model.BoardDeleteDto;
import com.huawei.cloudcampus.api.model.BoardDeleteResponseDto;
import com.huawei.cloudcampus.api.model.ConfigResponseDto;
import com.huawei.cloudcampus.api.model.GetBoardResponseDto;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BoardNetcfgNorthboundApi {
    private ApiClient apiClient;

    public BoardNetcfgNorthboundApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BoardNetcfgNorthboundApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createDeviceBoardConfig
     * @param deviceId 设备标识，UUID格式。 (required)
     * @param boardConfigDto 单板配置信息。 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createDeviceBoardConfigCall(UUID deviceId, BoardConfigDto boardConfigDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = boardConfigDto;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v1/networkservice/networkconfig/net/board/devices/{deviceId}/boards"
            .replaceAll("\\{" + "deviceId" + "\\}", apiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createDeviceBoardConfigValidateBeforeCall(UUID deviceId, BoardConfigDto boardConfigDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling createDeviceBoardConfig(Async)");
        }
        
        // verify the required parameter 'boardConfigDto' is set
        if (boardConfigDto == null) {
            throw new ApiException("Missing the required parameter 'boardConfigDto' when calling createDeviceBoardConfig(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createDeviceBoardConfigCall(deviceId, boardConfigDto, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 添加单板配置
     * ## 典型场景 ##    提供配置单板参数的接口。 ## 接口功能 ##    配置交换机单板。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。 
     * @param deviceId 设备标识，UUID格式。 (required)
     * @param boardConfigDto 单板配置信息。 (required)
     * @return ConfigResponseDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConfigResponseDto createDeviceBoardConfig(UUID deviceId, BoardConfigDto boardConfigDto) throws ApiException {
        ApiResponse<ConfigResponseDto> resp = createDeviceBoardConfigWithHttpInfo(deviceId, boardConfigDto);
        return resp.getData();
    }

    /**
     * 添加单板配置
     * ## 典型场景 ##    提供配置单板参数的接口。 ## 接口功能 ##    配置交换机单板。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。 
     * @param deviceId 设备标识，UUID格式。 (required)
     * @param boardConfigDto 单板配置信息。 (required)
     * @return ApiResponse&lt;ConfigResponseDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConfigResponseDto> createDeviceBoardConfigWithHttpInfo(UUID deviceId, BoardConfigDto boardConfigDto) throws ApiException {
        com.squareup.okhttp.Call call = createDeviceBoardConfigValidateBeforeCall(deviceId, boardConfigDto, null, null);
        Type localVarReturnType = new TypeToken<ConfigResponseDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 添加单板配置 (asynchronously)
     * ## 典型场景 ##    提供配置单板参数的接口。 ## 接口功能 ##    配置交换机单板。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。 
     * @param deviceId 设备标识，UUID格式。 (required)
     * @param boardConfigDto 单板配置信息。 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createDeviceBoardConfigAsync(UUID deviceId, BoardConfigDto boardConfigDto, final ApiCallback<ConfigResponseDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createDeviceBoardConfigValidateBeforeCall(deviceId, boardConfigDto, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConfigResponseDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteDeviceBoardConfig
     * @param deviceId 设备标识，UUID格式。 (required)
     * @param slot 待删除的槽位单板。 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteDeviceBoardConfigCall(UUID deviceId, BoardDeleteDto slot, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = slot;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v1/networkservice/networkconfig/net/board/devices/{deviceId}/boards/action/batch-delete"
            .replaceAll("\\{" + "deviceId" + "\\}", apiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteDeviceBoardConfigValidateBeforeCall(UUID deviceId, BoardDeleteDto slot, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling deleteDeviceBoardConfig(Async)");
        }
        
        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling deleteDeviceBoardConfig(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteDeviceBoardConfigCall(deviceId, slot, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 删除单板配置
     * ## 典型场景 ## 提供删除单板配置的接口。 ## 接口功能 ## 删除站点内该交换机设备指定槽位的单板配置。 ## 接口约束 ## 只有租户管理员获取token并建立会话后才能调用该接口。 
     * @param deviceId 设备标识，UUID格式。 (required)
     * @param slot 待删除的槽位单板。 (required)
     * @return BoardDeleteResponseDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BoardDeleteResponseDto deleteDeviceBoardConfig(UUID deviceId, BoardDeleteDto slot) throws ApiException {
        ApiResponse<BoardDeleteResponseDto> resp = deleteDeviceBoardConfigWithHttpInfo(deviceId, slot);
        return resp.getData();
    }

    /**
     * 删除单板配置
     * ## 典型场景 ## 提供删除单板配置的接口。 ## 接口功能 ## 删除站点内该交换机设备指定槽位的单板配置。 ## 接口约束 ## 只有租户管理员获取token并建立会话后才能调用该接口。 
     * @param deviceId 设备标识，UUID格式。 (required)
     * @param slot 待删除的槽位单板。 (required)
     * @return ApiResponse&lt;BoardDeleteResponseDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BoardDeleteResponseDto> deleteDeviceBoardConfigWithHttpInfo(UUID deviceId, BoardDeleteDto slot) throws ApiException {
        com.squareup.okhttp.Call call = deleteDeviceBoardConfigValidateBeforeCall(deviceId, slot, null, null);
        Type localVarReturnType = new TypeToken<BoardDeleteResponseDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 删除单板配置 (asynchronously)
     * ## 典型场景 ## 提供删除单板配置的接口。 ## 接口功能 ## 删除站点内该交换机设备指定槽位的单板配置。 ## 接口约束 ## 只有租户管理员获取token并建立会话后才能调用该接口。 
     * @param deviceId 设备标识，UUID格式。 (required)
     * @param slot 待删除的槽位单板。 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteDeviceBoardConfigAsync(UUID deviceId, BoardDeleteDto slot, final ApiCallback<BoardDeleteResponseDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDeviceBoardConfigValidateBeforeCall(deviceId, slot, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BoardDeleteResponseDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDeviceBoardConfig
     * @param deviceId 设备标识，UUID格式。 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDeviceBoardConfigCall(UUID deviceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v1/networkservice/networkconfig/net/board/devices/{deviceId}/boards"
            .replaceAll("\\{" + "deviceId" + "\\}", apiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDeviceBoardConfigValidateBeforeCall(UUID deviceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling getDeviceBoardConfig(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getDeviceBoardConfigCall(deviceId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 查询单板配置
     * ## 典型场景 ##    提供查询单板配置参数的接口。 ## 接口功能 ##    查询交换机单板配置。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。 
     * @param deviceId 设备标识，UUID格式。 (required)
     * @return GetBoardResponseDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetBoardResponseDto getDeviceBoardConfig(UUID deviceId) throws ApiException {
        ApiResponse<GetBoardResponseDto> resp = getDeviceBoardConfigWithHttpInfo(deviceId);
        return resp.getData();
    }

    /**
     * 查询单板配置
     * ## 典型场景 ##    提供查询单板配置参数的接口。 ## 接口功能 ##    查询交换机单板配置。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。 
     * @param deviceId 设备标识，UUID格式。 (required)
     * @return ApiResponse&lt;GetBoardResponseDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetBoardResponseDto> getDeviceBoardConfigWithHttpInfo(UUID deviceId) throws ApiException {
        com.squareup.okhttp.Call call = getDeviceBoardConfigValidateBeforeCall(deviceId, null, null);
        Type localVarReturnType = new TypeToken<GetBoardResponseDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 查询单板配置 (asynchronously)
     * ## 典型场景 ##    提供查询单板配置参数的接口。 ## 接口功能 ##    查询交换机单板配置。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。 
     * @param deviceId 设备标识，UUID格式。 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDeviceBoardConfigAsync(UUID deviceId, final ApiCallback<GetBoardResponseDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDeviceBoardConfigValidateBeforeCall(deviceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetBoardResponseDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
