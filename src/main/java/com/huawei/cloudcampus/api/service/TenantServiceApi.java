/*
 * 租户管理
 * 租户管理第三方北向接口。 · 提供租户创建接口 · 提供租户删除接口 · 提供租户查询接口 
 *
 * OpenAPI spec version: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.huawei.cloudcampus.api.service;

import com.huawei.cloudcampus.api.ApiCallback;
import com.huawei.cloudcampus.api.ApiClient;
import com.huawei.cloudcampus.api.ApiException;
import com.huawei.cloudcampus.api.ApiResponse;
import com.huawei.cloudcampus.api.Configuration;
import com.huawei.cloudcampus.api.Pair;
import com.huawei.cloudcampus.api.ProgressRequestBody;
import com.huawei.cloudcampus.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.huawei.cloudcampus.api.model.CreateTenantDto;
import com.huawei.cloudcampus.api.model.CreateTenantResponseDto;
import com.huawei.cloudcampus.api.model.DeleteResponseDto;
import com.huawei.cloudcampus.api.model.TenantListDto;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TenantServiceApi {
    private ApiClient apiClient;

    public TenantServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TenantServiceApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createSoftcomTenant
     * @param createTenantDto 创建租户基本信息。 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createSoftcomTenantCall(CreateTenantDto createTenantDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = createTenantDto;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v1/baseservice/tenants/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createSoftcomTenantValidateBeforeCall(CreateTenantDto createTenantDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'createTenantDto' is set
        if (createTenantDto == null) {
            throw new ApiException("Missing the required parameter 'createTenantDto' when calling createSoftcomTenant(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createSoftcomTenantCall(createTenantDto, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 创建租户
     * ## 典型场景 ##  创建租户。 ## 接口功能 ##  创建租户。 ## 接口约束 ##  支持MSP下面的北向管理员访问，该接口必须在用户会话建立后使用。 
     * @param createTenantDto 创建租户基本信息。 (required)
     * @return CreateTenantResponseDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateTenantResponseDto createSoftcomTenant(CreateTenantDto createTenantDto) throws ApiException {
        ApiResponse<CreateTenantResponseDto> resp = createSoftcomTenantWithHttpInfo(createTenantDto);
        return resp.getData();
    }

    /**
     * 创建租户
     * ## 典型场景 ##  创建租户。 ## 接口功能 ##  创建租户。 ## 接口约束 ##  支持MSP下面的北向管理员访问，该接口必须在用户会话建立后使用。 
     * @param createTenantDto 创建租户基本信息。 (required)
     * @return ApiResponse&lt;CreateTenantResponseDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateTenantResponseDto> createSoftcomTenantWithHttpInfo(CreateTenantDto createTenantDto) throws ApiException {
        com.squareup.okhttp.Call call = createSoftcomTenantValidateBeforeCall(createTenantDto, null, null);
        Type localVarReturnType = new TypeToken<CreateTenantResponseDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 创建租户 (asynchronously)
     * ## 典型场景 ##  创建租户。 ## 接口功能 ##  创建租户。 ## 接口约束 ##  支持MSP下面的北向管理员访问，该接口必须在用户会话建立后使用。 
     * @param createTenantDto 创建租户基本信息。 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createSoftcomTenantAsync(CreateTenantDto createTenantDto, final ApiCallback<CreateTenantResponseDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createSoftcomTenantValidateBeforeCall(createTenantDto, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateTenantResponseDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteSoftcomTenant
     * @param tenantId 删除租户ID。 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSoftcomTenantCall(String tenantId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v1/baseservice/tenants/{tenantId}"
            .replaceAll("\\{" + "tenantId" + "\\}", apiClient.escapeString(tenantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteSoftcomTenantValidateBeforeCall(String tenantId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling deleteSoftcomTenant(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteSoftcomTenantCall(tenantId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 删除租户
     * ## 典型场景 ##  删除租户。 ## 接口功能 ##  通过租户标识删除租户。 ## 接口约束 ##  支持MSP下面的北向管理员访问，该接口必须在用户会话建立后使用。 
     * @param tenantId 删除租户ID。 (required)
     * @return DeleteResponseDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeleteResponseDto deleteSoftcomTenant(String tenantId) throws ApiException {
        ApiResponse<DeleteResponseDto> resp = deleteSoftcomTenantWithHttpInfo(tenantId);
        return resp.getData();
    }

    /**
     * 删除租户
     * ## 典型场景 ##  删除租户。 ## 接口功能 ##  通过租户标识删除租户。 ## 接口约束 ##  支持MSP下面的北向管理员访问，该接口必须在用户会话建立后使用。 
     * @param tenantId 删除租户ID。 (required)
     * @return ApiResponse&lt;DeleteResponseDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeleteResponseDto> deleteSoftcomTenantWithHttpInfo(String tenantId) throws ApiException {
        com.squareup.okhttp.Call call = deleteSoftcomTenantValidateBeforeCall(tenantId, null, null);
        Type localVarReturnType = new TypeToken<DeleteResponseDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 删除租户 (asynchronously)
     * ## 典型场景 ##  删除租户。 ## 接口功能 ##  通过租户标识删除租户。 ## 接口约束 ##  支持MSP下面的北向管理员访问，该接口必须在用户会话建立后使用。 
     * @param tenantId 删除租户ID。 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSoftcomTenantAsync(String tenantId, final ApiCallback<DeleteResponseDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSoftcomTenantValidateBeforeCall(tenantId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeleteResponseDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for querySoftcomTenants
     * @param pageIndex 分页的序号。 (optional, default to 0)
     * @param pageSize 分页的大小。 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call querySoftcomTenantsCall(Integer pageIndex, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v1/baseservice/tenants/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (pageIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pageIndex", pageIndex));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pageSize", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call querySoftcomTenantsValidateBeforeCall(Integer pageIndex, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = querySoftcomTenantsCall(pageIndex, pageSize, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 查询租户
     * ## 典型场景 ##  查询租户。 ## 接口功能 ##  提供分页查询租户列表功能。 ## 接口约束 ##  支持MSP下面的北向管理员访问，该接口必须在用户会话建立后使用，推荐使用分页查询，如果没有使用分页查询，可能会由于数据量多导致响应时间较长。 
     * @param pageIndex 分页的序号。 (optional, default to 0)
     * @param pageSize 分页的大小。 (optional)
     * @return TenantListDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TenantListDto querySoftcomTenants(Integer pageIndex, Integer pageSize) throws ApiException {
        ApiResponse<TenantListDto> resp = querySoftcomTenantsWithHttpInfo(pageIndex, pageSize);
        return resp.getData();
    }

    /**
     * 查询租户
     * ## 典型场景 ##  查询租户。 ## 接口功能 ##  提供分页查询租户列表功能。 ## 接口约束 ##  支持MSP下面的北向管理员访问，该接口必须在用户会话建立后使用，推荐使用分页查询，如果没有使用分页查询，可能会由于数据量多导致响应时间较长。 
     * @param pageIndex 分页的序号。 (optional, default to 0)
     * @param pageSize 分页的大小。 (optional)
     * @return ApiResponse&lt;TenantListDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TenantListDto> querySoftcomTenantsWithHttpInfo(Integer pageIndex, Integer pageSize) throws ApiException {
        com.squareup.okhttp.Call call = querySoftcomTenantsValidateBeforeCall(pageIndex, pageSize, null, null);
        Type localVarReturnType = new TypeToken<TenantListDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 查询租户 (asynchronously)
     * ## 典型场景 ##  查询租户。 ## 接口功能 ##  提供分页查询租户列表功能。 ## 接口约束 ##  支持MSP下面的北向管理员访问，该接口必须在用户会话建立后使用，推荐使用分页查询，如果没有使用分页查询，可能会由于数据量多导致响应时间较长。 
     * @param pageIndex 分页的序号。 (optional, default to 0)
     * @param pageSize 分页的大小。 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call querySoftcomTenantsAsync(Integer pageIndex, Integer pageSize, final ApiCallback<TenantListDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = querySoftcomTenantsValidateBeforeCall(pageIndex, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TenantListDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
