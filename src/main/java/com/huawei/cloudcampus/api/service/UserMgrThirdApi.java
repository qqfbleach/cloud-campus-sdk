/*
 * 用户管理
 * 用户管理第三方北向接口。 
 *
 * OpenAPI spec version: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.huawei.cloudcampus.api.service;

import com.huawei.cloudcampus.api.ApiCallback;
import com.huawei.cloudcampus.api.ApiClient;
import com.huawei.cloudcampus.api.ApiException;
import com.huawei.cloudcampus.api.ApiResponse;
import com.huawei.cloudcampus.api.Configuration;
import com.huawei.cloudcampus.api.Pair;
import com.huawei.cloudcampus.api.ProgressRequestBody;
import com.huawei.cloudcampus.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.huawei.cloudcampus.api.model.AddUserInputDto;
import com.huawei.cloudcampus.api.model.AddUserOutputDto;
import com.huawei.cloudcampus.api.model.CommonUserOutputDto;
import com.huawei.cloudcampus.api.model.DataListDto;
import com.huawei.cloudcampus.api.model.DeleteUserInputDto;
import com.huawei.cloudcampus.api.model.DeleteUserOutputDto;
import com.huawei.cloudcampus.api.model.UserCommonInfo;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UserMgrThirdApi {
    private ApiClient apiClient;

    public UserMgrThirdApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UserMgrThirdApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addUserThird
     * @param body 用户结构。 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addUserThirdCall(AddUserInputDto body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v1/accountservice/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addUserThirdValidateBeforeCall(AddUserInputDto body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addUserThird(Async)");
        }
        
        
        com.squareup.okhttp.Call call = addUserThirdCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 新增用户信息
     * ## 典型场景 ##  提供新增用户北向接口。 ## 接口功能 ##  新增用户 ## 接口约束 ##  该接口支持北向管理员访问，必须在用户会话建立后使用。  
     * @param body 用户结构。 (required)
     * @return AddUserOutputDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AddUserOutputDto addUserThird(AddUserInputDto body) throws ApiException {
        ApiResponse<AddUserOutputDto> resp = addUserThirdWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * 新增用户信息
     * ## 典型场景 ##  提供新增用户北向接口。 ## 接口功能 ##  新增用户 ## 接口约束 ##  该接口支持北向管理员访问，必须在用户会话建立后使用。  
     * @param body 用户结构。 (required)
     * @return ApiResponse&lt;AddUserOutputDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AddUserOutputDto> addUserThirdWithHttpInfo(AddUserInputDto body) throws ApiException {
        com.squareup.okhttp.Call call = addUserThirdValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<AddUserOutputDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 新增用户信息 (asynchronously)
     * ## 典型场景 ##  提供新增用户北向接口。 ## 接口功能 ##  新增用户 ## 接口约束 ##  该接口支持北向管理员访问，必须在用户会话建立后使用。  
     * @param body 用户结构。 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addUserThirdAsync(AddUserInputDto body, final ApiCallback<AddUserOutputDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addUserThirdValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AddUserOutputDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteUserThird
     * @param body 删除条件，用户ID。 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteUserThirdCall(DeleteUserInputDto body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v1/accountservice/users/batch-delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteUserThirdValidateBeforeCall(DeleteUserInputDto body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling deleteUserThird(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteUserThirdCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 删除指定用户
     * ## 典型场景 ##  提供删除用户北向接口。 ## 接口功能 ##  删除指定的用户 ## 接口约束 ##  该接口支持北向管理员访问，必须在用户会话建立后使用。  
     * @param body 删除条件，用户ID。 (required)
     * @return DeleteUserOutputDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeleteUserOutputDto deleteUserThird(DeleteUserInputDto body) throws ApiException {
        ApiResponse<DeleteUserOutputDto> resp = deleteUserThirdWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * 删除指定用户
     * ## 典型场景 ##  提供删除用户北向接口。 ## 接口功能 ##  删除指定的用户 ## 接口约束 ##  该接口支持北向管理员访问，必须在用户会话建立后使用。  
     * @param body 删除条件，用户ID。 (required)
     * @return ApiResponse&lt;DeleteUserOutputDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeleteUserOutputDto> deleteUserThirdWithHttpInfo(DeleteUserInputDto body) throws ApiException {
        com.squareup.okhttp.Call call = deleteUserThirdValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<DeleteUserOutputDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 删除指定用户 (asynchronously)
     * ## 典型场景 ##  提供删除用户北向接口。 ## 接口功能 ##  删除指定的用户 ## 接口约束 ##  该接口支持北向管理员访问，必须在用户会话建立后使用。  
     * @param body 删除条件，用户ID。 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteUserThirdAsync(DeleteUserInputDto body, final ApiCallback<DeleteUserOutputDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteUserThirdValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeleteUserOutputDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getUserThird
     * @param userGroupId 用户组ID。 (optional)
     * @param userName 用户名称，支持模糊查询。 (optional)
     * @param email 用户邮箱。 (optional)
     * @param isContainSubGroup 是否包含子用户组。 (optional)
     * @param pageIndex 页面索引。 (optional)
     * @param pageSize 页面大小。 (optional)
     * @param sortKey 排序字段，默认是userName。 (optional)
     * @param sortDir 升降序字段，支持ASC和DESC，默认是DESC。 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUserThirdCall(String userGroupId, String userName, String email, String isContainSubGroup, Integer pageIndex, Integer pageSize, String sortKey, String sortDir, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v1/accountservice/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (userGroupId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "userGroupId", userGroupId));
        if (userName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "userName", userName));
        if (email != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "email", email));
        if (isContainSubGroup != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "isContainSubGroup", isContainSubGroup));
        if (pageIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pageIndex", pageIndex));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pageSize", pageSize));
        if (sortKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "sortKey", sortKey));
        if (sortDir != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "sortDir", sortDir));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUserThirdValidateBeforeCall(String userGroupId, String userName, String email, String isContainSubGroup, Integer pageIndex, Integer pageSize, String sortKey, String sortDir, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getUserThirdCall(userGroupId, userName, email, isContainSubGroup, pageIndex, pageSize, sortKey, sortDir, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 查询内置用户信息
     * ## 典型场景 ##  提供通过用户组ID、用户帐号等查询内置用户信息。 ## 接口功能 ##  通过用户组ID、用户帐号等查询内置用户信息。 ## 接口约束 ##  该接口支持北向操作管理员管理访问，必须在用户会话建立后使用。 
     * @param userGroupId 用户组ID。 (optional)
     * @param userName 用户名称，支持模糊查询。 (optional)
     * @param email 用户邮箱。 (optional)
     * @param isContainSubGroup 是否包含子用户组。 (optional)
     * @param pageIndex 页面索引。 (optional)
     * @param pageSize 页面大小。 (optional)
     * @param sortKey 排序字段，默认是userName。 (optional)
     * @param sortDir 升降序字段，支持ASC和DESC，默认是DESC。 (optional)
     * @return DataListDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DataListDto getUserThird(String userGroupId, String userName, String email, String isContainSubGroup, Integer pageIndex, Integer pageSize, String sortKey, String sortDir) throws ApiException {
        ApiResponse<DataListDto> resp = getUserThirdWithHttpInfo(userGroupId, userName, email, isContainSubGroup, pageIndex, pageSize, sortKey, sortDir);
        return resp.getData();
    }

    /**
     * 查询内置用户信息
     * ## 典型场景 ##  提供通过用户组ID、用户帐号等查询内置用户信息。 ## 接口功能 ##  通过用户组ID、用户帐号等查询内置用户信息。 ## 接口约束 ##  该接口支持北向操作管理员管理访问，必须在用户会话建立后使用。 
     * @param userGroupId 用户组ID。 (optional)
     * @param userName 用户名称，支持模糊查询。 (optional)
     * @param email 用户邮箱。 (optional)
     * @param isContainSubGroup 是否包含子用户组。 (optional)
     * @param pageIndex 页面索引。 (optional)
     * @param pageSize 页面大小。 (optional)
     * @param sortKey 排序字段，默认是userName。 (optional)
     * @param sortDir 升降序字段，支持ASC和DESC，默认是DESC。 (optional)
     * @return ApiResponse&lt;DataListDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DataListDto> getUserThirdWithHttpInfo(String userGroupId, String userName, String email, String isContainSubGroup, Integer pageIndex, Integer pageSize, String sortKey, String sortDir) throws ApiException {
        com.squareup.okhttp.Call call = getUserThirdValidateBeforeCall(userGroupId, userName, email, isContainSubGroup, pageIndex, pageSize, sortKey, sortDir, null, null);
        Type localVarReturnType = new TypeToken<DataListDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 查询内置用户信息 (asynchronously)
     * ## 典型场景 ##  提供通过用户组ID、用户帐号等查询内置用户信息。 ## 接口功能 ##  通过用户组ID、用户帐号等查询内置用户信息。 ## 接口约束 ##  该接口支持北向操作管理员管理访问，必须在用户会话建立后使用。 
     * @param userGroupId 用户组ID。 (optional)
     * @param userName 用户名称，支持模糊查询。 (optional)
     * @param email 用户邮箱。 (optional)
     * @param isContainSubGroup 是否包含子用户组。 (optional)
     * @param pageIndex 页面索引。 (optional)
     * @param pageSize 页面大小。 (optional)
     * @param sortKey 排序字段，默认是userName。 (optional)
     * @param sortDir 升降序字段，支持ASC和DESC，默认是DESC。 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUserThirdAsync(String userGroupId, String userName, String email, String isContainSubGroup, Integer pageIndex, Integer pageSize, String sortKey, String sortDir, final ApiCallback<DataListDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUserThirdValidateBeforeCall(userGroupId, userName, email, isContainSubGroup, pageIndex, pageSize, sortKey, sortDir, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DataListDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateUserThird
     * @param id 用户ID。 (required)
     * @param body 用户信息。 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateUserThirdCall(String id, UserCommonInfo body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v1/accountservice/users/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateUserThirdValidateBeforeCall(String id, UserCommonInfo body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateUserThird(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateUserThird(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateUserThirdCall(id, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 修改用户信息
     * ## 典型场景 ##  提供修改用户北向接口。 ## 接口功能 ##  修改指定的用户 ## 接口约束 ##  该接口支持北向管理员访问，必须在用户会话建立后使用。  
     * @param id 用户ID。 (required)
     * @param body 用户信息。 (required)
     * @return CommonUserOutputDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CommonUserOutputDto updateUserThird(String id, UserCommonInfo body) throws ApiException {
        ApiResponse<CommonUserOutputDto> resp = updateUserThirdWithHttpInfo(id, body);
        return resp.getData();
    }

    /**
     * 修改用户信息
     * ## 典型场景 ##  提供修改用户北向接口。 ## 接口功能 ##  修改指定的用户 ## 接口约束 ##  该接口支持北向管理员访问，必须在用户会话建立后使用。  
     * @param id 用户ID。 (required)
     * @param body 用户信息。 (required)
     * @return ApiResponse&lt;CommonUserOutputDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CommonUserOutputDto> updateUserThirdWithHttpInfo(String id, UserCommonInfo body) throws ApiException {
        com.squareup.okhttp.Call call = updateUserThirdValidateBeforeCall(id, body, null, null);
        Type localVarReturnType = new TypeToken<CommonUserOutputDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 修改用户信息 (asynchronously)
     * ## 典型场景 ##  提供修改用户北向接口。 ## 接口功能 ##  修改指定的用户 ## 接口约束 ##  该接口支持北向管理员访问，必须在用户会话建立后使用。  
     * @param id 用户ID。 (required)
     * @param body 用户信息。 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateUserThirdAsync(String id, UserCommonInfo body, final ApiCallback<CommonUserOutputDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateUserThirdValidateBeforeCall(id, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CommonUserOutputDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
