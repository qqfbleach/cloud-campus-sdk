/*
 * 堆叠管理
 * 堆叠管理第三方接口。 场景：创建堆叠操作的第三方接口。
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.huawei.cloudcampus.api.service;

import com.huawei.cloudcampus.api.ApiCallback;
import com.huawei.cloudcampus.api.ApiClient;
import com.huawei.cloudcampus.api.ApiException;
import com.huawei.cloudcampus.api.ApiResponse;
import com.huawei.cloudcampus.api.Configuration;
import com.huawei.cloudcampus.api.Pair;
import com.huawei.cloudcampus.api.ProgressRequestBody;
import com.huawei.cloudcampus.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.huawei.cloudcampus.api.model.CreateStackDto;
import com.huawei.cloudcampus.api.model.CreateStackOutDto;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StackManagerApi {
    private ApiClient apiClient;

    public StackManagerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StackManagerApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createStack
     * @param createStackDto 创建堆叠入参。 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createStackCall(CreateStackDto createStackDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = createStackDto;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v3/stack";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createStackValidateBeforeCall(CreateStackDto createStackDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'createStackDto' is set
        if (createStackDto == null) {
            throw new ApiException("Missing the required parameter 'createStackDto' when calling createStack(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createStackCall(createStackDto, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 添加指定ESN设备到指定堆叠
     * ## 典型场景 ## 将指定ESN设备加入指定堆叠。 ## 接口功能 ## 将指定ESN设备加入指定堆叠。若堆叠名称存在则将指定ESN设备加入到堆叠；若堆叠名称不存在则将指定堆叠创建后加入指定ESN设备。 ## 接口约束 ## 该接口必须在用户会话建立后使用。加入同一个堆叠的设备必须在同一个站点内。 
     * @param createStackDto 创建堆叠入参。 (required)
     * @return CreateStackOutDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateStackOutDto createStack(CreateStackDto createStackDto) throws ApiException {
        ApiResponse<CreateStackOutDto> resp = createStackWithHttpInfo(createStackDto);
        return resp.getData();
    }

    /**
     * 添加指定ESN设备到指定堆叠
     * ## 典型场景 ## 将指定ESN设备加入指定堆叠。 ## 接口功能 ## 将指定ESN设备加入指定堆叠。若堆叠名称存在则将指定ESN设备加入到堆叠；若堆叠名称不存在则将指定堆叠创建后加入指定ESN设备。 ## 接口约束 ## 该接口必须在用户会话建立后使用。加入同一个堆叠的设备必须在同一个站点内。 
     * @param createStackDto 创建堆叠入参。 (required)
     * @return ApiResponse&lt;CreateStackOutDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateStackOutDto> createStackWithHttpInfo(CreateStackDto createStackDto) throws ApiException {
        com.squareup.okhttp.Call call = createStackValidateBeforeCall(createStackDto, null, null);
        Type localVarReturnType = new TypeToken<CreateStackOutDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 添加指定ESN设备到指定堆叠 (asynchronously)
     * ## 典型场景 ## 将指定ESN设备加入指定堆叠。 ## 接口功能 ## 将指定ESN设备加入指定堆叠。若堆叠名称存在则将指定ESN设备加入到堆叠；若堆叠名称不存在则将指定堆叠创建后加入指定ESN设备。 ## 接口约束 ## 该接口必须在用户会话建立后使用。加入同一个堆叠的设备必须在同一个站点内。 
     * @param createStackDto 创建堆叠入参。 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createStackAsync(CreateStackDto createStackDto, final ApiCallback<CreateStackOutDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createStackValidateBeforeCall(createStackDto, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateStackOutDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
