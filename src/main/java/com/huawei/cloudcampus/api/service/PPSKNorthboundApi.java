/*
 * PPSK帐号配置
 * PPSK帐号管理北向接口，主要包括： · 创建PPSK帐号 · 修改PPSK帐号 · 删除PPSK帐号 · 查询PPSK帐号 
 *
 * OpenAPI spec version: 1.1.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.huawei.cloudcampus.api.service;

import com.huawei.cloudcampus.api.ApiCallback;
import com.huawei.cloudcampus.api.ApiClient;
import com.huawei.cloudcampus.api.ApiException;
import com.huawei.cloudcampus.api.ApiResponse;
import com.huawei.cloudcampus.api.Configuration;
import com.huawei.cloudcampus.api.Pair;
import com.huawei.cloudcampus.api.ProgressRequestBody;
import com.huawei.cloudcampus.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.huawei.cloudcampus.api.model.PPSKPostRequestDto;
import com.huawei.cloudcampus.api.model.PPSKPutRequestDto;
import com.huawei.cloudcampus.api.model.PpskDeleteResponseDto;
import com.huawei.cloudcampus.api.model.PpskGetResponseDto;
import com.huawei.cloudcampus.api.model.PpskPostOrPutResponseDto;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PPSKNorthboundApi {
    private ApiClient apiClient;

    public PPSKNorthboundApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PPSKNorthboundApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createPpskAccount
     * @param siteId 站点ID，UUID格式。 (required)
     * @param body PPSK帐号信息参数体。 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createPpskAccountCall(String siteId, PPSKPostRequestDto body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v1/authconfigservice/accessconfig/{siteId}/ppsk"
            .replaceAll("\\{" + "siteId" + "\\}", apiClient.escapeString(siteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createPpskAccountValidateBeforeCall(String siteId, PPSKPostRequestDto body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling createPpskAccount(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createPpskAccount(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createPpskAccountCall(siteId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 新增PPSK帐号
     * ## 典型场景 ##    在一个站点内，一次新增一个PPSK帐号。 ## 接口功能 ##    新增PPSK帐号。 ## 接口约束 ##    该接口支持北向操作管理员管理访问，必须在用户会话建立后使用。 
     * @param siteId 站点ID，UUID格式。 (required)
     * @param body PPSK帐号信息参数体。 (required)
     * @return PpskPostOrPutResponseDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PpskPostOrPutResponseDto createPpskAccount(String siteId, PPSKPostRequestDto body) throws ApiException {
        ApiResponse<PpskPostOrPutResponseDto> resp = createPpskAccountWithHttpInfo(siteId, body);
        return resp.getData();
    }

    /**
     * 新增PPSK帐号
     * ## 典型场景 ##    在一个站点内，一次新增一个PPSK帐号。 ## 接口功能 ##    新增PPSK帐号。 ## 接口约束 ##    该接口支持北向操作管理员管理访问，必须在用户会话建立后使用。 
     * @param siteId 站点ID，UUID格式。 (required)
     * @param body PPSK帐号信息参数体。 (required)
     * @return ApiResponse&lt;PpskPostOrPutResponseDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PpskPostOrPutResponseDto> createPpskAccountWithHttpInfo(String siteId, PPSKPostRequestDto body) throws ApiException {
        com.squareup.okhttp.Call call = createPpskAccountValidateBeforeCall(siteId, body, null, null);
        Type localVarReturnType = new TypeToken<PpskPostOrPutResponseDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 新增PPSK帐号 (asynchronously)
     * ## 典型场景 ##    在一个站点内，一次新增一个PPSK帐号。 ## 接口功能 ##    新增PPSK帐号。 ## 接口约束 ##    该接口支持北向操作管理员管理访问，必须在用户会话建立后使用。 
     * @param siteId 站点ID，UUID格式。 (required)
     * @param body PPSK帐号信息参数体。 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createPpskAccountAsync(String siteId, PPSKPostRequestDto body, final ApiCallback<PpskPostOrPutResponseDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createPpskAccountValidateBeforeCall(siteId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PpskPostOrPutResponseDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deletePpskAccount
     * @param siteId 站点ID，UUID格式。 (required)
     * @param account PPSK帐号名称。 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deletePpskAccountCall(String siteId, String account, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v1/authconfigservice/accessconfig/{siteId}/ppsk/{account}"
            .replaceAll("\\{" + "siteId" + "\\}", apiClient.escapeString(siteId.toString()))
            .replaceAll("\\{" + "account" + "\\}", apiClient.escapeString(account.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletePpskAccountValidateBeforeCall(String siteId, String account, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling deletePpskAccount(Async)");
        }
        
        // verify the required parameter 'account' is set
        if (account == null) {
            throw new ApiException("Missing the required parameter 'account' when calling deletePpskAccount(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deletePpskAccountCall(siteId, account, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 删除PPSK帐号
     * ## 典型场景 ##    通过帐号名删除PPSK帐号信息。 ## 接口功能 ##    通过帐号名删除PPSK帐号信息。 ## 接口约束 ##    该接口支持北向操作管理员管理访问，必须在用户会话建立后使用。 
     * @param siteId 站点ID，UUID格式。 (required)
     * @param account PPSK帐号名称。 (required)
     * @return PpskDeleteResponseDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PpskDeleteResponseDto deletePpskAccount(String siteId, String account) throws ApiException {
        ApiResponse<PpskDeleteResponseDto> resp = deletePpskAccountWithHttpInfo(siteId, account);
        return resp.getData();
    }

    /**
     * 删除PPSK帐号
     * ## 典型场景 ##    通过帐号名删除PPSK帐号信息。 ## 接口功能 ##    通过帐号名删除PPSK帐号信息。 ## 接口约束 ##    该接口支持北向操作管理员管理访问，必须在用户会话建立后使用。 
     * @param siteId 站点ID，UUID格式。 (required)
     * @param account PPSK帐号名称。 (required)
     * @return ApiResponse&lt;PpskDeleteResponseDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PpskDeleteResponseDto> deletePpskAccountWithHttpInfo(String siteId, String account) throws ApiException {
        com.squareup.okhttp.Call call = deletePpskAccountValidateBeforeCall(siteId, account, null, null);
        Type localVarReturnType = new TypeToken<PpskDeleteResponseDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 删除PPSK帐号 (asynchronously)
     * ## 典型场景 ##    通过帐号名删除PPSK帐号信息。 ## 接口功能 ##    通过帐号名删除PPSK帐号信息。 ## 接口约束 ##    该接口支持北向操作管理员管理访问，必须在用户会话建立后使用。 
     * @param siteId 站点ID，UUID格式。 (required)
     * @param account PPSK帐号名称。 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletePpskAccountAsync(String siteId, String account, final ApiCallback<PpskDeleteResponseDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePpskAccountValidateBeforeCall(siteId, account, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PpskDeleteResponseDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPpskAccount
     * @param siteId 站点ID，UUID格式。 (required)
     * @param account 帐号名称。 (optional)
     * @param ssidName SSID名称。 (optional)
     * @param vlan 帐号绑定的VLAN。 (optional)
     * @param pageIndex 页面索引。 (optional)
     * @param pageSize 每页显示记录数。 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPpskAccountCall(String siteId, String account, String ssidName, Integer vlan, Integer pageIndex, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v1/authconfigservice/accessconfig/{siteId}/ppsk"
            .replaceAll("\\{" + "siteId" + "\\}", apiClient.escapeString(siteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (account != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "account", account));
        if (ssidName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "ssidName", ssidName));
        if (vlan != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "vlan", vlan));
        if (pageIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pageIndex", pageIndex));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pageSize", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPpskAccountValidateBeforeCall(String siteId, String account, String ssidName, Integer vlan, Integer pageIndex, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling getPpskAccount(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getPpskAccountCall(siteId, account, ssidName, vlan, pageIndex, pageSize, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 查询PPSK帐号
     * ## 典型场景 ##    通过帐号名、VLAN ID查询PPSK帐号信息。 ## 接口功能 ##    通过帐号名、VLAN ID查询PPSK帐号信息。 ## 接口约束 ##    该接口支持北向操作管理员管理访问，必须在用户会话建立后使用。 
     * @param siteId 站点ID，UUID格式。 (required)
     * @param account 帐号名称。 (optional)
     * @param ssidName SSID名称。 (optional)
     * @param vlan 帐号绑定的VLAN。 (optional)
     * @param pageIndex 页面索引。 (optional)
     * @param pageSize 每页显示记录数。 (optional)
     * @return PpskGetResponseDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PpskGetResponseDto getPpskAccount(String siteId, String account, String ssidName, Integer vlan, Integer pageIndex, Integer pageSize) throws ApiException {
        ApiResponse<PpskGetResponseDto> resp = getPpskAccountWithHttpInfo(siteId, account, ssidName, vlan, pageIndex, pageSize);
        return resp.getData();
    }

    /**
     * 查询PPSK帐号
     * ## 典型场景 ##    通过帐号名、VLAN ID查询PPSK帐号信息。 ## 接口功能 ##    通过帐号名、VLAN ID查询PPSK帐号信息。 ## 接口约束 ##    该接口支持北向操作管理员管理访问，必须在用户会话建立后使用。 
     * @param siteId 站点ID，UUID格式。 (required)
     * @param account 帐号名称。 (optional)
     * @param ssidName SSID名称。 (optional)
     * @param vlan 帐号绑定的VLAN。 (optional)
     * @param pageIndex 页面索引。 (optional)
     * @param pageSize 每页显示记录数。 (optional)
     * @return ApiResponse&lt;PpskGetResponseDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PpskGetResponseDto> getPpskAccountWithHttpInfo(String siteId, String account, String ssidName, Integer vlan, Integer pageIndex, Integer pageSize) throws ApiException {
        com.squareup.okhttp.Call call = getPpskAccountValidateBeforeCall(siteId, account, ssidName, vlan, pageIndex, pageSize, null, null);
        Type localVarReturnType = new TypeToken<PpskGetResponseDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 查询PPSK帐号 (asynchronously)
     * ## 典型场景 ##    通过帐号名、VLAN ID查询PPSK帐号信息。 ## 接口功能 ##    通过帐号名、VLAN ID查询PPSK帐号信息。 ## 接口约束 ##    该接口支持北向操作管理员管理访问，必须在用户会话建立后使用。 
     * @param siteId 站点ID，UUID格式。 (required)
     * @param account 帐号名称。 (optional)
     * @param ssidName SSID名称。 (optional)
     * @param vlan 帐号绑定的VLAN。 (optional)
     * @param pageIndex 页面索引。 (optional)
     * @param pageSize 每页显示记录数。 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPpskAccountAsync(String siteId, String account, String ssidName, Integer vlan, Integer pageIndex, Integer pageSize, final ApiCallback<PpskGetResponseDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPpskAccountValidateBeforeCall(siteId, account, ssidName, vlan, pageIndex, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PpskGetResponseDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updatePpskAccount
     * @param siteId 站点ID，UUID格式。 (required)
     * @param account PPSK帐号名称。 (required)
     * @param body PPSK帐号信息参数体。 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updatePpskAccountCall(String siteId, String account, PPSKPutRequestDto body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v1/authconfigservice/accessconfig/{siteId}/ppsk/{account}"
            .replaceAll("\\{" + "siteId" + "\\}", apiClient.escapeString(siteId.toString()))
            .replaceAll("\\{" + "account" + "\\}", apiClient.escapeString(account.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updatePpskAccountValidateBeforeCall(String siteId, String account, PPSKPutRequestDto body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling updatePpskAccount(Async)");
        }
        
        // verify the required parameter 'account' is set
        if (account == null) {
            throw new ApiException("Missing the required parameter 'account' when calling updatePpskAccount(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updatePpskAccount(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updatePpskAccountCall(siteId, account, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 修改PPSK帐号
     * ## 典型场景 ##    修改PPSK帐号信息，包括PSK、VLAN ID和帐号描述信息。 ## 接口功能 ##    修改PPSK帐号信息。 ## 接口约束 ##    该接口支持北向操作管理员管理访问，必须在用户会话建立后使用。 
     * @param siteId 站点ID，UUID格式。 (required)
     * @param account PPSK帐号名称。 (required)
     * @param body PPSK帐号信息参数体。 (required)
     * @return PpskPostOrPutResponseDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PpskPostOrPutResponseDto updatePpskAccount(String siteId, String account, PPSKPutRequestDto body) throws ApiException {
        ApiResponse<PpskPostOrPutResponseDto> resp = updatePpskAccountWithHttpInfo(siteId, account, body);
        return resp.getData();
    }

    /**
     * 修改PPSK帐号
     * ## 典型场景 ##    修改PPSK帐号信息，包括PSK、VLAN ID和帐号描述信息。 ## 接口功能 ##    修改PPSK帐号信息。 ## 接口约束 ##    该接口支持北向操作管理员管理访问，必须在用户会话建立后使用。 
     * @param siteId 站点ID，UUID格式。 (required)
     * @param account PPSK帐号名称。 (required)
     * @param body PPSK帐号信息参数体。 (required)
     * @return ApiResponse&lt;PpskPostOrPutResponseDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PpskPostOrPutResponseDto> updatePpskAccountWithHttpInfo(String siteId, String account, PPSKPutRequestDto body) throws ApiException {
        com.squareup.okhttp.Call call = updatePpskAccountValidateBeforeCall(siteId, account, body, null, null);
        Type localVarReturnType = new TypeToken<PpskPostOrPutResponseDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 修改PPSK帐号 (asynchronously)
     * ## 典型场景 ##    修改PPSK帐号信息，包括PSK、VLAN ID和帐号描述信息。 ## 接口功能 ##    修改PPSK帐号信息。 ## 接口约束 ##    该接口支持北向操作管理员管理访问，必须在用户会话建立后使用。 
     * @param siteId 站点ID，UUID格式。 (required)
     * @param account PPSK帐号名称。 (required)
     * @param body PPSK帐号信息参数体。 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updatePpskAccountAsync(String siteId, String account, PPSKPutRequestDto body, final ApiCallback<PpskPostOrPutResponseDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePpskAccountValidateBeforeCall(siteId, account, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PpskPostOrPutResponseDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
