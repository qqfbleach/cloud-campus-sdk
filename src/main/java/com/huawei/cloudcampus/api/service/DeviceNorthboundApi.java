/*
 * 设备基本信息管理
 * 设备相关操作接口。 场景：对设备增删改查操作的第三方接口。
 *
 * OpenAPI spec version: 1.6.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.huawei.cloudcampus.api.service;

import com.huawei.cloudcampus.api.ApiCallback;
import com.huawei.cloudcampus.api.ApiClient;
import com.huawei.cloudcampus.api.ApiException;
import com.huawei.cloudcampus.api.ApiResponse;
import com.huawei.cloudcampus.api.Configuration;
import com.huawei.cloudcampus.api.Pair;
import com.huawei.cloudcampus.api.ProgressRequestBody;
import com.huawei.cloudcampus.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.huawei.cloudcampus.api.model.BatchModifyDeviceBean;
import com.huawei.cloudcampus.api.model.BatchModifyDeviceDto;
import com.huawei.cloudcampus.api.model.CommonResponseBean;
import com.huawei.cloudcampus.api.model.CreateDeviceBean;
import com.huawei.cloudcampus.api.model.CreateDeviceDto;
import com.huawei.cloudcampus.api.model.DeleteDeviceBean;
import com.huawei.cloudcampus.api.model.DeleteDeviceDto;
import com.huawei.cloudcampus.api.model.DeviceModelEntityList;
import com.huawei.cloudcampus.api.model.DeviceResponseBean;
import com.huawei.cloudcampus.api.model.ModifyDeviceBean;
import com.huawei.cloudcampus.api.model.ModifyDeviceDto;
import com.huawei.cloudcampus.api.model.ReplaceDeviceDto;
import com.huawei.cloudcampus.api.model.ReplaceOriginalDeviceDto;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DeviceNorthboundApi {
    private ApiClient apiClient;

    public DeviceNorthboundApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DeviceNorthboundApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for batchModifyDevices
     * @param batchModifyDeviceDto 批量修改设备入参模型。 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call batchModifyDevicesCall(BatchModifyDeviceDto batchModifyDeviceDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = batchModifyDeviceDto;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v3/devices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call batchModifyDevicesValidateBeforeCall(BatchModifyDeviceDto batchModifyDeviceDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'batchModifyDeviceDto' is set
        if (batchModifyDeviceDto == null) {
            throw new ApiException("Missing the required parameter 'batchModifyDeviceDto' when calling batchModifyDevices(Async)");
        }
        
        
        com.squareup.okhttp.Call call = batchModifyDevicesCall(batchModifyDeviceDto, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 批量修改设备
     * ## 典型场景 ## 批量修改设备的名称、站点等信息。 ## 接口功能 ##   批量修改设备。 ## 接口约束 ##  该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
     * @param batchModifyDeviceDto 批量修改设备入参模型。 (required)
     * @return BatchModifyDeviceBean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BatchModifyDeviceBean batchModifyDevices(BatchModifyDeviceDto batchModifyDeviceDto) throws ApiException {
        ApiResponse<BatchModifyDeviceBean> resp = batchModifyDevicesWithHttpInfo(batchModifyDeviceDto);
        return resp.getData();
    }

    /**
     * 批量修改设备
     * ## 典型场景 ## 批量修改设备的名称、站点等信息。 ## 接口功能 ##   批量修改设备。 ## 接口约束 ##  该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
     * @param batchModifyDeviceDto 批量修改设备入参模型。 (required)
     * @return ApiResponse&lt;BatchModifyDeviceBean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BatchModifyDeviceBean> batchModifyDevicesWithHttpInfo(BatchModifyDeviceDto batchModifyDeviceDto) throws ApiException {
        com.squareup.okhttp.Call call = batchModifyDevicesValidateBeforeCall(batchModifyDeviceDto, null, null);
        Type localVarReturnType = new TypeToken<BatchModifyDeviceBean>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 批量修改设备 (asynchronously)
     * ## 典型场景 ## 批量修改设备的名称、站点等信息。 ## 接口功能 ##   批量修改设备。 ## 接口约束 ##  该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
     * @param batchModifyDeviceDto 批量修改设备入参模型。 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call batchModifyDevicesAsync(BatchModifyDeviceDto batchModifyDeviceDto, final ApiCallback<BatchModifyDeviceBean> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = batchModifyDevicesValidateBeforeCall(batchModifyDeviceDto, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BatchModifyDeviceBean>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createDevices
     * @param createDeviceDto 创建设备入参信息。 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createDevicesCall(CreateDeviceDto createDeviceDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = createDeviceDto;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v3/devices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createDevicesValidateBeforeCall(CreateDeviceDto createDeviceDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'createDeviceDto' is set
        if (createDeviceDto == null) {
            throw new ApiException("Missing the required parameter 'createDeviceDto' when calling createDevices(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createDevicesCall(createDeviceDto, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 创建设备
     * ## 典型场景 ##  根据设备ESN、设备名称、设备描述、站点ID等进行设备创建。 ## 接口功能 ##  创建设备。 ## 接口约束 ##  该接口必须在用户会话建立后使用。 
     * @param createDeviceDto 创建设备入参信息。 (required)
     * @return CreateDeviceBean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateDeviceBean createDevices(CreateDeviceDto createDeviceDto) throws ApiException {
        ApiResponse<CreateDeviceBean> resp = createDevicesWithHttpInfo(createDeviceDto);
        return resp.getData();
    }

    /**
     * 创建设备
     * ## 典型场景 ##  根据设备ESN、设备名称、设备描述、站点ID等进行设备创建。 ## 接口功能 ##  创建设备。 ## 接口约束 ##  该接口必须在用户会话建立后使用。 
     * @param createDeviceDto 创建设备入参信息。 (required)
     * @return ApiResponse&lt;CreateDeviceBean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateDeviceBean> createDevicesWithHttpInfo(CreateDeviceDto createDeviceDto) throws ApiException {
        com.squareup.okhttp.Call call = createDevicesValidateBeforeCall(createDeviceDto, null, null);
        Type localVarReturnType = new TypeToken<CreateDeviceBean>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 创建设备 (asynchronously)
     * ## 典型场景 ##  根据设备ESN、设备名称、设备描述、站点ID等进行设备创建。 ## 接口功能 ##  创建设备。 ## 接口约束 ##  该接口必须在用户会话建立后使用。 
     * @param createDeviceDto 创建设备入参信息。 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createDevicesAsync(CreateDeviceDto createDeviceDto, final ApiCallback<CreateDeviceBean> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createDevicesValidateBeforeCall(createDeviceDto, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateDeviceBean>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteDevices
     * @param deviceIds 设备ID列表。 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteDevicesCall(DeleteDeviceDto deviceIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = deviceIds;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v3/devices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteDevicesValidateBeforeCall(DeleteDeviceDto deviceIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deviceIds' is set
        if (deviceIds == null) {
            throw new ApiException("Missing the required parameter 'deviceIds' when calling deleteDevices(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteDevicesCall(deviceIds, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 删除设备
     * ## 典型场景 ##  根据设备ID删除设备。 ## 接口功能 ##  删除设备。 ## 接口约束 ##  该接口必须在用户会话建立后使用。 
     * @param deviceIds 设备ID列表。 (required)
     * @return DeleteDeviceBean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeleteDeviceBean deleteDevices(DeleteDeviceDto deviceIds) throws ApiException {
        ApiResponse<DeleteDeviceBean> resp = deleteDevicesWithHttpInfo(deviceIds);
        return resp.getData();
    }

    /**
     * 删除设备
     * ## 典型场景 ##  根据设备ID删除设备。 ## 接口功能 ##  删除设备。 ## 接口约束 ##  该接口必须在用户会话建立后使用。 
     * @param deviceIds 设备ID列表。 (required)
     * @return ApiResponse&lt;DeleteDeviceBean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeleteDeviceBean> deleteDevicesWithHttpInfo(DeleteDeviceDto deviceIds) throws ApiException {
        com.squareup.okhttp.Call call = deleteDevicesValidateBeforeCall(deviceIds, null, null);
        Type localVarReturnType = new TypeToken<DeleteDeviceBean>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 删除设备 (asynchronously)
     * ## 典型场景 ##  根据设备ID删除设备。 ## 接口功能 ##  删除设备。 ## 接口约束 ##  该接口必须在用户会话建立后使用。 
     * @param deviceIds 设备ID列表。 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteDevicesAsync(DeleteDeviceDto deviceIds, final ApiCallback<DeleteDeviceBean> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDevicesValidateBeforeCall(deviceIds, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeleteDeviceBean>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDeviceModels
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDeviceModelsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v3/device-models";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDeviceModelsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getDeviceModelsCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 查询设备款型
     * ## 典型场景 ## 在控制器上查询设备款型信息时使用。 ## 接口功能 ## 查询设备款型信息。 ## 接口约束 ## 该接口必须在用户会话建立后使用。 
     * @return DeviceModelEntityList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeviceModelEntityList getDeviceModels() throws ApiException {
        ApiResponse<DeviceModelEntityList> resp = getDeviceModelsWithHttpInfo();
        return resp.getData();
    }

    /**
     * 查询设备款型
     * ## 典型场景 ## 在控制器上查询设备款型信息时使用。 ## 接口功能 ## 查询设备款型信息。 ## 接口约束 ## 该接口必须在用户会话建立后使用。 
     * @return ApiResponse&lt;DeviceModelEntityList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeviceModelEntityList> getDeviceModelsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getDeviceModelsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<DeviceModelEntityList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 查询设备款型 (asynchronously)
     * ## 典型场景 ## 在控制器上查询设备款型信息时使用。 ## 接口功能 ## 查询设备款型信息。 ## 接口约束 ## 该接口必须在用户会话建立后使用。 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDeviceModelsAsync(final ApiCallback<DeviceModelEntityList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDeviceModelsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeviceModelEntityList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSiteDevice
     * @param pageIndex 分页的序号。 (optional, default to 1)
     * @param pageSize 分页的大小。 (optional, default to 1000)
     * @param neType 设备类型，类型可以是&#39;AR&#39;，&#39;AP&#39;，&#39;LSW&#39;，&#39;FW&#39;，如果多个类型用逗号分隔（如：AR，AP）。不推荐使用，请尽量以deviceType为主。 (optional)
     * @param deviceType 设备类型，类型可以是&#39;AR&#39;，&#39;AP&#39;，&#39;LSW&#39;，&#39;FW&#39;，如果多个类型用逗号分隔（如：AR，AP）。如果跟neType同时出现，以deviceType为主。 (optional)
     * @param siteId 站点ID，查询单个站点下设备列表，为空查询所有设备。 (optional)
     * @param sort 排序字段，支持name，esn，deviceModel，deviceType，status，mac，ip，neType，version，description，createTime，registerTime，modifyTime。 (optional)
     * @param name 设备名称模糊查询，支持精确和模糊匹配，不支持正则。 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSiteDeviceCall(Integer pageIndex, Integer pageSize, String neType, String deviceType, String siteId, String sort, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v3/devices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (pageIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pageIndex", pageIndex));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pageSize", pageSize));
        if (neType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "neType", neType));
        if (deviceType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "deviceType", deviceType));
        if (siteId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "siteId", siteId));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "sort", sort));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "name", name));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSiteDeviceValidateBeforeCall(Integer pageIndex, Integer pageSize, String neType, String deviceType, String siteId, String sort, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getSiteDeviceCall(pageIndex, pageSize, neType, deviceType, siteId, sort, name, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 查询设备
     * ## 典型场景 ##   查询设备信息。 ## 接口功能 ##   查询设备信息（真实设备和虚拟设备），包括所属站点、设备类型、设备名称、设备状态等拓扑信息，支持基于站点查询，支持基于字段排序。 ## 接口约束 ##   1、该接口支持租户下北向接口管理访问，必须在用户会话建立后使用;   2、若pageSize和pageIndex参数不传或者为非法参数，则默认按照pageSize&#x3D;1000，pageIndex&#x3D;1返回查询结果。 
     * @param pageIndex 分页的序号。 (optional, default to 1)
     * @param pageSize 分页的大小。 (optional, default to 1000)
     * @param neType 设备类型，类型可以是&#39;AR&#39;，&#39;AP&#39;，&#39;LSW&#39;，&#39;FW&#39;，如果多个类型用逗号分隔（如：AR，AP）。不推荐使用，请尽量以deviceType为主。 (optional)
     * @param deviceType 设备类型，类型可以是&#39;AR&#39;，&#39;AP&#39;，&#39;LSW&#39;，&#39;FW&#39;，如果多个类型用逗号分隔（如：AR，AP）。如果跟neType同时出现，以deviceType为主。 (optional)
     * @param siteId 站点ID，查询单个站点下设备列表，为空查询所有设备。 (optional)
     * @param sort 排序字段，支持name，esn，deviceModel，deviceType，status，mac，ip，neType，version，description，createTime，registerTime，modifyTime。 (optional)
     * @param name 设备名称模糊查询，支持精确和模糊匹配，不支持正则。 (optional)
     * @return DeviceResponseBean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeviceResponseBean getSiteDevice(Integer pageIndex, Integer pageSize, String neType, String deviceType, String siteId, String sort, String name) throws ApiException {
        ApiResponse<DeviceResponseBean> resp = getSiteDeviceWithHttpInfo(pageIndex, pageSize, neType, deviceType, siteId, sort, name);
        return resp.getData();
    }

    /**
     * 查询设备
     * ## 典型场景 ##   查询设备信息。 ## 接口功能 ##   查询设备信息（真实设备和虚拟设备），包括所属站点、设备类型、设备名称、设备状态等拓扑信息，支持基于站点查询，支持基于字段排序。 ## 接口约束 ##   1、该接口支持租户下北向接口管理访问，必须在用户会话建立后使用;   2、若pageSize和pageIndex参数不传或者为非法参数，则默认按照pageSize&#x3D;1000，pageIndex&#x3D;1返回查询结果。 
     * @param pageIndex 分页的序号。 (optional, default to 1)
     * @param pageSize 分页的大小。 (optional, default to 1000)
     * @param neType 设备类型，类型可以是&#39;AR&#39;，&#39;AP&#39;，&#39;LSW&#39;，&#39;FW&#39;，如果多个类型用逗号分隔（如：AR，AP）。不推荐使用，请尽量以deviceType为主。 (optional)
     * @param deviceType 设备类型，类型可以是&#39;AR&#39;，&#39;AP&#39;，&#39;LSW&#39;，&#39;FW&#39;，如果多个类型用逗号分隔（如：AR，AP）。如果跟neType同时出现，以deviceType为主。 (optional)
     * @param siteId 站点ID，查询单个站点下设备列表，为空查询所有设备。 (optional)
     * @param sort 排序字段，支持name，esn，deviceModel，deviceType，status，mac，ip，neType，version，description，createTime，registerTime，modifyTime。 (optional)
     * @param name 设备名称模糊查询，支持精确和模糊匹配，不支持正则。 (optional)
     * @return ApiResponse&lt;DeviceResponseBean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeviceResponseBean> getSiteDeviceWithHttpInfo(Integer pageIndex, Integer pageSize, String neType, String deviceType, String siteId, String sort, String name) throws ApiException {
        com.squareup.okhttp.Call call = getSiteDeviceValidateBeforeCall(pageIndex, pageSize, neType, deviceType, siteId, sort, name, null, null);
        Type localVarReturnType = new TypeToken<DeviceResponseBean>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 查询设备 (asynchronously)
     * ## 典型场景 ##   查询设备信息。 ## 接口功能 ##   查询设备信息（真实设备和虚拟设备），包括所属站点、设备类型、设备名称、设备状态等拓扑信息，支持基于站点查询，支持基于字段排序。 ## 接口约束 ##   1、该接口支持租户下北向接口管理访问，必须在用户会话建立后使用;   2、若pageSize和pageIndex参数不传或者为非法参数，则默认按照pageSize&#x3D;1000，pageIndex&#x3D;1返回查询结果。 
     * @param pageIndex 分页的序号。 (optional, default to 1)
     * @param pageSize 分页的大小。 (optional, default to 1000)
     * @param neType 设备类型，类型可以是&#39;AR&#39;，&#39;AP&#39;，&#39;LSW&#39;，&#39;FW&#39;，如果多个类型用逗号分隔（如：AR，AP）。不推荐使用，请尽量以deviceType为主。 (optional)
     * @param deviceType 设备类型，类型可以是&#39;AR&#39;，&#39;AP&#39;，&#39;LSW&#39;，&#39;FW&#39;，如果多个类型用逗号分隔（如：AR，AP）。如果跟neType同时出现，以deviceType为主。 (optional)
     * @param siteId 站点ID，查询单个站点下设备列表，为空查询所有设备。 (optional)
     * @param sort 排序字段，支持name，esn，deviceModel，deviceType，status，mac，ip，neType，version，description，createTime，registerTime，modifyTime。 (optional)
     * @param name 设备名称模糊查询，支持精确和模糊匹配，不支持正则。 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSiteDeviceAsync(Integer pageIndex, Integer pageSize, String neType, String deviceType, String siteId, String sort, String name, final ApiCallback<DeviceResponseBean> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSiteDeviceValidateBeforeCall(pageIndex, pageSize, neType, deviceType, siteId, sort, name, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeviceResponseBean>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for modifyDevices
     * @param deviceId 设备ID。 (required)
     * @param modifyDeviceDto 修改设备入参模型。 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call modifyDevicesCall(String deviceId, ModifyDeviceDto modifyDeviceDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = modifyDeviceDto;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v3/devices/{deviceId}"
            .replaceAll("\\{" + "deviceId" + "\\}", apiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call modifyDevicesValidateBeforeCall(String deviceId, ModifyDeviceDto modifyDeviceDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling modifyDevices(Async)");
        }
        
        // verify the required parameter 'modifyDeviceDto' is set
        if (modifyDeviceDto == null) {
            throw new ApiException("Missing the required parameter 'modifyDeviceDto' when calling modifyDevices(Async)");
        }
        
        
        com.squareup.okhttp.Call call = modifyDevicesCall(deviceId, modifyDeviceDto, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 修改设备
     * ## 典型场景 ##  修改设备基本信息时使用。 ## 接口功能 ##  修改设备基本信息。 ## 接口约束 ##  该接口必须在用户会话建立后使用。 
     * @param deviceId 设备ID。 (required)
     * @param modifyDeviceDto 修改设备入参模型。 (required)
     * @return ModifyDeviceBean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModifyDeviceBean modifyDevices(String deviceId, ModifyDeviceDto modifyDeviceDto) throws ApiException {
        ApiResponse<ModifyDeviceBean> resp = modifyDevicesWithHttpInfo(deviceId, modifyDeviceDto);
        return resp.getData();
    }

    /**
     * 修改设备
     * ## 典型场景 ##  修改设备基本信息时使用。 ## 接口功能 ##  修改设备基本信息。 ## 接口约束 ##  该接口必须在用户会话建立后使用。 
     * @param deviceId 设备ID。 (required)
     * @param modifyDeviceDto 修改设备入参模型。 (required)
     * @return ApiResponse&lt;ModifyDeviceBean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModifyDeviceBean> modifyDevicesWithHttpInfo(String deviceId, ModifyDeviceDto modifyDeviceDto) throws ApiException {
        com.squareup.okhttp.Call call = modifyDevicesValidateBeforeCall(deviceId, modifyDeviceDto, null, null);
        Type localVarReturnType = new TypeToken<ModifyDeviceBean>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 修改设备 (asynchronously)
     * ## 典型场景 ##  修改设备基本信息时使用。 ## 接口功能 ##  修改设备基本信息。 ## 接口约束 ##  该接口必须在用户会话建立后使用。 
     * @param deviceId 设备ID。 (required)
     * @param modifyDeviceDto 修改设备入参模型。 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call modifyDevicesAsync(String deviceId, ModifyDeviceDto modifyDeviceDto, final ApiCallback<ModifyDeviceBean> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = modifyDevicesValidateBeforeCall(deviceId, modifyDeviceDto, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModifyDeviceBean>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for replaceDevice
     * @param replaceDeviceDto 设备替换入参模型。 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call replaceDeviceCall(ReplaceDeviceDto replaceDeviceDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = replaceDeviceDto;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v3/devices/replace";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call replaceDeviceValidateBeforeCall(ReplaceDeviceDto replaceDeviceDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'replaceDeviceDto' is set
        if (replaceDeviceDto == null) {
            throw new ApiException("Missing the required parameter 'replaceDeviceDto' when calling replaceDevice(Async)");
        }
        
        
        com.squareup.okhttp.Call call = replaceDeviceCall(replaceDeviceDto, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 替换设备
     * ## 操作场景 ##  设备替换。 ## 接口功能 ##  设备替换。 ## 接口约束 ##  该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
     * @param replaceDeviceDto 设备替换入参模型。 (required)
     * @return CommonResponseBean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CommonResponseBean replaceDevice(ReplaceDeviceDto replaceDeviceDto) throws ApiException {
        ApiResponse<CommonResponseBean> resp = replaceDeviceWithHttpInfo(replaceDeviceDto);
        return resp.getData();
    }

    /**
     * 替换设备
     * ## 操作场景 ##  设备替换。 ## 接口功能 ##  设备替换。 ## 接口约束 ##  该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
     * @param replaceDeviceDto 设备替换入参模型。 (required)
     * @return ApiResponse&lt;CommonResponseBean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CommonResponseBean> replaceDeviceWithHttpInfo(ReplaceDeviceDto replaceDeviceDto) throws ApiException {
        com.squareup.okhttp.Call call = replaceDeviceValidateBeforeCall(replaceDeviceDto, null, null);
        Type localVarReturnType = new TypeToken<CommonResponseBean>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 替换设备 (asynchronously)
     * ## 操作场景 ##  设备替换。 ## 接口功能 ##  设备替换。 ## 接口约束 ##  该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
     * @param replaceDeviceDto 设备替换入参模型。 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call replaceDeviceAsync(ReplaceDeviceDto replaceDeviceDto, final ApiCallback<CommonResponseBean> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = replaceDeviceValidateBeforeCall(replaceDeviceDto, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CommonResponseBean>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for replaceOriginalDevice
     * @param replaceOriginalDeviceDto 设备替换入参模型。 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call replaceOriginalDeviceCall(ReplaceOriginalDeviceDto replaceOriginalDeviceDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = replaceOriginalDeviceDto;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v3/devices/replacement";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call replaceOriginalDeviceValidateBeforeCall(ReplaceOriginalDeviceDto replaceOriginalDeviceDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'replaceOriginalDeviceDto' is set
        if (replaceOriginalDeviceDto == null) {
            throw new ApiException("Missing the required parameter 'replaceOriginalDeviceDto' when calling replaceOriginalDevice(Async)");
        }
        
        
        com.squareup.okhttp.Call call = replaceOriginalDeviceCall(replaceOriginalDeviceDto, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 替换设备款型
     * ## 典型场景 ##  设备款型替换。 ## 接口功能 ##  支持替换款型，支持无ESN替换 ## 接口约束 ##  该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
     * @param replaceOriginalDeviceDto 设备替换入参模型。 (required)
     * @return CommonResponseBean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CommonResponseBean replaceOriginalDevice(ReplaceOriginalDeviceDto replaceOriginalDeviceDto) throws ApiException {
        ApiResponse<CommonResponseBean> resp = replaceOriginalDeviceWithHttpInfo(replaceOriginalDeviceDto);
        return resp.getData();
    }

    /**
     * 替换设备款型
     * ## 典型场景 ##  设备款型替换。 ## 接口功能 ##  支持替换款型，支持无ESN替换 ## 接口约束 ##  该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
     * @param replaceOriginalDeviceDto 设备替换入参模型。 (required)
     * @return ApiResponse&lt;CommonResponseBean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CommonResponseBean> replaceOriginalDeviceWithHttpInfo(ReplaceOriginalDeviceDto replaceOriginalDeviceDto) throws ApiException {
        com.squareup.okhttp.Call call = replaceOriginalDeviceValidateBeforeCall(replaceOriginalDeviceDto, null, null);
        Type localVarReturnType = new TypeToken<CommonResponseBean>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 替换设备款型 (asynchronously)
     * ## 典型场景 ##  设备款型替换。 ## 接口功能 ##  支持替换款型，支持无ESN替换 ## 接口约束 ##  该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
     * @param replaceOriginalDeviceDto 设备替换入参模型。 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call replaceOriginalDeviceAsync(ReplaceOriginalDeviceDto replaceOriginalDeviceDto, final ApiCallback<CommonResponseBean> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = replaceOriginalDeviceValidateBeforeCall(replaceOriginalDeviceDto, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CommonResponseBean>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
