/*
 * 站点管理
 * 站点管理第三方接口。 场景：对站点增删改查操作的第三方接口。
 *
 * OpenAPI spec version: 1.3.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.huawei.cloudcampus.api.service;

import com.huawei.cloudcampus.api.ApiCallback;
import com.huawei.cloudcampus.api.ApiClient;
import com.huawei.cloudcampus.api.ApiException;
import com.huawei.cloudcampus.api.ApiResponse;
import com.huawei.cloudcampus.api.Configuration;
import com.huawei.cloudcampus.api.Pair;
import com.huawei.cloudcampus.api.ProgressRequestBody;
import com.huawei.cloudcampus.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.huawei.cloudcampus.api.model.CreateSiteDto;
import com.huawei.cloudcampus.api.model.CreateSiteOut;
import com.huawei.cloudcampus.api.model.DeleteSiteDto;
import com.huawei.cloudcampus.api.model.DeleteSiteOut;
import com.huawei.cloudcampus.api.model.QuerySitesOut;
import com.huawei.cloudcampus.api.model.UpdateSitesDto;
import com.huawei.cloudcampus.api.model.UpdateSitesOut;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SiteManagerApi {
    private ApiClient apiClient;

    public SiteManagerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SiteManagerApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createSites
     * @param createSiteDto 创建站点入参。 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createSitesCall(CreateSiteDto createSiteDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = createSiteDto;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v3/sites";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createSitesValidateBeforeCall(CreateSiteDto createSiteDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'createSiteDto' is set
        if (createSiteDto == null) {
            throw new ApiException("Missing the required parameter 'createSiteDto' when calling createSites(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createSitesCall(createSiteDto, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 创建站点
     * ## 典型场景 ## 根据站点名称和描述，创建站点。 ## 接口功能 ## 创建站点。 ## 接口约束 ## 该接口必须在用户会话建立后使用。 
     * @param createSiteDto 创建站点入参。 (required)
     * @return CreateSiteOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateSiteOut createSites(CreateSiteDto createSiteDto) throws ApiException {
        ApiResponse<CreateSiteOut> resp = createSitesWithHttpInfo(createSiteDto);
        return resp.getData();
    }

    /**
     * 创建站点
     * ## 典型场景 ## 根据站点名称和描述，创建站点。 ## 接口功能 ## 创建站点。 ## 接口约束 ## 该接口必须在用户会话建立后使用。 
     * @param createSiteDto 创建站点入参。 (required)
     * @return ApiResponse&lt;CreateSiteOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateSiteOut> createSitesWithHttpInfo(CreateSiteDto createSiteDto) throws ApiException {
        com.squareup.okhttp.Call call = createSitesValidateBeforeCall(createSiteDto, null, null);
        Type localVarReturnType = new TypeToken<CreateSiteOut>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 创建站点 (asynchronously)
     * ## 典型场景 ## 根据站点名称和描述，创建站点。 ## 接口功能 ## 创建站点。 ## 接口约束 ## 该接口必须在用户会话建立后使用。 
     * @param createSiteDto 创建站点入参。 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createSitesAsync(CreateSiteDto createSiteDto, final ApiCallback<CreateSiteOut> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createSitesValidateBeforeCall(createSiteDto, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateSiteOut>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteSites
     * @param deleteSiteDto 删除站点请求体。 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSitesCall(DeleteSiteDto deleteSiteDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = deleteSiteDto;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v3/sites";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteSitesValidateBeforeCall(DeleteSiteDto deleteSiteDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deleteSiteDto' is set
        if (deleteSiteDto == null) {
            throw new ApiException("Missing the required parameter 'deleteSiteDto' when calling deleteSites(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteSitesCall(deleteSiteDto, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 删除站点
     * ## 典型场景 ## 根据站点ID列表，删除对应的站点。 ## 接口功能 ## 删除站点。 ## 接口约束 ## 该接口必须在用户会话建立后使用。 
     * @param deleteSiteDto 删除站点请求体。 (required)
     * @return DeleteSiteOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeleteSiteOut deleteSites(DeleteSiteDto deleteSiteDto) throws ApiException {
        ApiResponse<DeleteSiteOut> resp = deleteSitesWithHttpInfo(deleteSiteDto);
        return resp.getData();
    }

    /**
     * 删除站点
     * ## 典型场景 ## 根据站点ID列表，删除对应的站点。 ## 接口功能 ## 删除站点。 ## 接口约束 ## 该接口必须在用户会话建立后使用。 
     * @param deleteSiteDto 删除站点请求体。 (required)
     * @return ApiResponse&lt;DeleteSiteOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeleteSiteOut> deleteSitesWithHttpInfo(DeleteSiteDto deleteSiteDto) throws ApiException {
        com.squareup.okhttp.Call call = deleteSitesValidateBeforeCall(deleteSiteDto, null, null);
        Type localVarReturnType = new TypeToken<DeleteSiteOut>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 删除站点 (asynchronously)
     * ## 典型场景 ## 根据站点ID列表，删除对应的站点。 ## 接口功能 ## 删除站点。 ## 接口约束 ## 该接口必须在用户会话建立后使用。 
     * @param deleteSiteDto 删除站点请求体。 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSitesAsync(DeleteSiteDto deleteSiteDto, final ApiCallback<DeleteSiteOut> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSitesValidateBeforeCall(deleteSiteDto, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeleteSiteOut>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for querySites
     * @param pageIndex 分页时，当前页面索引，值&lt;&#x3D;0时默认获取前20条数据。 (optional, default to 1)
     * @param pageSize 分页时，当前页面设备数据长度；pageIndex为空或&lt;&#x3D;0时，此参数默认20。 (optional, default to 20)
     * @param name 站点名称模糊查询，支持精确和模糊匹配，不支持正则。 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call querySitesCall(Integer pageIndex, Integer pageSize, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v3/sites";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (pageIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pageIndex", pageIndex));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pageSize", pageSize));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "name", name));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call querySitesValidateBeforeCall(Integer pageIndex, Integer pageSize, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = querySitesCall(pageIndex, pageSize, name, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 查询站点
     * ## 典型场景 ## 传入页面索引和页面长度，查询站点信息。 ## 接口功能 ## 查询站点列表。 ## 接口约束 ## 该接口必须在用户会话建立后使用。 
     * @param pageIndex 分页时，当前页面索引，值&lt;&#x3D;0时默认获取前20条数据。 (optional, default to 1)
     * @param pageSize 分页时，当前页面设备数据长度；pageIndex为空或&lt;&#x3D;0时，此参数默认20。 (optional, default to 20)
     * @param name 站点名称模糊查询，支持精确和模糊匹配，不支持正则。 (optional)
     * @return QuerySitesOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public QuerySitesOut querySites(Integer pageIndex, Integer pageSize, String name) throws ApiException {
        ApiResponse<QuerySitesOut> resp = querySitesWithHttpInfo(pageIndex, pageSize, name);
        return resp.getData();
    }

    /**
     * 查询站点
     * ## 典型场景 ## 传入页面索引和页面长度，查询站点信息。 ## 接口功能 ## 查询站点列表。 ## 接口约束 ## 该接口必须在用户会话建立后使用。 
     * @param pageIndex 分页时，当前页面索引，值&lt;&#x3D;0时默认获取前20条数据。 (optional, default to 1)
     * @param pageSize 分页时，当前页面设备数据长度；pageIndex为空或&lt;&#x3D;0时，此参数默认20。 (optional, default to 20)
     * @param name 站点名称模糊查询，支持精确和模糊匹配，不支持正则。 (optional)
     * @return ApiResponse&lt;QuerySitesOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<QuerySitesOut> querySitesWithHttpInfo(Integer pageIndex, Integer pageSize, String name) throws ApiException {
        com.squareup.okhttp.Call call = querySitesValidateBeforeCall(pageIndex, pageSize, name, null, null);
        Type localVarReturnType = new TypeToken<QuerySitesOut>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 查询站点 (asynchronously)
     * ## 典型场景 ## 传入页面索引和页面长度，查询站点信息。 ## 接口功能 ## 查询站点列表。 ## 接口约束 ## 该接口必须在用户会话建立后使用。 
     * @param pageIndex 分页时，当前页面索引，值&lt;&#x3D;0时默认获取前20条数据。 (optional, default to 1)
     * @param pageSize 分页时，当前页面设备数据长度；pageIndex为空或&lt;&#x3D;0时，此参数默认20。 (optional, default to 20)
     * @param name 站点名称模糊查询，支持精确和模糊匹配，不支持正则。 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call querySitesAsync(Integer pageIndex, Integer pageSize, String name, final ApiCallback<QuerySitesOut> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = querySitesValidateBeforeCall(pageIndex, pageSize, name, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<QuerySitesOut>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateSite
     * @param siteId 站点ID。 (required)
     * @param updateSiteDto 修改站点请求体。 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateSiteCall(String siteId, UpdateSitesDto updateSiteDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = updateSiteDto;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v3/sites/{siteId}"
            .replaceAll("\\{" + "siteId" + "\\}", apiClient.escapeString(siteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateSiteValidateBeforeCall(String siteId, UpdateSitesDto updateSiteDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling updateSite(Async)");
        }
        
        // verify the required parameter 'updateSiteDto' is set
        if (updateSiteDto == null) {
            throw new ApiException("Missing the required parameter 'updateSiteDto' when calling updateSite(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateSiteCall(siteId, updateSiteDto, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 修改站点
     * ## 典型场景 ## 根据站点ID，修改站点的名称和描述信息。 ## 接口功能 ## 修改站点。 ## 接口约束 ## 该接口必须在用户会话建立后使用。 
     * @param siteId 站点ID。 (required)
     * @param updateSiteDto 修改站点请求体。 (required)
     * @return UpdateSitesOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UpdateSitesOut updateSite(String siteId, UpdateSitesDto updateSiteDto) throws ApiException {
        ApiResponse<UpdateSitesOut> resp = updateSiteWithHttpInfo(siteId, updateSiteDto);
        return resp.getData();
    }

    /**
     * 修改站点
     * ## 典型场景 ## 根据站点ID，修改站点的名称和描述信息。 ## 接口功能 ## 修改站点。 ## 接口约束 ## 该接口必须在用户会话建立后使用。 
     * @param siteId 站点ID。 (required)
     * @param updateSiteDto 修改站点请求体。 (required)
     * @return ApiResponse&lt;UpdateSitesOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UpdateSitesOut> updateSiteWithHttpInfo(String siteId, UpdateSitesDto updateSiteDto) throws ApiException {
        com.squareup.okhttp.Call call = updateSiteValidateBeforeCall(siteId, updateSiteDto, null, null);
        Type localVarReturnType = new TypeToken<UpdateSitesOut>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 修改站点 (asynchronously)
     * ## 典型场景 ## 根据站点ID，修改站点的名称和描述信息。 ## 接口功能 ## 修改站点。 ## 接口约束 ## 该接口必须在用户会话建立后使用。 
     * @param siteId 站点ID。 (required)
     * @param updateSiteDto 修改站点请求体。 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateSiteAsync(String siteId, UpdateSitesDto updateSiteDto, final ApiCallback<UpdateSitesOut> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateSiteValidateBeforeCall(siteId, updateSiteDto, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UpdateSitesOut>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
