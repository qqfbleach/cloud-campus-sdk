/*
 * AP SSID配置管理
 * AP SSID第三方接口。
 *
 * OpenAPI spec version: 1.4.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.huawei.cloudcampus.api.service;

import com.huawei.cloudcampus.api.ApiCallback;
import com.huawei.cloudcampus.api.ApiClient;
import com.huawei.cloudcampus.api.ApiException;
import com.huawei.cloudcampus.api.ApiResponse;
import com.huawei.cloudcampus.api.Configuration;
import com.huawei.cloudcampus.api.Pair;
import com.huawei.cloudcampus.api.ProgressRequestBody;
import com.huawei.cloudcampus.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.huawei.cloudcampus.api.model.ConfigSsidResponse;
import com.huawei.cloudcampus.api.model.DeleteSsidResponse;
import com.huawei.cloudcampus.api.model.QuerySsidResponse;
import com.huawei.cloudcampus.api.model.SsidConfigDto;
import com.huawei.cloudcampus.api.model.SsidDeleteDto;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ApssidCfgNorthboundApi {
    private ApiClient apiClient;

    public ApssidCfgNorthboundApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ApssidCfgNorthboundApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createSiteSsidConfig
     * @param siteId 站点标识，UUID格式。 (required)
     * @param ssidConfigDto SSID配置 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createSiteSsidConfigCall(String siteId, SsidConfigDto ssidConfigDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = ssidConfigDto;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v3/networkconfig/site/{siteId}/apssid"
            .replaceAll("\\{" + "siteId" + "\\}", apiClient.escapeString(siteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createSiteSsidConfigValidateBeforeCall(String siteId, SsidConfigDto ssidConfigDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling createSiteSsidConfig(Async)");
        }
        
        // verify the required parameter 'ssidConfigDto' is set
        if (ssidConfigDto == null) {
            throw new ApiException("Missing the required parameter 'ssidConfigDto' when calling createSiteSsidConfig(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createSiteSsidConfigCall(siteId, ssidConfigDto, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 创建指定站点的SSID配置
     * ## 典型场景 ##   提供在指定站点，新增AP的SSID配置的接口。&lt;br&gt; ## 接口功能 ##   新增站点内AP的SSID配置。&lt;br&gt; ## 接口约束 ##   该接口租户下北向接口管理访问，必须在用户会话建立后使用。&lt;br&gt; 
     * @param siteId 站点标识，UUID格式。 (required)
     * @param ssidConfigDto SSID配置 (required)
     * @return ConfigSsidResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConfigSsidResponse createSiteSsidConfig(String siteId, SsidConfigDto ssidConfigDto) throws ApiException {
        ApiResponse<ConfigSsidResponse> resp = createSiteSsidConfigWithHttpInfo(siteId, ssidConfigDto);
        return resp.getData();
    }

    /**
     * 创建指定站点的SSID配置
     * ## 典型场景 ##   提供在指定站点，新增AP的SSID配置的接口。&lt;br&gt; ## 接口功能 ##   新增站点内AP的SSID配置。&lt;br&gt; ## 接口约束 ##   该接口租户下北向接口管理访问，必须在用户会话建立后使用。&lt;br&gt; 
     * @param siteId 站点标识，UUID格式。 (required)
     * @param ssidConfigDto SSID配置 (required)
     * @return ApiResponse&lt;ConfigSsidResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConfigSsidResponse> createSiteSsidConfigWithHttpInfo(String siteId, SsidConfigDto ssidConfigDto) throws ApiException {
        com.squareup.okhttp.Call call = createSiteSsidConfigValidateBeforeCall(siteId, ssidConfigDto, null, null);
        Type localVarReturnType = new TypeToken<ConfigSsidResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 创建指定站点的SSID配置 (asynchronously)
     * ## 典型场景 ##   提供在指定站点，新增AP的SSID配置的接口。&lt;br&gt; ## 接口功能 ##   新增站点内AP的SSID配置。&lt;br&gt; ## 接口约束 ##   该接口租户下北向接口管理访问，必须在用户会话建立后使用。&lt;br&gt; 
     * @param siteId 站点标识，UUID格式。 (required)
     * @param ssidConfigDto SSID配置 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createSiteSsidConfigAsync(String siteId, SsidConfigDto ssidConfigDto, final ApiCallback<ConfigSsidResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createSiteSsidConfigValidateBeforeCall(siteId, ssidConfigDto, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConfigSsidResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteSiteSsidConfig
     * @param siteId 站点标识，UUID格式。 (required)
     * @param id 待删除的ID。 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSiteSsidConfigCall(String siteId, SsidDeleteDto id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = id;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v3/networkconfig/site/{siteId}/apssid"
            .replaceAll("\\{" + "siteId" + "\\}", apiClient.escapeString(siteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteSiteSsidConfigValidateBeforeCall(String siteId, SsidDeleteDto id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling deleteSiteSsidConfig(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteSiteSsidConfig(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteSiteSsidConfigCall(siteId, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 删除指定站点的SSID配置
     * ## 典型场景 ##   删除AP的SSID配置的接口。&lt;br&gt; ## 接口功能 ##   删除站点内AP的SSID配置。&lt;br&gt; ## 接口约束 ##   该接口租户下北向接口管理访问，必须在用户会话建立后使用。&lt;br&gt; 
     * @param siteId 站点标识，UUID格式。 (required)
     * @param id 待删除的ID。 (required)
     * @return DeleteSsidResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeleteSsidResponse deleteSiteSsidConfig(String siteId, SsidDeleteDto id) throws ApiException {
        ApiResponse<DeleteSsidResponse> resp = deleteSiteSsidConfigWithHttpInfo(siteId, id);
        return resp.getData();
    }

    /**
     * 删除指定站点的SSID配置
     * ## 典型场景 ##   删除AP的SSID配置的接口。&lt;br&gt; ## 接口功能 ##   删除站点内AP的SSID配置。&lt;br&gt; ## 接口约束 ##   该接口租户下北向接口管理访问，必须在用户会话建立后使用。&lt;br&gt; 
     * @param siteId 站点标识，UUID格式。 (required)
     * @param id 待删除的ID。 (required)
     * @return ApiResponse&lt;DeleteSsidResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeleteSsidResponse> deleteSiteSsidConfigWithHttpInfo(String siteId, SsidDeleteDto id) throws ApiException {
        com.squareup.okhttp.Call call = deleteSiteSsidConfigValidateBeforeCall(siteId, id, null, null);
        Type localVarReturnType = new TypeToken<DeleteSsidResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 删除指定站点的SSID配置 (asynchronously)
     * ## 典型场景 ##   删除AP的SSID配置的接口。&lt;br&gt; ## 接口功能 ##   删除站点内AP的SSID配置。&lt;br&gt; ## 接口约束 ##   该接口租户下北向接口管理访问，必须在用户会话建立后使用。&lt;br&gt; 
     * @param siteId 站点标识，UUID格式。 (required)
     * @param id 待删除的ID。 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSiteSsidConfigAsync(String siteId, SsidDeleteDto id, final ApiCallback<DeleteSsidResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSiteSsidConfigValidateBeforeCall(siteId, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeleteSsidResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSiteSsidConfig
     * @param siteId 站点标识，UUID格式。 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSiteSsidConfigCall(String siteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v3/networkconfig/site/{siteId}/apssid"
            .replaceAll("\\{" + "siteId" + "\\}", apiClient.escapeString(siteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSiteSsidConfigValidateBeforeCall(String siteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling getSiteSsidConfig(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getSiteSsidConfigCall(siteId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 查询指定站点的SSID配置
     * ## 典型场景 ##   提供siteId查询站点内AP的SSID配置列表。&lt;br&gt; ## 接口功能 ##   查询站点内AP的SSID配置列表。&lt;br&gt; ## 接口约束 ##   该接口租户下北向接口管理访问，必须在用户会话建立后使用。&lt;br&gt; 
     * @param siteId 站点标识，UUID格式。 (required)
     * @return QuerySsidResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public QuerySsidResponse getSiteSsidConfig(String siteId) throws ApiException {
        ApiResponse<QuerySsidResponse> resp = getSiteSsidConfigWithHttpInfo(siteId);
        return resp.getData();
    }

    /**
     * 查询指定站点的SSID配置
     * ## 典型场景 ##   提供siteId查询站点内AP的SSID配置列表。&lt;br&gt; ## 接口功能 ##   查询站点内AP的SSID配置列表。&lt;br&gt; ## 接口约束 ##   该接口租户下北向接口管理访问，必须在用户会话建立后使用。&lt;br&gt; 
     * @param siteId 站点标识，UUID格式。 (required)
     * @return ApiResponse&lt;QuerySsidResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<QuerySsidResponse> getSiteSsidConfigWithHttpInfo(String siteId) throws ApiException {
        com.squareup.okhttp.Call call = getSiteSsidConfigValidateBeforeCall(siteId, null, null);
        Type localVarReturnType = new TypeToken<QuerySsidResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 查询指定站点的SSID配置 (asynchronously)
     * ## 典型场景 ##   提供siteId查询站点内AP的SSID配置列表。&lt;br&gt; ## 接口功能 ##   查询站点内AP的SSID配置列表。&lt;br&gt; ## 接口约束 ##   该接口租户下北向接口管理访问，必须在用户会话建立后使用。&lt;br&gt; 
     * @param siteId 站点标识，UUID格式。 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSiteSsidConfigAsync(String siteId, final ApiCallback<QuerySsidResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSiteSsidConfigValidateBeforeCall(siteId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<QuerySsidResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateSiteSsidConfig
     * @param siteId 站点标识，UUID格式。 (required)
     * @param id SSID标识，创建或查询Response中的ID字段。 (required)
     * @param ssidConfigDto ssid配置。 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateSiteSsidConfigCall(String siteId, String id, SsidConfigDto ssidConfigDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = ssidConfigDto;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v3/networkconfig/site/{siteId}/apssid/{id}"
            .replaceAll("\\{" + "siteId" + "\\}", apiClient.escapeString(siteId.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateSiteSsidConfigValidateBeforeCall(String siteId, String id, SsidConfigDto ssidConfigDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling updateSiteSsidConfig(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateSiteSsidConfig(Async)");
        }
        
        // verify the required parameter 'ssidConfigDto' is set
        if (ssidConfigDto == null) {
            throw new ApiException("Missing the required parameter 'ssidConfigDto' when calling updateSiteSsidConfig(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateSiteSsidConfigCall(siteId, id, ssidConfigDto, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 修改指定站点的SSID配置
     * ## 典型场景 ##   提供在指定站点，修改AP的SSID配置的接口。&lt;br&gt; ## 接口功能 ##   修改站点内AP的SSID配置。&lt;br&gt; ## 接口约束 ##   该接口租户下北向接口管理访问，必须在用户会话建立后使用。&lt;br&gt; 
     * @param siteId 站点标识，UUID格式。 (required)
     * @param id SSID标识，创建或查询Response中的ID字段。 (required)
     * @param ssidConfigDto ssid配置。 (required)
     * @return ConfigSsidResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConfigSsidResponse updateSiteSsidConfig(String siteId, String id, SsidConfigDto ssidConfigDto) throws ApiException {
        ApiResponse<ConfigSsidResponse> resp = updateSiteSsidConfigWithHttpInfo(siteId, id, ssidConfigDto);
        return resp.getData();
    }

    /**
     * 修改指定站点的SSID配置
     * ## 典型场景 ##   提供在指定站点，修改AP的SSID配置的接口。&lt;br&gt; ## 接口功能 ##   修改站点内AP的SSID配置。&lt;br&gt; ## 接口约束 ##   该接口租户下北向接口管理访问，必须在用户会话建立后使用。&lt;br&gt; 
     * @param siteId 站点标识，UUID格式。 (required)
     * @param id SSID标识，创建或查询Response中的ID字段。 (required)
     * @param ssidConfigDto ssid配置。 (required)
     * @return ApiResponse&lt;ConfigSsidResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConfigSsidResponse> updateSiteSsidConfigWithHttpInfo(String siteId, String id, SsidConfigDto ssidConfigDto) throws ApiException {
        com.squareup.okhttp.Call call = updateSiteSsidConfigValidateBeforeCall(siteId, id, ssidConfigDto, null, null);
        Type localVarReturnType = new TypeToken<ConfigSsidResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 修改指定站点的SSID配置 (asynchronously)
     * ## 典型场景 ##   提供在指定站点，修改AP的SSID配置的接口。&lt;br&gt; ## 接口功能 ##   修改站点内AP的SSID配置。&lt;br&gt; ## 接口约束 ##   该接口租户下北向接口管理访问，必须在用户会话建立后使用。&lt;br&gt; 
     * @param siteId 站点标识，UUID格式。 (required)
     * @param id SSID标识，创建或查询Response中的ID字段。 (required)
     * @param ssidConfigDto ssid配置。 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateSiteSsidConfigAsync(String siteId, String id, SsidConfigDto ssidConfigDto, final ApiCallback<ConfigSsidResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateSiteSsidConfigValidateBeforeCall(siteId, id, ssidConfigDto, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConfigSsidResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
