/*
 * 终端客流量数据信息查询
 * 1、查询设备标签。 2、查询历史客户流量。 3、查询实时客户流量，返回最近5分钟内接入客户流量。 4、查询访客、路人、接入用户的历史趋势。 5、查询访客驻留时长的历史趋势。 6、查询回头客记录。 
 *
 * OpenAPI spec version: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.huawei.cloudcampus.api.service;

import com.huawei.cloudcampus.api.ApiCallback;
import com.huawei.cloudcampus.api.ApiClient;
import com.huawei.cloudcampus.api.ApiException;
import com.huawei.cloudcampus.api.ApiResponse;
import com.huawei.cloudcampus.api.Configuration;
import com.huawei.cloudcampus.api.Pair;
import com.huawei.cloudcampus.api.ProgressRequestBody;
import com.huawei.cloudcampus.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.huawei.cloudcampus.api.model.DeviceGroupTagResp;
import com.huawei.cloudcampus.api.model.FlowDistrResp;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EndpointanlsOpenApiApi {
    private ApiClient apiClient;

    public EndpointanlsOpenApiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EndpointanlsOpenApiApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getDeviceGroupTags
     * @param siteId 站点ID。 (required)
     * @param pageSize 分页的大小。 (required)
     * @param pageIndex 分页的序号。 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDeviceGroupTagsCall(String siteId, Integer pageSize, Integer pageIndex, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v1/performanceservice/endpointbehavior/tags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (siteId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "siteId", siteId));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pageSize", pageSize));
        if (pageIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pageIndex", pageIndex));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDeviceGroupTagsValidateBeforeCall(String siteId, Integer pageSize, Integer pageIndex, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling getDeviceGroupTags(Async)");
        }
        
        // verify the required parameter 'pageSize' is set
        if (pageSize == null) {
            throw new ApiException("Missing the required parameter 'pageSize' when calling getDeviceGroupTags(Async)");
        }
        
        // verify the required parameter 'pageIndex' is set
        if (pageIndex == null) {
            throw new ApiException("Missing the required parameter 'pageIndex' when calling getDeviceGroupTags(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getDeviceGroupTagsCall(siteId, pageSize, pageIndex, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 获取设备标签
     * ## 典型场景 ##    提供查询设备标签。           ## 接口功能 ##    查询设备标签，设备标签在监控-&gt;设备360-&gt;AP-AP中创建，单个设备最多可以创建10个标签。 ## 接口约束 ##    1、只有租户管理员获取token并建立会话后才能调用该接口。    2、若pageSize和pageIndex参数不传或者为非法参数，则默认按照pageSize&#x3D;1000，pageIndex&#x3D;0返回查询结果。     
     * @param siteId 站点ID。 (required)
     * @param pageSize 分页的大小。 (required)
     * @param pageIndex 分页的序号。 (required)
     * @return DeviceGroupTagResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeviceGroupTagResp getDeviceGroupTags(String siteId, Integer pageSize, Integer pageIndex) throws ApiException {
        ApiResponse<DeviceGroupTagResp> resp = getDeviceGroupTagsWithHttpInfo(siteId, pageSize, pageIndex);
        return resp.getData();
    }

    /**
     * 获取设备标签
     * ## 典型场景 ##    提供查询设备标签。           ## 接口功能 ##    查询设备标签，设备标签在监控-&gt;设备360-&gt;AP-AP中创建，单个设备最多可以创建10个标签。 ## 接口约束 ##    1、只有租户管理员获取token并建立会话后才能调用该接口。    2、若pageSize和pageIndex参数不传或者为非法参数，则默认按照pageSize&#x3D;1000，pageIndex&#x3D;0返回查询结果。     
     * @param siteId 站点ID。 (required)
     * @param pageSize 分页的大小。 (required)
     * @param pageIndex 分页的序号。 (required)
     * @return ApiResponse&lt;DeviceGroupTagResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeviceGroupTagResp> getDeviceGroupTagsWithHttpInfo(String siteId, Integer pageSize, Integer pageIndex) throws ApiException {
        com.squareup.okhttp.Call call = getDeviceGroupTagsValidateBeforeCall(siteId, pageSize, pageIndex, null, null);
        Type localVarReturnType = new TypeToken<DeviceGroupTagResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 获取设备标签 (asynchronously)
     * ## 典型场景 ##    提供查询设备标签。           ## 接口功能 ##    查询设备标签，设备标签在监控-&gt;设备360-&gt;AP-AP中创建，单个设备最多可以创建10个标签。 ## 接口约束 ##    1、只有租户管理员获取token并建立会话后才能调用该接口。    2、若pageSize和pageIndex参数不传或者为非法参数，则默认按照pageSize&#x3D;1000，pageIndex&#x3D;0返回查询结果。     
     * @param siteId 站点ID。 (required)
     * @param pageSize 分页的大小。 (required)
     * @param pageIndex 分页的序号。 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDeviceGroupTagsAsync(String siteId, Integer pageSize, Integer pageIndex, final ApiCallback<DeviceGroupTagResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDeviceGroupTagsValidateBeforeCall(siteId, pageSize, pageIndex, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeviceGroupTagResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getHistoryFlowDistr
     * @param siteId 站点ID。 (required)
     * @param startTime 时间戳（毫秒），最大时间差不超过一年。 (required)
     * @param endTime 时间戳（毫秒），最大时间差不超过一年。 (required)
     * @param tagId 标签ID，UUID格式，非必填，若不填，则默认查询站点下所有设备。 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getHistoryFlowDistrCall(String siteId, Long startTime, Long endTime, String tagId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v1/performanceservice/endpointbehavior/historyflow";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (siteId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "siteId", siteId));
        if (tagId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "tagId", tagId));
        if (startTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "startTime", startTime));
        if (endTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "endTime", endTime));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getHistoryFlowDistrValidateBeforeCall(String siteId, Long startTime, Long endTime, String tagId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling getHistoryFlowDistr(Async)");
        }
        
        // verify the required parameter 'startTime' is set
        if (startTime == null) {
            throw new ApiException("Missing the required parameter 'startTime' when calling getHistoryFlowDistr(Async)");
        }
        
        // verify the required parameter 'endTime' is set
        if (endTime == null) {
            throw new ApiException("Missing the required parameter 'endTime' when calling getHistoryFlowDistr(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getHistoryFlowDistrCall(siteId, startTime, endTime, tagId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 查询历史接入客户数量
     * ## 典型场景 ##    查询历史客户流量。           ## 接口功能 ##    查询历史接入客户流量。 ## 接口约束 ##    1、只有租户管理员获取token并建立会话后才能调用该接口。    2、若时间差大于一个月小于一年，则以月时间粒度返回查询结果。    3、若时间差小于一个月大于一周，则以天时间维度返回查询结果。    4、若时间差小于一周，则以小时维度返回查询结果。    5、不支持超过一年以上的数据查询。         
     * @param siteId 站点ID。 (required)
     * @param startTime 时间戳（毫秒），最大时间差不超过一年。 (required)
     * @param endTime 时间戳（毫秒），最大时间差不超过一年。 (required)
     * @param tagId 标签ID，UUID格式，非必填，若不填，则默认查询站点下所有设备。 (optional)
     * @return FlowDistrResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FlowDistrResp getHistoryFlowDistr(String siteId, Long startTime, Long endTime, String tagId) throws ApiException {
        ApiResponse<FlowDistrResp> resp = getHistoryFlowDistrWithHttpInfo(siteId, startTime, endTime, tagId);
        return resp.getData();
    }

    /**
     * 查询历史接入客户数量
     * ## 典型场景 ##    查询历史客户流量。           ## 接口功能 ##    查询历史接入客户流量。 ## 接口约束 ##    1、只有租户管理员获取token并建立会话后才能调用该接口。    2、若时间差大于一个月小于一年，则以月时间粒度返回查询结果。    3、若时间差小于一个月大于一周，则以天时间维度返回查询结果。    4、若时间差小于一周，则以小时维度返回查询结果。    5、不支持超过一年以上的数据查询。         
     * @param siteId 站点ID。 (required)
     * @param startTime 时间戳（毫秒），最大时间差不超过一年。 (required)
     * @param endTime 时间戳（毫秒），最大时间差不超过一年。 (required)
     * @param tagId 标签ID，UUID格式，非必填，若不填，则默认查询站点下所有设备。 (optional)
     * @return ApiResponse&lt;FlowDistrResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FlowDistrResp> getHistoryFlowDistrWithHttpInfo(String siteId, Long startTime, Long endTime, String tagId) throws ApiException {
        com.squareup.okhttp.Call call = getHistoryFlowDistrValidateBeforeCall(siteId, startTime, endTime, tagId, null, null);
        Type localVarReturnType = new TypeToken<FlowDistrResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 查询历史接入客户数量 (asynchronously)
     * ## 典型场景 ##    查询历史客户流量。           ## 接口功能 ##    查询历史接入客户流量。 ## 接口约束 ##    1、只有租户管理员获取token并建立会话后才能调用该接口。    2、若时间差大于一个月小于一年，则以月时间粒度返回查询结果。    3、若时间差小于一个月大于一周，则以天时间维度返回查询结果。    4、若时间差小于一周，则以小时维度返回查询结果。    5、不支持超过一年以上的数据查询。         
     * @param siteId 站点ID。 (required)
     * @param startTime 时间戳（毫秒），最大时间差不超过一年。 (required)
     * @param endTime 时间戳（毫秒），最大时间差不超过一年。 (required)
     * @param tagId 标签ID，UUID格式，非必填，若不填，则默认查询站点下所有设备。 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getHistoryFlowDistrAsync(String siteId, Long startTime, Long endTime, String tagId, final ApiCallback<FlowDistrResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getHistoryFlowDistrValidateBeforeCall(siteId, startTime, endTime, tagId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FlowDistrResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getRealtimeFlowDistr
     * @param siteId 站点ID。 (required)
     * @param tagId 标签ID，若不设置，则默认查询站点下所有设备。 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRealtimeFlowDistrCall(String siteId, String tagId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v1/performanceservice/endpointbehavior/realtimeflow";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (siteId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "siteId", siteId));
        if (tagId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "tagId", tagId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRealtimeFlowDistrValidateBeforeCall(String siteId, String tagId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling getRealtimeFlowDistr(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getRealtimeFlowDistrCall(siteId, tagId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 查询实时接入客户数量
     * ## 典型场景 ##    查询历史实时客户流量。           ## 接口功能 ##    查询历史实时客户数量，返回最近5分钟内接入客户流量。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。 
     * @param siteId 站点ID。 (required)
     * @param tagId 标签ID，若不设置，则默认查询站点下所有设备。 (optional)
     * @return FlowDistrResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FlowDistrResp getRealtimeFlowDistr(String siteId, String tagId) throws ApiException {
        ApiResponse<FlowDistrResp> resp = getRealtimeFlowDistrWithHttpInfo(siteId, tagId);
        return resp.getData();
    }

    /**
     * 查询实时接入客户数量
     * ## 典型场景 ##    查询历史实时客户流量。           ## 接口功能 ##    查询历史实时客户数量，返回最近5分钟内接入客户流量。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。 
     * @param siteId 站点ID。 (required)
     * @param tagId 标签ID，若不设置，则默认查询站点下所有设备。 (optional)
     * @return ApiResponse&lt;FlowDistrResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FlowDistrResp> getRealtimeFlowDistrWithHttpInfo(String siteId, String tagId) throws ApiException {
        com.squareup.okhttp.Call call = getRealtimeFlowDistrValidateBeforeCall(siteId, tagId, null, null);
        Type localVarReturnType = new TypeToken<FlowDistrResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 查询实时接入客户数量 (asynchronously)
     * ## 典型场景 ##    查询历史实时客户流量。           ## 接口功能 ##    查询历史实时客户数量，返回最近5分钟内接入客户流量。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。 
     * @param siteId 站点ID。 (required)
     * @param tagId 标签ID，若不设置，则默认查询站点下所有设备。 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRealtimeFlowDistrAsync(String siteId, String tagId, final ApiCallback<FlowDistrResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRealtimeFlowDistrValidateBeforeCall(siteId, tagId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FlowDistrResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for queryCaptureRateDistr
     * @param tagId 设备标签，若设备标签不存在或查询所有设备，需填写站点ID。 (required)
     * @param tagType 标签类型：  0---TagID为站点ID。  1---TagID为标签ID。  (required)
     * @param startTime 时间戳（秒），最大时间差不超过一年。 (required)
     * @param endTime 时间戳（秒），最大时间差不超过一年。 (required)
     * @param timeUnit 时间维度。   day---天维度   week---周维度   month---月维度   custom---自定义维度  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call queryCaptureRateDistrCall(String tagId, String tagType, Integer startTime, Integer endTime, String timeUnit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v1/performanceservice/endpointbehavior/capturerate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (tagId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "tagId", tagId));
        if (tagType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "tagType", tagType));
        if (startTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "startTime", startTime));
        if (endTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "endTime", endTime));
        if (timeUnit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "timeUnit", timeUnit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call queryCaptureRateDistrValidateBeforeCall(String tagId, String tagType, Integer startTime, Integer endTime, String timeUnit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tagId' is set
        if (tagId == null) {
            throw new ApiException("Missing the required parameter 'tagId' when calling queryCaptureRateDistr(Async)");
        }
        
        // verify the required parameter 'tagType' is set
        if (tagType == null) {
            throw new ApiException("Missing the required parameter 'tagType' when calling queryCaptureRateDistr(Async)");
        }
        
        // verify the required parameter 'startTime' is set
        if (startTime == null) {
            throw new ApiException("Missing the required parameter 'startTime' when calling queryCaptureRateDistr(Async)");
        }
        
        // verify the required parameter 'endTime' is set
        if (endTime == null) {
            throw new ApiException("Missing the required parameter 'endTime' when calling queryCaptureRateDistr(Async)");
        }
        
        // verify the required parameter 'timeUnit' is set
        if (timeUnit == null) {
            throw new ApiException("Missing the required parameter 'timeUnit' when calling queryCaptureRateDistr(Async)");
        }
        
        
        com.squareup.okhttp.Call call = queryCaptureRateDistrCall(tagId, tagType, startTime, endTime, timeUnit, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 查询访客、路人、接入用户的历史趋势
     * ## 典型场景 ##    查询访客、路人、接入用户的历史趋势。           ## 接口功能 ##    查询访客、路人、接入用户的历史趋势。    访客：以一小时为周期，一小时内连续5分钟都被探测到的终端，识别为访客。    路人：不满足访客条件的终端，均识别为路人。    接入用户：已关联或已认证的终端，识别为接入用户。 ## 接口约束 ##    1、只有租户管理员获取token并建立会话后才能调用该接口。    2、若时间差大于一个月小于一年，则以月时间粒度返回查询结果。    3、若时间差小于一个月大于一周，则以天时间维度返回查询结果。    4、若时间差小于一周，则以小时维度返回查询结果。    5、不支持超过一年以上的数据查询。            
     * @param tagId 设备标签，若设备标签不存在或查询所有设备，需填写站点ID。 (required)
     * @param tagType 标签类型：  0---TagID为站点ID。  1---TagID为标签ID。  (required)
     * @param startTime 时间戳（秒），最大时间差不超过一年。 (required)
     * @param endTime 时间戳（秒），最大时间差不超过一年。 (required)
     * @param timeUnit 时间维度。   day---天维度   week---周维度   month---月维度   custom---自定义维度  (required)
     * @return FlowDistrResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FlowDistrResp queryCaptureRateDistr(String tagId, String tagType, Integer startTime, Integer endTime, String timeUnit) throws ApiException {
        ApiResponse<FlowDistrResp> resp = queryCaptureRateDistrWithHttpInfo(tagId, tagType, startTime, endTime, timeUnit);
        return resp.getData();
    }

    /**
     * 查询访客、路人、接入用户的历史趋势
     * ## 典型场景 ##    查询访客、路人、接入用户的历史趋势。           ## 接口功能 ##    查询访客、路人、接入用户的历史趋势。    访客：以一小时为周期，一小时内连续5分钟都被探测到的终端，识别为访客。    路人：不满足访客条件的终端，均识别为路人。    接入用户：已关联或已认证的终端，识别为接入用户。 ## 接口约束 ##    1、只有租户管理员获取token并建立会话后才能调用该接口。    2、若时间差大于一个月小于一年，则以月时间粒度返回查询结果。    3、若时间差小于一个月大于一周，则以天时间维度返回查询结果。    4、若时间差小于一周，则以小时维度返回查询结果。    5、不支持超过一年以上的数据查询。            
     * @param tagId 设备标签，若设备标签不存在或查询所有设备，需填写站点ID。 (required)
     * @param tagType 标签类型：  0---TagID为站点ID。  1---TagID为标签ID。  (required)
     * @param startTime 时间戳（秒），最大时间差不超过一年。 (required)
     * @param endTime 时间戳（秒），最大时间差不超过一年。 (required)
     * @param timeUnit 时间维度。   day---天维度   week---周维度   month---月维度   custom---自定义维度  (required)
     * @return ApiResponse&lt;FlowDistrResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FlowDistrResp> queryCaptureRateDistrWithHttpInfo(String tagId, String tagType, Integer startTime, Integer endTime, String timeUnit) throws ApiException {
        com.squareup.okhttp.Call call = queryCaptureRateDistrValidateBeforeCall(tagId, tagType, startTime, endTime, timeUnit, null, null);
        Type localVarReturnType = new TypeToken<FlowDistrResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 查询访客、路人、接入用户的历史趋势 (asynchronously)
     * ## 典型场景 ##    查询访客、路人、接入用户的历史趋势。           ## 接口功能 ##    查询访客、路人、接入用户的历史趋势。    访客：以一小时为周期，一小时内连续5分钟都被探测到的终端，识别为访客。    路人：不满足访客条件的终端，均识别为路人。    接入用户：已关联或已认证的终端，识别为接入用户。 ## 接口约束 ##    1、只有租户管理员获取token并建立会话后才能调用该接口。    2、若时间差大于一个月小于一年，则以月时间粒度返回查询结果。    3、若时间差小于一个月大于一周，则以天时间维度返回查询结果。    4、若时间差小于一周，则以小时维度返回查询结果。    5、不支持超过一年以上的数据查询。            
     * @param tagId 设备标签，若设备标签不存在或查询所有设备，需填写站点ID。 (required)
     * @param tagType 标签类型：  0---TagID为站点ID。  1---TagID为标签ID。  (required)
     * @param startTime 时间戳（秒），最大时间差不超过一年。 (required)
     * @param endTime 时间戳（秒），最大时间差不超过一年。 (required)
     * @param timeUnit 时间维度。   day---天维度   week---周维度   month---月维度   custom---自定义维度  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call queryCaptureRateDistrAsync(String tagId, String tagType, Integer startTime, Integer endTime, String timeUnit, final ApiCallback<FlowDistrResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = queryCaptureRateDistrValidateBeforeCall(tagId, tagType, startTime, endTime, timeUnit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FlowDistrResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for queryDwellTimeDistr
     * @param tagId 设备标签，若设备标签不存在或查询所有设备，需填写站点ID。 (required)
     * @param tagType 标签类型：  0---TagID为站点ID，  1---TagID为标签ID。  (required)
     * @param startTime 时间戳（秒），最大时间差不超过一年。 (required)
     * @param endTime 时间戳（秒），最大时间差不超过一年。 (required)
     * @param timeUnit 时间维度。   day---天维度   week---周维度   month---月维度   custom---自定义维度  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call queryDwellTimeDistrCall(String tagId, String tagType, Integer startTime, Integer endTime, String timeUnit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v1/performanceservice/endpointbehavior/dwelltime";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (tagId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "tagId", tagId));
        if (tagType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "tagType", tagType));
        if (startTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "startTime", startTime));
        if (endTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "endTime", endTime));
        if (timeUnit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "timeUnit", timeUnit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call queryDwellTimeDistrValidateBeforeCall(String tagId, String tagType, Integer startTime, Integer endTime, String timeUnit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tagId' is set
        if (tagId == null) {
            throw new ApiException("Missing the required parameter 'tagId' when calling queryDwellTimeDistr(Async)");
        }
        
        // verify the required parameter 'tagType' is set
        if (tagType == null) {
            throw new ApiException("Missing the required parameter 'tagType' when calling queryDwellTimeDistr(Async)");
        }
        
        // verify the required parameter 'startTime' is set
        if (startTime == null) {
            throw new ApiException("Missing the required parameter 'startTime' when calling queryDwellTimeDistr(Async)");
        }
        
        // verify the required parameter 'endTime' is set
        if (endTime == null) {
            throw new ApiException("Missing the required parameter 'endTime' when calling queryDwellTimeDistr(Async)");
        }
        
        // verify the required parameter 'timeUnit' is set
        if (timeUnit == null) {
            throw new ApiException("Missing the required parameter 'timeUnit' when calling queryDwellTimeDistr(Async)");
        }
        
        
        com.squareup.okhttp.Call call = queryDwellTimeDistrCall(tagId, tagType, startTime, endTime, timeUnit, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 查询访客驻留时长的历史趋势
     * ## 典型场景 ##    查询访客驻留时长的历史趋势。           ## 接口功能 ##    查询访客驻留时长的历史趋势。 ## 接口约束 ##    1、只有租户管理员获取token并建立会话后才能调用该接口。    2、若时间差大于一个月小于一年，则以月时间粒度返回查询结果。    3、若时间差小于一个月大于一周，则以天时间维度返回查询结果。    4、若时间差小于一周，则以小时维度返回查询结果。    5、不支持超过一年以上的数据查询。  
     * @param tagId 设备标签，若设备标签不存在或查询所有设备，需填写站点ID。 (required)
     * @param tagType 标签类型：  0---TagID为站点ID，  1---TagID为标签ID。  (required)
     * @param startTime 时间戳（秒），最大时间差不超过一年。 (required)
     * @param endTime 时间戳（秒），最大时间差不超过一年。 (required)
     * @param timeUnit 时间维度。   day---天维度   week---周维度   month---月维度   custom---自定义维度  (required)
     * @return FlowDistrResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FlowDistrResp queryDwellTimeDistr(String tagId, String tagType, Integer startTime, Integer endTime, String timeUnit) throws ApiException {
        ApiResponse<FlowDistrResp> resp = queryDwellTimeDistrWithHttpInfo(tagId, tagType, startTime, endTime, timeUnit);
        return resp.getData();
    }

    /**
     * 查询访客驻留时长的历史趋势
     * ## 典型场景 ##    查询访客驻留时长的历史趋势。           ## 接口功能 ##    查询访客驻留时长的历史趋势。 ## 接口约束 ##    1、只有租户管理员获取token并建立会话后才能调用该接口。    2、若时间差大于一个月小于一年，则以月时间粒度返回查询结果。    3、若时间差小于一个月大于一周，则以天时间维度返回查询结果。    4、若时间差小于一周，则以小时维度返回查询结果。    5、不支持超过一年以上的数据查询。  
     * @param tagId 设备标签，若设备标签不存在或查询所有设备，需填写站点ID。 (required)
     * @param tagType 标签类型：  0---TagID为站点ID，  1---TagID为标签ID。  (required)
     * @param startTime 时间戳（秒），最大时间差不超过一年。 (required)
     * @param endTime 时间戳（秒），最大时间差不超过一年。 (required)
     * @param timeUnit 时间维度。   day---天维度   week---周维度   month---月维度   custom---自定义维度  (required)
     * @return ApiResponse&lt;FlowDistrResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FlowDistrResp> queryDwellTimeDistrWithHttpInfo(String tagId, String tagType, Integer startTime, Integer endTime, String timeUnit) throws ApiException {
        com.squareup.okhttp.Call call = queryDwellTimeDistrValidateBeforeCall(tagId, tagType, startTime, endTime, timeUnit, null, null);
        Type localVarReturnType = new TypeToken<FlowDistrResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 查询访客驻留时长的历史趋势 (asynchronously)
     * ## 典型场景 ##    查询访客驻留时长的历史趋势。           ## 接口功能 ##    查询访客驻留时长的历史趋势。 ## 接口约束 ##    1、只有租户管理员获取token并建立会话后才能调用该接口。    2、若时间差大于一个月小于一年，则以月时间粒度返回查询结果。    3、若时间差小于一个月大于一周，则以天时间维度返回查询结果。    4、若时间差小于一周，则以小时维度返回查询结果。    5、不支持超过一年以上的数据查询。  
     * @param tagId 设备标签，若设备标签不存在或查询所有设备，需填写站点ID。 (required)
     * @param tagType 标签类型：  0---TagID为站点ID，  1---TagID为标签ID。  (required)
     * @param startTime 时间戳（秒），最大时间差不超过一年。 (required)
     * @param endTime 时间戳（秒），最大时间差不超过一年。 (required)
     * @param timeUnit 时间维度。   day---天维度   week---周维度   month---月维度   custom---自定义维度  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call queryDwellTimeDistrAsync(String tagId, String tagType, Integer startTime, Integer endTime, String timeUnit, final ApiCallback<FlowDistrResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = queryDwellTimeDistrValidateBeforeCall(tagId, tagType, startTime, endTime, timeUnit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FlowDistrResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for queryLoyaltyDistr
     * @param tagId 设备标签，若设备标签不存在或查询所有设备，需填写站点ID。 (required)
     * @param tagType 标签类型：  0---TagID为站点ID，  1---TagID为标签ID。  (required)
     * @param startTime 时间戳（秒），最大时间差不超过一年。 (required)
     * @param endTime 时间戳（秒），最大时间差不超过一年。 (required)
     * @param timeUnit 时间维度。   day---天维度   week---周维度   month---月维度   custom---自定义维度  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call queryLoyaltyDistrCall(String tagId, String tagType, Integer startTime, Integer endTime, String timeUnit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v1/performanceservice/endpointbehavior/loyalty";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (tagId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "tagId", tagId));
        if (tagType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "tagType", tagType));
        if (startTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "startTime", startTime));
        if (endTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "endTime", endTime));
        if (timeUnit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "timeUnit", timeUnit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call queryLoyaltyDistrValidateBeforeCall(String tagId, String tagType, Integer startTime, Integer endTime, String timeUnit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tagId' is set
        if (tagId == null) {
            throw new ApiException("Missing the required parameter 'tagId' when calling queryLoyaltyDistr(Async)");
        }
        
        // verify the required parameter 'tagType' is set
        if (tagType == null) {
            throw new ApiException("Missing the required parameter 'tagType' when calling queryLoyaltyDistr(Async)");
        }
        
        // verify the required parameter 'startTime' is set
        if (startTime == null) {
            throw new ApiException("Missing the required parameter 'startTime' when calling queryLoyaltyDistr(Async)");
        }
        
        // verify the required parameter 'endTime' is set
        if (endTime == null) {
            throw new ApiException("Missing the required parameter 'endTime' when calling queryLoyaltyDistr(Async)");
        }
        
        // verify the required parameter 'timeUnit' is set
        if (timeUnit == null) {
            throw new ApiException("Missing the required parameter 'timeUnit' when calling queryLoyaltyDistr(Async)");
        }
        
        
        com.squareup.okhttp.Call call = queryLoyaltyDistrCall(tagId, tagType, startTime, endTime, timeUnit, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 查询回头客记录
     * ## 典型场景 ##    查询回头客记录。           ## 接口功能 ##    查询回头客记录。    首次访问是指半年内无访问记录的访客。    偶尔访问是指半年内存在访问记录的访客。    经常访问是指最近一个月内访问超过7天的访客。    频繁访问时指最近一个月内访问超过15天的访客。 ## 接口约束 ##    1、只有租户管理员获取token并建立会话后才能调用该接口。    2、若时间差大于一个月小于一年，则以月时间粒度返回查询结果。    3、若时间差小于一个月大于一周，则以天时间维度返回查询结果。    4、若时间差小于一周，则以小时维度返回查询结果。    5、不支持超过一年以上的数据查询。 
     * @param tagId 设备标签，若设备标签不存在或查询所有设备，需填写站点ID。 (required)
     * @param tagType 标签类型：  0---TagID为站点ID，  1---TagID为标签ID。  (required)
     * @param startTime 时间戳（秒），最大时间差不超过一年。 (required)
     * @param endTime 时间戳（秒），最大时间差不超过一年。 (required)
     * @param timeUnit 时间维度。   day---天维度   week---周维度   month---月维度   custom---自定义维度  (required)
     * @return FlowDistrResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FlowDistrResp queryLoyaltyDistr(String tagId, String tagType, Integer startTime, Integer endTime, String timeUnit) throws ApiException {
        ApiResponse<FlowDistrResp> resp = queryLoyaltyDistrWithHttpInfo(tagId, tagType, startTime, endTime, timeUnit);
        return resp.getData();
    }

    /**
     * 查询回头客记录
     * ## 典型场景 ##    查询回头客记录。           ## 接口功能 ##    查询回头客记录。    首次访问是指半年内无访问记录的访客。    偶尔访问是指半年内存在访问记录的访客。    经常访问是指最近一个月内访问超过7天的访客。    频繁访问时指最近一个月内访问超过15天的访客。 ## 接口约束 ##    1、只有租户管理员获取token并建立会话后才能调用该接口。    2、若时间差大于一个月小于一年，则以月时间粒度返回查询结果。    3、若时间差小于一个月大于一周，则以天时间维度返回查询结果。    4、若时间差小于一周，则以小时维度返回查询结果。    5、不支持超过一年以上的数据查询。 
     * @param tagId 设备标签，若设备标签不存在或查询所有设备，需填写站点ID。 (required)
     * @param tagType 标签类型：  0---TagID为站点ID，  1---TagID为标签ID。  (required)
     * @param startTime 时间戳（秒），最大时间差不超过一年。 (required)
     * @param endTime 时间戳（秒），最大时间差不超过一年。 (required)
     * @param timeUnit 时间维度。   day---天维度   week---周维度   month---月维度   custom---自定义维度  (required)
     * @return ApiResponse&lt;FlowDistrResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FlowDistrResp> queryLoyaltyDistrWithHttpInfo(String tagId, String tagType, Integer startTime, Integer endTime, String timeUnit) throws ApiException {
        com.squareup.okhttp.Call call = queryLoyaltyDistrValidateBeforeCall(tagId, tagType, startTime, endTime, timeUnit, null, null);
        Type localVarReturnType = new TypeToken<FlowDistrResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 查询回头客记录 (asynchronously)
     * ## 典型场景 ##    查询回头客记录。           ## 接口功能 ##    查询回头客记录。    首次访问是指半年内无访问记录的访客。    偶尔访问是指半年内存在访问记录的访客。    经常访问是指最近一个月内访问超过7天的访客。    频繁访问时指最近一个月内访问超过15天的访客。 ## 接口约束 ##    1、只有租户管理员获取token并建立会话后才能调用该接口。    2、若时间差大于一个月小于一年，则以月时间粒度返回查询结果。    3、若时间差小于一个月大于一周，则以天时间维度返回查询结果。    4、若时间差小于一周，则以小时维度返回查询结果。    5、不支持超过一年以上的数据查询。 
     * @param tagId 设备标签，若设备标签不存在或查询所有设备，需填写站点ID。 (required)
     * @param tagType 标签类型：  0---TagID为站点ID，  1---TagID为标签ID。  (required)
     * @param startTime 时间戳（秒），最大时间差不超过一年。 (required)
     * @param endTime 时间戳（秒），最大时间差不超过一年。 (required)
     * @param timeUnit 时间维度。   day---天维度   week---周维度   month---月维度   custom---自定义维度  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call queryLoyaltyDistrAsync(String tagId, String tagType, Integer startTime, Integer endTime, String timeUnit, final ApiCallback<FlowDistrResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = queryLoyaltyDistrValidateBeforeCall(tagId, tagType, startTime, endTime, timeUnit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FlowDistrResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
