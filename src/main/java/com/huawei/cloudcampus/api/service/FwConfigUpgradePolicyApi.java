/*
 * 防火墙特征库升级
 * 防火墙特征库升级接口 
 *
 * OpenAPI spec version: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.huawei.cloudcampus.api.service;

import com.huawei.cloudcampus.api.ApiCallback;
import com.huawei.cloudcampus.api.ApiClient;
import com.huawei.cloudcampus.api.ApiException;
import com.huawei.cloudcampus.api.ApiResponse;
import com.huawei.cloudcampus.api.Configuration;
import com.huawei.cloudcampus.api.Pair;
import com.huawei.cloudcampus.api.ProgressRequestBody;
import com.huawei.cloudcampus.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.huawei.cloudcampus.api.model.ConfigPolicyResponse;
import com.huawei.cloudcampus.api.model.ConfigUpgradePolicyListDto;
import com.huawei.cloudcampus.api.model.GetPolicyResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FwConfigUpgradePolicyApi {
    private ApiClient apiClient;

    public FwConfigUpgradePolicyApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FwConfigUpgradePolicyApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for configUpgradePolicy
     * @param configUpgradePolicyListDto 防火墙站点特征库升级策略配置信息。 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call configUpgradePolicyCall(ConfigUpgradePolicyListDto configUpgradePolicyListDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = configUpgradePolicyListDto;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v1/oamservice/saupgrade/sites";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call configUpgradePolicyValidateBeforeCall(ConfigUpgradePolicyListDto configUpgradePolicyListDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'configUpgradePolicyListDto' is set
        if (configUpgradePolicyListDto == null) {
            throw new ApiException("Missing the required parameter 'configUpgradePolicyListDto' when calling configUpgradePolicy(Async)");
        }
        
        
        com.squareup.okhttp.Call call = configUpgradePolicyCall(configUpgradePolicyListDto, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 配置防火墙站点特征库升级策略
     * ## 典型场景 ##   提供配置防火墙站点特征库升级策略接口。 ## 接口功能 ##   配置防火墙站点特征库升级策略。 ## 接口约束 ##   该接口必须在存在防火墙的站点下使用。 
     * @param configUpgradePolicyListDto 防火墙站点特征库升级策略配置信息。 (required)
     * @return ConfigPolicyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConfigPolicyResponse configUpgradePolicy(ConfigUpgradePolicyListDto configUpgradePolicyListDto) throws ApiException {
        ApiResponse<ConfigPolicyResponse> resp = configUpgradePolicyWithHttpInfo(configUpgradePolicyListDto);
        return resp.getData();
    }

    /**
     * 配置防火墙站点特征库升级策略
     * ## 典型场景 ##   提供配置防火墙站点特征库升级策略接口。 ## 接口功能 ##   配置防火墙站点特征库升级策略。 ## 接口约束 ##   该接口必须在存在防火墙的站点下使用。 
     * @param configUpgradePolicyListDto 防火墙站点特征库升级策略配置信息。 (required)
     * @return ApiResponse&lt;ConfigPolicyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConfigPolicyResponse> configUpgradePolicyWithHttpInfo(ConfigUpgradePolicyListDto configUpgradePolicyListDto) throws ApiException {
        com.squareup.okhttp.Call call = configUpgradePolicyValidateBeforeCall(configUpgradePolicyListDto, null, null);
        Type localVarReturnType = new TypeToken<ConfigPolicyResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 配置防火墙站点特征库升级策略 (asynchronously)
     * ## 典型场景 ##   提供配置防火墙站点特征库升级策略接口。 ## 接口功能 ##   配置防火墙站点特征库升级策略。 ## 接口约束 ##   该接口必须在存在防火墙的站点下使用。 
     * @param configUpgradePolicyListDto 防火墙站点特征库升级策略配置信息。 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call configUpgradePolicyAsync(ConfigUpgradePolicyListDto configUpgradePolicyListDto, final ApiCallback<ConfigPolicyResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = configUpgradePolicyValidateBeforeCall(configUpgradePolicyListDto, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConfigPolicyResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getUpgradePolicy
     * @param siteId 站点标识，UUID格式。 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUpgradePolicyCall(String siteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v1/oamservice/saupgrade/sites/{siteId}"
            .replaceAll("\\{" + "siteId" + "\\}", apiClient.escapeString(siteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUpgradePolicyValidateBeforeCall(String siteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling getUpgradePolicy(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getUpgradePolicyCall(siteId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 查询防火墙站点特征库升级策略
     * ## 典型场景 ##   提供查询防火墙站点特征库升级策略接口。 ## 接口功能 ##   查询防火墙站点特征库升级策略。 ## 接口约束 ##   该接口必须在存在防火墙的站点下使用。 
     * @param siteId 站点标识，UUID格式。 (required)
     * @return GetPolicyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetPolicyResponse getUpgradePolicy(String siteId) throws ApiException {
        ApiResponse<GetPolicyResponse> resp = getUpgradePolicyWithHttpInfo(siteId);
        return resp.getData();
    }

    /**
     * 查询防火墙站点特征库升级策略
     * ## 典型场景 ##   提供查询防火墙站点特征库升级策略接口。 ## 接口功能 ##   查询防火墙站点特征库升级策略。 ## 接口约束 ##   该接口必须在存在防火墙的站点下使用。 
     * @param siteId 站点标识，UUID格式。 (required)
     * @return ApiResponse&lt;GetPolicyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetPolicyResponse> getUpgradePolicyWithHttpInfo(String siteId) throws ApiException {
        com.squareup.okhttp.Call call = getUpgradePolicyValidateBeforeCall(siteId, null, null);
        Type localVarReturnType = new TypeToken<GetPolicyResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 查询防火墙站点特征库升级策略 (asynchronously)
     * ## 典型场景 ##   提供查询防火墙站点特征库升级策略接口。 ## 接口功能 ##   查询防火墙站点特征库升级策略。 ## 接口约束 ##   该接口必须在存在防火墙的站点下使用。 
     * @param siteId 站点标识，UUID格式。 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUpgradePolicyAsync(String siteId, final ApiCallback<GetPolicyResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUpgradePolicyValidateBeforeCall(siteId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetPolicyResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
