/*
 * 设备基础性能数据信息查询
 * · 查询设备网络速率历史数据 · 查询站点维度TopN设备或者全部设备的上行流量、下行流量 · 查询站点维度设备连接终端数历史数据 · 查询单设备连接终端数历史数据 · 查询租户维度下设备状态历史数据 · 查询基于站点的站点健康度和设备健康度 · 查询站点下TOP N SSID流量和最近在线用户数 
 *
 * OpenAPI spec version: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.huawei.cloudcampus.api.service;

import com.huawei.cloudcampus.api.ApiCallback;
import com.huawei.cloudcampus.api.ApiClient;
import com.huawei.cloudcampus.api.ApiException;
import com.huawei.cloudcampus.api.ApiResponse;
import com.huawei.cloudcampus.api.Configuration;
import com.huawei.cloudcampus.api.Pair;
import com.huawei.cloudcampus.api.ProgressRequestBody;
import com.huawei.cloudcampus.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.huawei.cloudcampus.api.model.DeviceCountTrendResp;
import com.huawei.cloudcampus.api.model.DevicePerformanceResp;
import com.huawei.cloudcampus.api.model.DeviceStationStatisticResp;
import com.huawei.cloudcampus.api.model.DeviceTrafficStatisticResp;
import com.huawei.cloudcampus.api.model.NetworkTrafficResp;
import com.huawei.cloudcampus.api.model.SiteHealthOutputDto;
import com.huawei.cloudcampus.api.model.SiteStationStatisticResp;
import com.huawei.cloudcampus.api.model.TopNSSIDTrafficListDto;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PerformanceOpenApiApi {
    private ApiClient apiClient;

    public PerformanceOpenApiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PerformanceOpenApiApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for queryDeviceCountTrend
     * @param mode 查询维度，tenant---租户。 (required)
     * @param timeDimension 统计周期，day---天、week---周、month---月。 (required)
     * @param beginTime 起始格林威治时间（时间精度对应到秒）。 (required)
     * @param endTime 结束格林威治时间（时间精度对应到秒）。 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call queryDeviceCountTrendCall(String mode, String timeDimension, Long beginTime, Long endTime, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v1/performanceservice/basicperformance/devicecounttrend";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (mode != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "mode", mode));
        if (timeDimension != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "timeDimension", timeDimension));
        if (beginTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "beginTime", beginTime));
        if (endTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "endTime", endTime));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call queryDeviceCountTrendValidateBeforeCall(String mode, String timeDimension, Long beginTime, Long endTime, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'mode' is set
        if (mode == null) {
            throw new ApiException("Missing the required parameter 'mode' when calling queryDeviceCountTrend(Async)");
        }
        
        // verify the required parameter 'timeDimension' is set
        if (timeDimension == null) {
            throw new ApiException("Missing the required parameter 'timeDimension' when calling queryDeviceCountTrend(Async)");
        }
        
        // verify the required parameter 'beginTime' is set
        if (beginTime == null) {
            throw new ApiException("Missing the required parameter 'beginTime' when calling queryDeviceCountTrend(Async)");
        }
        
        // verify the required parameter 'endTime' is set
        if (endTime == null) {
            throw new ApiException("Missing the required parameter 'endTime' when calling queryDeviceCountTrend(Async)");
        }
        
        
        com.squareup.okhttp.Call call = queryDeviceCountTrendCall(mode, timeDimension, beginTime, endTime, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 查询租户维度下设备状态历史数据列表
     * ## 典型场景 ##    提供查询租户维度下设备状态历史数据             ## 接口功能 ##    查询租户维度下设备状态历史数据 ## 接口约束 ##    无。 
     * @param mode 查询维度，tenant---租户。 (required)
     * @param timeDimension 统计周期，day---天、week---周、month---月。 (required)
     * @param beginTime 起始格林威治时间（时间精度对应到秒）。 (required)
     * @param endTime 结束格林威治时间（时间精度对应到秒）。 (required)
     * @return DeviceCountTrendResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeviceCountTrendResp queryDeviceCountTrend(String mode, String timeDimension, Long beginTime, Long endTime) throws ApiException {
        ApiResponse<DeviceCountTrendResp> resp = queryDeviceCountTrendWithHttpInfo(mode, timeDimension, beginTime, endTime);
        return resp.getData();
    }

    /**
     * 查询租户维度下设备状态历史数据列表
     * ## 典型场景 ##    提供查询租户维度下设备状态历史数据             ## 接口功能 ##    查询租户维度下设备状态历史数据 ## 接口约束 ##    无。 
     * @param mode 查询维度，tenant---租户。 (required)
     * @param timeDimension 统计周期，day---天、week---周、month---月。 (required)
     * @param beginTime 起始格林威治时间（时间精度对应到秒）。 (required)
     * @param endTime 结束格林威治时间（时间精度对应到秒）。 (required)
     * @return ApiResponse&lt;DeviceCountTrendResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeviceCountTrendResp> queryDeviceCountTrendWithHttpInfo(String mode, String timeDimension, Long beginTime, Long endTime) throws ApiException {
        com.squareup.okhttp.Call call = queryDeviceCountTrendValidateBeforeCall(mode, timeDimension, beginTime, endTime, null, null);
        Type localVarReturnType = new TypeToken<DeviceCountTrendResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 查询租户维度下设备状态历史数据列表 (asynchronously)
     * ## 典型场景 ##    提供查询租户维度下设备状态历史数据             ## 接口功能 ##    查询租户维度下设备状态历史数据 ## 接口约束 ##    无。 
     * @param mode 查询维度，tenant---租户。 (required)
     * @param timeDimension 统计周期，day---天、week---周、month---月。 (required)
     * @param beginTime 起始格林威治时间（时间精度对应到秒）。 (required)
     * @param endTime 结束格林威治时间（时间精度对应到秒）。 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call queryDeviceCountTrendAsync(String mode, String timeDimension, Long beginTime, Long endTime, final ApiCallback<DeviceCountTrendResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = queryDeviceCountTrendValidateBeforeCall(mode, timeDimension, beginTime, endTime, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeviceCountTrendResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for queryDeviceStationStatistic
     * @param deviceId 设备ID。 (required)
     * @param timeDimension 统计周期，day---天、week---周、month---月、year---年。 (required)
     * @param beginTime 起始格林威治时间（时间精度对应到秒）。 (required)
     * @param endTime 结束格林威治时间（时间精度对应到秒）。 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call queryDeviceStationStatisticCall(UUID deviceId, String timeDimension, Long beginTime, Long endTime, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v1/performanceservice/basicperformance/station/device/{deviceId}"
            .replaceAll("\\{" + "deviceId" + "\\}", apiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (timeDimension != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "timeDimension", timeDimension));
        if (beginTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "beginTime", beginTime));
        if (endTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "endTime", endTime));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call queryDeviceStationStatisticValidateBeforeCall(UUID deviceId, String timeDimension, Long beginTime, Long endTime, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling queryDeviceStationStatistic(Async)");
        }
        
        // verify the required parameter 'timeDimension' is set
        if (timeDimension == null) {
            throw new ApiException("Missing the required parameter 'timeDimension' when calling queryDeviceStationStatistic(Async)");
        }
        
        // verify the required parameter 'beginTime' is set
        if (beginTime == null) {
            throw new ApiException("Missing the required parameter 'beginTime' when calling queryDeviceStationStatistic(Async)");
        }
        
        // verify the required parameter 'endTime' is set
        if (endTime == null) {
            throw new ApiException("Missing the required parameter 'endTime' when calling queryDeviceStationStatistic(Async)");
        }
        
        
        com.squareup.okhttp.Call call = queryDeviceStationStatisticCall(deviceId, timeDimension, beginTime, endTime, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 查询设备连接终端数历史数据
     * ## 典型场景 ##    提供查询设备连接终端数历史数据的接口。 ## 接口功能 ##    支持查询设备连接终端数历史数据。 ## 接口约束 ##    无。   
     * @param deviceId 设备ID。 (required)
     * @param timeDimension 统计周期，day---天、week---周、month---月、year---年。 (required)
     * @param beginTime 起始格林威治时间（时间精度对应到秒）。 (required)
     * @param endTime 结束格林威治时间（时间精度对应到秒）。 (required)
     * @return DeviceStationStatisticResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeviceStationStatisticResp queryDeviceStationStatistic(UUID deviceId, String timeDimension, Long beginTime, Long endTime) throws ApiException {
        ApiResponse<DeviceStationStatisticResp> resp = queryDeviceStationStatisticWithHttpInfo(deviceId, timeDimension, beginTime, endTime);
        return resp.getData();
    }

    /**
     * 查询设备连接终端数历史数据
     * ## 典型场景 ##    提供查询设备连接终端数历史数据的接口。 ## 接口功能 ##    支持查询设备连接终端数历史数据。 ## 接口约束 ##    无。   
     * @param deviceId 设备ID。 (required)
     * @param timeDimension 统计周期，day---天、week---周、month---月、year---年。 (required)
     * @param beginTime 起始格林威治时间（时间精度对应到秒）。 (required)
     * @param endTime 结束格林威治时间（时间精度对应到秒）。 (required)
     * @return ApiResponse&lt;DeviceStationStatisticResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeviceStationStatisticResp> queryDeviceStationStatisticWithHttpInfo(UUID deviceId, String timeDimension, Long beginTime, Long endTime) throws ApiException {
        com.squareup.okhttp.Call call = queryDeviceStationStatisticValidateBeforeCall(deviceId, timeDimension, beginTime, endTime, null, null);
        Type localVarReturnType = new TypeToken<DeviceStationStatisticResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 查询设备连接终端数历史数据 (asynchronously)
     * ## 典型场景 ##    提供查询设备连接终端数历史数据的接口。 ## 接口功能 ##    支持查询设备连接终端数历史数据。 ## 接口约束 ##    无。   
     * @param deviceId 设备ID。 (required)
     * @param timeDimension 统计周期，day---天、week---周、month---月、year---年。 (required)
     * @param beginTime 起始格林威治时间（时间精度对应到秒）。 (required)
     * @param endTime 结束格林威治时间（时间精度对应到秒）。 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call queryDeviceStationStatisticAsync(UUID deviceId, String timeDimension, Long beginTime, Long endTime, final ApiCallback<DeviceStationStatisticResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = queryDeviceStationStatisticValidateBeforeCall(deviceId, timeDimension, beginTime, endTime, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeviceStationStatisticResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for queryDeviceTraffic
     * @param siteId 站点ID。 (required)
     * @param timeDimension 统计周期，day---天、week---周、month---月、year---年。 (required)
     * @param top top数据个数，支持0、5、10、15、20。0代表查询全部设备的上下行流量。 (required)
     * @param beginTime 起始格林威治时间（时间精度对应到秒）。 (required)
     * @param endTime 结束格林威治时间（时间精度对应到秒）。 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call queryDeviceTrafficCall(UUID siteId, String timeDimension, Integer top, Long beginTime, Long endTime, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v1/performanceservice/basicperformance/devicetraffic/statistic/site/{siteId}"
            .replaceAll("\\{" + "siteId" + "\\}", apiClient.escapeString(siteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (timeDimension != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "timeDimension", timeDimension));
        if (top != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "top", top));
        if (beginTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "beginTime", beginTime));
        if (endTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "endTime", endTime));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call queryDeviceTrafficValidateBeforeCall(UUID siteId, String timeDimension, Integer top, Long beginTime, Long endTime, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling queryDeviceTraffic(Async)");
        }
        
        // verify the required parameter 'timeDimension' is set
        if (timeDimension == null) {
            throw new ApiException("Missing the required parameter 'timeDimension' when calling queryDeviceTraffic(Async)");
        }
        
        // verify the required parameter 'top' is set
        if (top == null) {
            throw new ApiException("Missing the required parameter 'top' when calling queryDeviceTraffic(Async)");
        }
        
        // verify the required parameter 'beginTime' is set
        if (beginTime == null) {
            throw new ApiException("Missing the required parameter 'beginTime' when calling queryDeviceTraffic(Async)");
        }
        
        // verify the required parameter 'endTime' is set
        if (endTime == null) {
            throw new ApiException("Missing the required parameter 'endTime' when calling queryDeviceTraffic(Async)");
        }
        
        
        com.squareup.okhttp.Call call = queryDeviceTrafficCall(siteId, timeDimension, top, beginTime, endTime, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 查询站点维度TopN设备或者全部设备的上行流量、下行流量
     * ## 典型场景 ##    提供查询站点维度TopN设备或者全部设备的上行流量、下行流量的接口。           ## 接口功能 ##    支持查询站点维度TopN设备或者全部设备的上行流量、下行流量。 ## 接口约束 ##    无。   
     * @param siteId 站点ID。 (required)
     * @param timeDimension 统计周期，day---天、week---周、month---月、year---年。 (required)
     * @param top top数据个数，支持0、5、10、15、20。0代表查询全部设备的上下行流量。 (required)
     * @param beginTime 起始格林威治时间（时间精度对应到秒）。 (required)
     * @param endTime 结束格林威治时间（时间精度对应到秒）。 (required)
     * @return DeviceTrafficStatisticResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeviceTrafficStatisticResp queryDeviceTraffic(UUID siteId, String timeDimension, Integer top, Long beginTime, Long endTime) throws ApiException {
        ApiResponse<DeviceTrafficStatisticResp> resp = queryDeviceTrafficWithHttpInfo(siteId, timeDimension, top, beginTime, endTime);
        return resp.getData();
    }

    /**
     * 查询站点维度TopN设备或者全部设备的上行流量、下行流量
     * ## 典型场景 ##    提供查询站点维度TopN设备或者全部设备的上行流量、下行流量的接口。           ## 接口功能 ##    支持查询站点维度TopN设备或者全部设备的上行流量、下行流量。 ## 接口约束 ##    无。   
     * @param siteId 站点ID。 (required)
     * @param timeDimension 统计周期，day---天、week---周、month---月、year---年。 (required)
     * @param top top数据个数，支持0、5、10、15、20。0代表查询全部设备的上下行流量。 (required)
     * @param beginTime 起始格林威治时间（时间精度对应到秒）。 (required)
     * @param endTime 结束格林威治时间（时间精度对应到秒）。 (required)
     * @return ApiResponse&lt;DeviceTrafficStatisticResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeviceTrafficStatisticResp> queryDeviceTrafficWithHttpInfo(UUID siteId, String timeDimension, Integer top, Long beginTime, Long endTime) throws ApiException {
        com.squareup.okhttp.Call call = queryDeviceTrafficValidateBeforeCall(siteId, timeDimension, top, beginTime, endTime, null, null);
        Type localVarReturnType = new TypeToken<DeviceTrafficStatisticResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 查询站点维度TopN设备或者全部设备的上行流量、下行流量 (asynchronously)
     * ## 典型场景 ##    提供查询站点维度TopN设备或者全部设备的上行流量、下行流量的接口。           ## 接口功能 ##    支持查询站点维度TopN设备或者全部设备的上行流量、下行流量。 ## 接口约束 ##    无。   
     * @param siteId 站点ID。 (required)
     * @param timeDimension 统计周期，day---天、week---周、month---月、year---年。 (required)
     * @param top top数据个数，支持0、5、10、15、20。0代表查询全部设备的上下行流量。 (required)
     * @param beginTime 起始格林威治时间（时间精度对应到秒）。 (required)
     * @param endTime 结束格林威治时间（时间精度对应到秒）。 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call queryDeviceTrafficAsync(UUID siteId, String timeDimension, Integer top, Long beginTime, Long endTime, final ApiCallback<DeviceTrafficStatisticResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = queryDeviceTrafficValidateBeforeCall(siteId, timeDimension, top, beginTime, endTime, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeviceTrafficStatisticResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for queryNetworkTraffic
     * @param mode 查询维度，device---设备、site---站点。 (required)
     * @param id mode为device时该ID为设备ID，mode为site时，该ID为站点ID。 (required)
     * @param timeDimension 统计周期，day---天、week---周、month---月。 (required)
     * @param beginTime 起始格林威治时间（时间精度对应到秒）。 (required)
     * @param endTime 结束格林威治时间（时间精度对应到秒）。 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call queryNetworkTrafficCall(String mode, UUID id, String timeDimension, Long beginTime, Long endTime, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v1/performanceservice/basicperformance/networktraffic";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (mode != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "mode", mode));
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "id", id));
        if (timeDimension != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "timeDimension", timeDimension));
        if (beginTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "beginTime", beginTime));
        if (endTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "endTime", endTime));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call queryNetworkTrafficValidateBeforeCall(String mode, UUID id, String timeDimension, Long beginTime, Long endTime, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'mode' is set
        if (mode == null) {
            throw new ApiException("Missing the required parameter 'mode' when calling queryNetworkTraffic(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling queryNetworkTraffic(Async)");
        }
        
        // verify the required parameter 'timeDimension' is set
        if (timeDimension == null) {
            throw new ApiException("Missing the required parameter 'timeDimension' when calling queryNetworkTraffic(Async)");
        }
        
        // verify the required parameter 'beginTime' is set
        if (beginTime == null) {
            throw new ApiException("Missing the required parameter 'beginTime' when calling queryNetworkTraffic(Async)");
        }
        
        // verify the required parameter 'endTime' is set
        if (endTime == null) {
            throw new ApiException("Missing the required parameter 'endTime' when calling queryNetworkTraffic(Async)");
        }
        
        
        com.squareup.okhttp.Call call = queryNetworkTrafficCall(mode, id, timeDimension, beginTime, endTime, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 查询设备网络速率历史数据
     * ## 典型场景 ##    提供查询设备网络速率历史数据的接口。           ## 接口功能 ##    查询设备网络速率历史数据。 ## 接口约束 ##    无。   
     * @param mode 查询维度，device---设备、site---站点。 (required)
     * @param id mode为device时该ID为设备ID，mode为site时，该ID为站点ID。 (required)
     * @param timeDimension 统计周期，day---天、week---周、month---月。 (required)
     * @param beginTime 起始格林威治时间（时间精度对应到秒）。 (required)
     * @param endTime 结束格林威治时间（时间精度对应到秒）。 (required)
     * @return NetworkTrafficResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NetworkTrafficResp queryNetworkTraffic(String mode, UUID id, String timeDimension, Long beginTime, Long endTime) throws ApiException {
        ApiResponse<NetworkTrafficResp> resp = queryNetworkTrafficWithHttpInfo(mode, id, timeDimension, beginTime, endTime);
        return resp.getData();
    }

    /**
     * 查询设备网络速率历史数据
     * ## 典型场景 ##    提供查询设备网络速率历史数据的接口。           ## 接口功能 ##    查询设备网络速率历史数据。 ## 接口约束 ##    无。   
     * @param mode 查询维度，device---设备、site---站点。 (required)
     * @param id mode为device时该ID为设备ID，mode为site时，该ID为站点ID。 (required)
     * @param timeDimension 统计周期，day---天、week---周、month---月。 (required)
     * @param beginTime 起始格林威治时间（时间精度对应到秒）。 (required)
     * @param endTime 结束格林威治时间（时间精度对应到秒）。 (required)
     * @return ApiResponse&lt;NetworkTrafficResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NetworkTrafficResp> queryNetworkTrafficWithHttpInfo(String mode, UUID id, String timeDimension, Long beginTime, Long endTime) throws ApiException {
        com.squareup.okhttp.Call call = queryNetworkTrafficValidateBeforeCall(mode, id, timeDimension, beginTime, endTime, null, null);
        Type localVarReturnType = new TypeToken<NetworkTrafficResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 查询设备网络速率历史数据 (asynchronously)
     * ## 典型场景 ##    提供查询设备网络速率历史数据的接口。           ## 接口功能 ##    查询设备网络速率历史数据。 ## 接口约束 ##    无。   
     * @param mode 查询维度，device---设备、site---站点。 (required)
     * @param id mode为device时该ID为设备ID，mode为site时，该ID为站点ID。 (required)
     * @param timeDimension 统计周期，day---天、week---周、month---月。 (required)
     * @param beginTime 起始格林威治时间（时间精度对应到秒）。 (required)
     * @param endTime 结束格林威治时间（时间精度对应到秒）。 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call queryNetworkTrafficAsync(String mode, UUID id, String timeDimension, Long beginTime, Long endTime, final ApiCallback<NetworkTrafficResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = queryNetworkTrafficValidateBeforeCall(mode, id, timeDimension, beginTime, endTime, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NetworkTrafficResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for querySiteHealthList
     * @param siteId 站点ID。 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call querySiteHealthListCall(String siteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v1/performanceservice/basicperformance/siteshealth/{siteId}"
            .replaceAll("\\{" + "siteId" + "\\}", apiClient.escapeString(siteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call querySiteHealthListValidateBeforeCall(String siteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling querySiteHealthList(Async)");
        }
        
        
        com.squareup.okhttp.Call call = querySiteHealthListCall(siteId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 基于站点的站点健康度查询
     * ## 典型场景 ##    根据设备健康度和射频健康度来计算站点健康度。 ## 接口功能 ##    查询基于站点的站点健康度。 ## 接口约束 ##    该接口支持租户下北向管理员（用户角色为“Open Api Operator”）访问，必须在用户会话建立后使用。     
     * @param siteId 站点ID。 (required)
     * @return SiteHealthOutputDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SiteHealthOutputDto querySiteHealthList(String siteId) throws ApiException {
        ApiResponse<SiteHealthOutputDto> resp = querySiteHealthListWithHttpInfo(siteId);
        return resp.getData();
    }

    /**
     * 基于站点的站点健康度查询
     * ## 典型场景 ##    根据设备健康度和射频健康度来计算站点健康度。 ## 接口功能 ##    查询基于站点的站点健康度。 ## 接口约束 ##    该接口支持租户下北向管理员（用户角色为“Open Api Operator”）访问，必须在用户会话建立后使用。     
     * @param siteId 站点ID。 (required)
     * @return ApiResponse&lt;SiteHealthOutputDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SiteHealthOutputDto> querySiteHealthListWithHttpInfo(String siteId) throws ApiException {
        com.squareup.okhttp.Call call = querySiteHealthListValidateBeforeCall(siteId, null, null);
        Type localVarReturnType = new TypeToken<SiteHealthOutputDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 基于站点的站点健康度查询 (asynchronously)
     * ## 典型场景 ##    根据设备健康度和射频健康度来计算站点健康度。 ## 接口功能 ##    查询基于站点的站点健康度。 ## 接口约束 ##    该接口支持租户下北向管理员（用户角色为“Open Api Operator”）访问，必须在用户会话建立后使用。     
     * @param siteId 站点ID。 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call querySiteHealthListAsync(String siteId, final ApiCallback<SiteHealthOutputDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = querySiteHealthListValidateBeforeCall(siteId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SiteHealthOutputDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for querySiteStationStatistic
     * @param siteId 站点ID。 (required)
     * @param timeDimension 统计周期，day---天、week---周、month---月、year---年。 (required)
     * @param beginTime 起始格林威治时间（时间精度对应到秒）。 (required)
     * @param endTime 结束格林威治时间（时间精度对应到秒）。 (required)
     * @param deviceType 查询过滤的设备类型，AP---AP设备、FW---FW设备、AC---AC（Fit AP）设备、ALL---所有设备。 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call querySiteStationStatisticCall(UUID siteId, String timeDimension, Long beginTime, Long endTime, String deviceType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v1/performanceservice/basicperformance/station/sites/{siteId}"
            .replaceAll("\\{" + "siteId" + "\\}", apiClient.escapeString(siteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (timeDimension != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "timeDimension", timeDimension));
        if (beginTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "beginTime", beginTime));
        if (endTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "endTime", endTime));
        if (deviceType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "deviceType", deviceType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call querySiteStationStatisticValidateBeforeCall(UUID siteId, String timeDimension, Long beginTime, Long endTime, String deviceType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling querySiteStationStatistic(Async)");
        }
        
        // verify the required parameter 'timeDimension' is set
        if (timeDimension == null) {
            throw new ApiException("Missing the required parameter 'timeDimension' when calling querySiteStationStatistic(Async)");
        }
        
        // verify the required parameter 'beginTime' is set
        if (beginTime == null) {
            throw new ApiException("Missing the required parameter 'beginTime' when calling querySiteStationStatistic(Async)");
        }
        
        // verify the required parameter 'endTime' is set
        if (endTime == null) {
            throw new ApiException("Missing the required parameter 'endTime' when calling querySiteStationStatistic(Async)");
        }
        
        // verify the required parameter 'deviceType' is set
        if (deviceType == null) {
            throw new ApiException("Missing the required parameter 'deviceType' when calling querySiteStationStatistic(Async)");
        }
        
        
        com.squareup.okhttp.Call call = querySiteStationStatisticCall(siteId, timeDimension, beginTime, endTime, deviceType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 查询站点维度设备连接终端数历史数据
     * ## 典型场景 ##    提供查询站点维度设备连接终端数历史数据的接口。           ## 接口功能 ##    支持查询站点维度设备连接终端数历史数据。 ## 接口约束 ##    无。   
     * @param siteId 站点ID。 (required)
     * @param timeDimension 统计周期，day---天、week---周、month---月、year---年。 (required)
     * @param beginTime 起始格林威治时间（时间精度对应到秒）。 (required)
     * @param endTime 结束格林威治时间（时间精度对应到秒）。 (required)
     * @param deviceType 查询过滤的设备类型，AP---AP设备、FW---FW设备、AC---AC（Fit AP）设备、ALL---所有设备。 (required)
     * @return SiteStationStatisticResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SiteStationStatisticResp querySiteStationStatistic(UUID siteId, String timeDimension, Long beginTime, Long endTime, String deviceType) throws ApiException {
        ApiResponse<SiteStationStatisticResp> resp = querySiteStationStatisticWithHttpInfo(siteId, timeDimension, beginTime, endTime, deviceType);
        return resp.getData();
    }

    /**
     * 查询站点维度设备连接终端数历史数据
     * ## 典型场景 ##    提供查询站点维度设备连接终端数历史数据的接口。           ## 接口功能 ##    支持查询站点维度设备连接终端数历史数据。 ## 接口约束 ##    无。   
     * @param siteId 站点ID。 (required)
     * @param timeDimension 统计周期，day---天、week---周、month---月、year---年。 (required)
     * @param beginTime 起始格林威治时间（时间精度对应到秒）。 (required)
     * @param endTime 结束格林威治时间（时间精度对应到秒）。 (required)
     * @param deviceType 查询过滤的设备类型，AP---AP设备、FW---FW设备、AC---AC（Fit AP）设备、ALL---所有设备。 (required)
     * @return ApiResponse&lt;SiteStationStatisticResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SiteStationStatisticResp> querySiteStationStatisticWithHttpInfo(UUID siteId, String timeDimension, Long beginTime, Long endTime, String deviceType) throws ApiException {
        com.squareup.okhttp.Call call = querySiteStationStatisticValidateBeforeCall(siteId, timeDimension, beginTime, endTime, deviceType, null, null);
        Type localVarReturnType = new TypeToken<SiteStationStatisticResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 查询站点维度设备连接终端数历史数据 (asynchronously)
     * ## 典型场景 ##    提供查询站点维度设备连接终端数历史数据的接口。           ## 接口功能 ##    支持查询站点维度设备连接终端数历史数据。 ## 接口约束 ##    无。   
     * @param siteId 站点ID。 (required)
     * @param timeDimension 统计周期，day---天、week---周、month---月、year---年。 (required)
     * @param beginTime 起始格林威治时间（时间精度对应到秒）。 (required)
     * @param endTime 结束格林威治时间（时间精度对应到秒）。 (required)
     * @param deviceType 查询过滤的设备类型，AP---AP设备、FW---FW设备、AC---AC（Fit AP）设备、ALL---所有设备。 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call querySiteStationStatisticAsync(UUID siteId, String timeDimension, Long beginTime, Long endTime, String deviceType, final ApiCallback<SiteStationStatisticResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = querySiteStationStatisticValidateBeforeCall(siteId, timeDimension, beginTime, endTime, deviceType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SiteStationStatisticResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for queryTopNSSIDTraffic
     * @param siteId 站点ID。 (required)
     * @param beginTime 起始格林威治时间(毫秒)。 (required)
     * @param endTime 结束格林威治时间(毫秒)。 (required)
     * @param timeGranularity 统计周期，day---天、week---周、month---月、year---年。 (required)
     * @param top top数据个数，取值范围：5、10、15、20。5 - 代表TOP 5、10 - 代表TOP 10、15 - 代表TOP 15、20 - 代表TOP 20。 (required)
     * @param deviceType 设备类型，取值范围：0、1、6。0-代表全部设备，1-代表AP，6-代表WAC。 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call queryTopNSSIDTrafficCall(UUID siteId, Long beginTime, Long endTime, String timeGranularity, String top, String deviceType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v1/performanceservice/basicperformance/topnssidtraffic/{siteId}"
            .replaceAll("\\{" + "siteId" + "\\}", apiClient.escapeString(siteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (beginTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "beginTime", beginTime));
        if (endTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "endTime", endTime));
        if (timeGranularity != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "timeGranularity", timeGranularity));
        if (top != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "top", top));
        if (deviceType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "deviceType", deviceType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call queryTopNSSIDTrafficValidateBeforeCall(UUID siteId, Long beginTime, Long endTime, String timeGranularity, String top, String deviceType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling queryTopNSSIDTraffic(Async)");
        }
        
        // verify the required parameter 'beginTime' is set
        if (beginTime == null) {
            throw new ApiException("Missing the required parameter 'beginTime' when calling queryTopNSSIDTraffic(Async)");
        }
        
        // verify the required parameter 'endTime' is set
        if (endTime == null) {
            throw new ApiException("Missing the required parameter 'endTime' when calling queryTopNSSIDTraffic(Async)");
        }
        
        // verify the required parameter 'timeGranularity' is set
        if (timeGranularity == null) {
            throw new ApiException("Missing the required parameter 'timeGranularity' when calling queryTopNSSIDTraffic(Async)");
        }
        
        // verify the required parameter 'top' is set
        if (top == null) {
            throw new ApiException("Missing the required parameter 'top' when calling queryTopNSSIDTraffic(Async)");
        }
        
        // verify the required parameter 'deviceType' is set
        if (deviceType == null) {
            throw new ApiException("Missing the required parameter 'deviceType' when calling queryTopNSSIDTraffic(Async)");
        }
        
        
        com.squareup.okhttp.Call call = queryTopNSSIDTrafficCall(siteId, beginTime, endTime, timeGranularity, top, deviceType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 查询TOP N SSID流量和最近在线用户数
     * ## 典型场景 ##    提供站点下TOP N SSID流量和最近在线用户数的查询。 ## 接口功能 ##    查询站点下TOP N SSID流量和最近在线用户数。 ## 接口约束 ##    该接口支持租户下北向管理员（用户角色为“Open Api Operator”）访问，必须在用户会话建立后使用。 
     * @param siteId 站点ID。 (required)
     * @param beginTime 起始格林威治时间(毫秒)。 (required)
     * @param endTime 结束格林威治时间(毫秒)。 (required)
     * @param timeGranularity 统计周期，day---天、week---周、month---月、year---年。 (required)
     * @param top top数据个数，取值范围：5、10、15、20。5 - 代表TOP 5、10 - 代表TOP 10、15 - 代表TOP 15、20 - 代表TOP 20。 (required)
     * @param deviceType 设备类型，取值范围：0、1、6。0-代表全部设备，1-代表AP，6-代表WAC。 (required)
     * @return TopNSSIDTrafficListDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TopNSSIDTrafficListDto queryTopNSSIDTraffic(UUID siteId, Long beginTime, Long endTime, String timeGranularity, String top, String deviceType) throws ApiException {
        ApiResponse<TopNSSIDTrafficListDto> resp = queryTopNSSIDTrafficWithHttpInfo(siteId, beginTime, endTime, timeGranularity, top, deviceType);
        return resp.getData();
    }

    /**
     * 查询TOP N SSID流量和最近在线用户数
     * ## 典型场景 ##    提供站点下TOP N SSID流量和最近在线用户数的查询。 ## 接口功能 ##    查询站点下TOP N SSID流量和最近在线用户数。 ## 接口约束 ##    该接口支持租户下北向管理员（用户角色为“Open Api Operator”）访问，必须在用户会话建立后使用。 
     * @param siteId 站点ID。 (required)
     * @param beginTime 起始格林威治时间(毫秒)。 (required)
     * @param endTime 结束格林威治时间(毫秒)。 (required)
     * @param timeGranularity 统计周期，day---天、week---周、month---月、year---年。 (required)
     * @param top top数据个数，取值范围：5、10、15、20。5 - 代表TOP 5、10 - 代表TOP 10、15 - 代表TOP 15、20 - 代表TOP 20。 (required)
     * @param deviceType 设备类型，取值范围：0、1、6。0-代表全部设备，1-代表AP，6-代表WAC。 (required)
     * @return ApiResponse&lt;TopNSSIDTrafficListDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TopNSSIDTrafficListDto> queryTopNSSIDTrafficWithHttpInfo(UUID siteId, Long beginTime, Long endTime, String timeGranularity, String top, String deviceType) throws ApiException {
        com.squareup.okhttp.Call call = queryTopNSSIDTrafficValidateBeforeCall(siteId, beginTime, endTime, timeGranularity, top, deviceType, null, null);
        Type localVarReturnType = new TypeToken<TopNSSIDTrafficListDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 查询TOP N SSID流量和最近在线用户数 (asynchronously)
     * ## 典型场景 ##    提供站点下TOP N SSID流量和最近在线用户数的查询。 ## 接口功能 ##    查询站点下TOP N SSID流量和最近在线用户数。 ## 接口约束 ##    该接口支持租户下北向管理员（用户角色为“Open Api Operator”）访问，必须在用户会话建立后使用。 
     * @param siteId 站点ID。 (required)
     * @param beginTime 起始格林威治时间(毫秒)。 (required)
     * @param endTime 结束格林威治时间(毫秒)。 (required)
     * @param timeGranularity 统计周期，day---天、week---周、month---月、year---年。 (required)
     * @param top top数据个数，取值范围：5、10、15、20。5 - 代表TOP 5、10 - 代表TOP 10、15 - 代表TOP 15、20 - 代表TOP 20。 (required)
     * @param deviceType 设备类型，取值范围：0、1、6。0-代表全部设备，1-代表AP，6-代表WAC。 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call queryTopNSSIDTrafficAsync(UUID siteId, Long beginTime, Long endTime, String timeGranularity, String top, String deviceType, final ApiCallback<TopNSSIDTrafficListDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = queryTopNSSIDTrafficValidateBeforeCall(siteId, beginTime, endTime, timeGranularity, top, deviceType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TopNSSIDTrafficListDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for singleDevicePerformanceDetail
     * @param deviceId 设备ID。 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call singleDevicePerformanceDetailCall(UUID deviceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v1/performanceservice/basicperformance/device/{deviceId}"
            .replaceAll("\\{" + "deviceId" + "\\}", apiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call singleDevicePerformanceDetailValidateBeforeCall(UUID deviceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling singleDevicePerformanceDetail(Async)");
        }
        
        
        com.squareup.okhttp.Call call = singleDevicePerformanceDetailCall(deviceId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 查询单设备的性能数据
     * ## 典型场景 ##  查询单个设备基本信息、总流量以及最近一次设备上报的终端连接数、CPU利用率、上行速率、下行速率。           ## 接口功能 ##  单个设备基本信息、总流量以及最近一次设备上报的终端连接数、CPU利用率、上行速率、下行速率。 ## 接口约束 ##  无。   
     * @param deviceId 设备ID。 (required)
     * @return DevicePerformanceResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DevicePerformanceResp singleDevicePerformanceDetail(UUID deviceId) throws ApiException {
        ApiResponse<DevicePerformanceResp> resp = singleDevicePerformanceDetailWithHttpInfo(deviceId);
        return resp.getData();
    }

    /**
     * 查询单设备的性能数据
     * ## 典型场景 ##  查询单个设备基本信息、总流量以及最近一次设备上报的终端连接数、CPU利用率、上行速率、下行速率。           ## 接口功能 ##  单个设备基本信息、总流量以及最近一次设备上报的终端连接数、CPU利用率、上行速率、下行速率。 ## 接口约束 ##  无。   
     * @param deviceId 设备ID。 (required)
     * @return ApiResponse&lt;DevicePerformanceResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DevicePerformanceResp> singleDevicePerformanceDetailWithHttpInfo(UUID deviceId) throws ApiException {
        com.squareup.okhttp.Call call = singleDevicePerformanceDetailValidateBeforeCall(deviceId, null, null);
        Type localVarReturnType = new TypeToken<DevicePerformanceResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 查询单设备的性能数据 (asynchronously)
     * ## 典型场景 ##  查询单个设备基本信息、总流量以及最近一次设备上报的终端连接数、CPU利用率、上行速率、下行速率。           ## 接口功能 ##  单个设备基本信息、总流量以及最近一次设备上报的终端连接数、CPU利用率、上行速率、下行速率。 ## 接口约束 ##  无。   
     * @param deviceId 设备ID。 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call singleDevicePerformanceDetailAsync(UUID deviceId, final ApiCallback<DevicePerformanceResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = singleDevicePerformanceDetailValidateBeforeCall(deviceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DevicePerformanceResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
