/*
 * 框式交换机板卡信息操作
 * 框式上云相关操作接口： 场景：对框式交换机信息查询操作的第三方接口。
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.huawei.cloudcampus.api.service;

import com.huawei.cloudcampus.api.ApiCallback;
import com.huawei.cloudcampus.api.ApiClient;
import com.huawei.cloudcampus.api.ApiException;
import com.huawei.cloudcampus.api.ApiResponse;
import com.huawei.cloudcampus.api.Configuration;
import com.huawei.cloudcampus.api.Pair;
import com.huawei.cloudcampus.api.ProgressRequestBody;
import com.huawei.cloudcampus.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.huawei.cloudcampus.api.model.BoardsInfoOutputDto;
import com.huawei.cloudcampus.api.model.GetFanInfoOutputDto;
import com.huawei.cloudcampus.api.model.GetPowerInfoOutputDto;
import com.huawei.cloudcampus.api.model.GetResetReasonOutputDto;
import com.huawei.cloudcampus.api.model.GetSystemPowerInfoOutputDto;
import com.huawei.cloudcampus.api.model.InterfacesInfoOutputDto;
import com.huawei.cloudcampus.api.model.PowerSupplyDto;
import com.huawei.cloudcampus.api.model.PowerSupplyOutputDto;
import com.huawei.cloudcampus.api.model.ResetBoardOutputDto;
import com.huawei.cloudcampus.api.model.ResetChassisOutputDto;
import com.huawei.cloudcampus.api.model.SwitchoverOutputDto;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CampusSWOperationOpenapiApi {
    private ApiClient apiClient;

    public CampusSWOperationOpenapiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CampusSWOperationOpenapiApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getFanInfo
     * @param id 设备ID，UUID格式。 (required)
     * @param frameNo 机框号。 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFanInfoCall(String id, Integer frameNo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v1/oamservice/faninfo/devices/{id}/frame/{frameNo}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "frameNo" + "\\}", apiClient.escapeString(frameNo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFanInfoValidateBeforeCall(String id, Integer frameNo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getFanInfo(Async)");
        }
        
        // verify the required parameter 'frameNo' is set
        if (frameNo == null) {
            throw new ApiException("Missing the required parameter 'frameNo' when calling getFanInfo(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getFanInfoCall(id, frameNo, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 查询设备风扇信息
     * ## 典型场景 ##   查询设备风扇信息，支持堆叠设备风扇查询。 ## 接口功能 ##   查询设备风扇信息。 ## 接口约束 ##   该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
     * @param id 设备ID，UUID格式。 (required)
     * @param frameNo 机框号。 (required)
     * @return GetFanInfoOutputDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetFanInfoOutputDto getFanInfo(String id, Integer frameNo) throws ApiException {
        ApiResponse<GetFanInfoOutputDto> resp = getFanInfoWithHttpInfo(id, frameNo);
        return resp.getData();
    }

    /**
     * 查询设备风扇信息
     * ## 典型场景 ##   查询设备风扇信息，支持堆叠设备风扇查询。 ## 接口功能 ##   查询设备风扇信息。 ## 接口约束 ##   该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
     * @param id 设备ID，UUID格式。 (required)
     * @param frameNo 机框号。 (required)
     * @return ApiResponse&lt;GetFanInfoOutputDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetFanInfoOutputDto> getFanInfoWithHttpInfo(String id, Integer frameNo) throws ApiException {
        com.squareup.okhttp.Call call = getFanInfoValidateBeforeCall(id, frameNo, null, null);
        Type localVarReturnType = new TypeToken<GetFanInfoOutputDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 查询设备风扇信息 (asynchronously)
     * ## 典型场景 ##   查询设备风扇信息，支持堆叠设备风扇查询。 ## 接口功能 ##   查询设备风扇信息。 ## 接口约束 ##   该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
     * @param id 设备ID，UUID格式。 (required)
     * @param frameNo 机框号。 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFanInfoAsync(String id, Integer frameNo, final ApiCallback<GetFanInfoOutputDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFanInfoValidateBeforeCall(id, frameNo, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetFanInfoOutputDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPowerInfo
     * @param id 设备ID，UUID格式。 (required)
     * @param frameNo 机框号。 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPowerInfoCall(String id, Integer frameNo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v1/oamservice/powerinfo/devices/{id}/frame/{frameNo}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "frameNo" + "\\}", apiClient.escapeString(frameNo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPowerInfoValidateBeforeCall(String id, Integer frameNo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getPowerInfo(Async)");
        }
        
        // verify the required parameter 'frameNo' is set
        if (frameNo == null) {
            throw new ApiException("Missing the required parameter 'frameNo' when calling getPowerInfo(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getPowerInfoCall(id, frameNo, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 查询设备电源信息
     * ## 典型场景 ##   查询设备电源信息，支持查询堆叠设备的电源信息。 ## 接口功能 ##   查询设备电源信息。 ## 接口约束 ##   该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
     * @param id 设备ID，UUID格式。 (required)
     * @param frameNo 机框号。 (required)
     * @return GetPowerInfoOutputDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetPowerInfoOutputDto getPowerInfo(String id, Integer frameNo) throws ApiException {
        ApiResponse<GetPowerInfoOutputDto> resp = getPowerInfoWithHttpInfo(id, frameNo);
        return resp.getData();
    }

    /**
     * 查询设备电源信息
     * ## 典型场景 ##   查询设备电源信息，支持查询堆叠设备的电源信息。 ## 接口功能 ##   查询设备电源信息。 ## 接口约束 ##   该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
     * @param id 设备ID，UUID格式。 (required)
     * @param frameNo 机框号。 (required)
     * @return ApiResponse&lt;GetPowerInfoOutputDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetPowerInfoOutputDto> getPowerInfoWithHttpInfo(String id, Integer frameNo) throws ApiException {
        com.squareup.okhttp.Call call = getPowerInfoValidateBeforeCall(id, frameNo, null, null);
        Type localVarReturnType = new TypeToken<GetPowerInfoOutputDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 查询设备电源信息 (asynchronously)
     * ## 典型场景 ##   查询设备电源信息，支持查询堆叠设备的电源信息。 ## 接口功能 ##   查询设备电源信息。 ## 接口约束 ##   该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
     * @param id 设备ID，UUID格式。 (required)
     * @param frameNo 机框号。 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPowerInfoAsync(String id, Integer frameNo, final ApiCallback<GetPowerInfoOutputDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPowerInfoValidateBeforeCall(id, frameNo, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetPowerInfoOutputDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getResetReason
     * @param id 设备ID，UUID格式。 (required)
     * @param frameNo 机框号。 (required)
     * @param boardName 槽位名称。 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getResetReasonCall(String id, Integer frameNo, String boardName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v1/oamservice/resetreason/devices/{id}/frame/{frameNo}/board/{boardName}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "frameNo" + "\\}", apiClient.escapeString(frameNo.toString()))
            .replaceAll("\\{" + "boardName" + "\\}", apiClient.escapeString(boardName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getResetReasonValidateBeforeCall(String id, Integer frameNo, String boardName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getResetReason(Async)");
        }
        
        // verify the required parameter 'frameNo' is set
        if (frameNo == null) {
            throw new ApiException("Missing the required parameter 'frameNo' when calling getResetReason(Async)");
        }
        
        // verify the required parameter 'boardName' is set
        if (boardName == null) {
            throw new ApiException("Missing the required parameter 'boardName' when calling getResetReason(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getResetReasonCall(id, frameNo, boardName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 查询指定单板复位原因
     * ## 典型场景 ##   查询指定单板复位原因。 ## 接口功能 ##   查询指定单板复位原因。 ## 接口约束 ##   该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
     * @param id 设备ID，UUID格式。 (required)
     * @param frameNo 机框号。 (required)
     * @param boardName 槽位名称。 (required)
     * @return GetResetReasonOutputDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetResetReasonOutputDto getResetReason(String id, Integer frameNo, String boardName) throws ApiException {
        ApiResponse<GetResetReasonOutputDto> resp = getResetReasonWithHttpInfo(id, frameNo, boardName);
        return resp.getData();
    }

    /**
     * 查询指定单板复位原因
     * ## 典型场景 ##   查询指定单板复位原因。 ## 接口功能 ##   查询指定单板复位原因。 ## 接口约束 ##   该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
     * @param id 设备ID，UUID格式。 (required)
     * @param frameNo 机框号。 (required)
     * @param boardName 槽位名称。 (required)
     * @return ApiResponse&lt;GetResetReasonOutputDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetResetReasonOutputDto> getResetReasonWithHttpInfo(String id, Integer frameNo, String boardName) throws ApiException {
        com.squareup.okhttp.Call call = getResetReasonValidateBeforeCall(id, frameNo, boardName, null, null);
        Type localVarReturnType = new TypeToken<GetResetReasonOutputDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 查询指定单板复位原因 (asynchronously)
     * ## 典型场景 ##   查询指定单板复位原因。 ## 接口功能 ##   查询指定单板复位原因。 ## 接口约束 ##   该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
     * @param id 设备ID，UUID格式。 (required)
     * @param frameNo 机框号。 (required)
     * @param boardName 槽位名称。 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getResetReasonAsync(String id, Integer frameNo, String boardName, final ApiCallback<GetResetReasonOutputDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getResetReasonValidateBeforeCall(id, frameNo, boardName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetResetReasonOutputDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSystemPowerInfo
     * @param id 设备ID，UUID格式。 (required)
     * @param frameNo 机框号。 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSystemPowerInfoCall(String id, Integer frameNo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v1/oamservice/systempowerinfo/devices/{id}/frame/{frameNo}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "frameNo" + "\\}", apiClient.escapeString(frameNo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSystemPowerInfoValidateBeforeCall(String id, Integer frameNo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSystemPowerInfo(Async)");
        }
        
        // verify the required parameter 'frameNo' is set
        if (frameNo == null) {
            throw new ApiException("Missing the required parameter 'frameNo' when calling getSystemPowerInfo(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getSystemPowerInfoCall(id, frameNo, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 查询设备系统电源信息
     * ## 典型场景 ##   查询设备系统电源信息，支持查询堆叠设备的系统电源信息。 ## 接口功能 ##   查询设备系统电源信息。 ## 接口约束 ##   该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
     * @param id 设备ID，UUID格式。 (required)
     * @param frameNo 机框号。 (required)
     * @return GetSystemPowerInfoOutputDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetSystemPowerInfoOutputDto getSystemPowerInfo(String id, Integer frameNo) throws ApiException {
        ApiResponse<GetSystemPowerInfoOutputDto> resp = getSystemPowerInfoWithHttpInfo(id, frameNo);
        return resp.getData();
    }

    /**
     * 查询设备系统电源信息
     * ## 典型场景 ##   查询设备系统电源信息，支持查询堆叠设备的系统电源信息。 ## 接口功能 ##   查询设备系统电源信息。 ## 接口约束 ##   该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
     * @param id 设备ID，UUID格式。 (required)
     * @param frameNo 机框号。 (required)
     * @return ApiResponse&lt;GetSystemPowerInfoOutputDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetSystemPowerInfoOutputDto> getSystemPowerInfoWithHttpInfo(String id, Integer frameNo) throws ApiException {
        com.squareup.okhttp.Call call = getSystemPowerInfoValidateBeforeCall(id, frameNo, null, null);
        Type localVarReturnType = new TypeToken<GetSystemPowerInfoOutputDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 查询设备系统电源信息 (asynchronously)
     * ## 典型场景 ##   查询设备系统电源信息，支持查询堆叠设备的系统电源信息。 ## 接口功能 ##   查询设备系统电源信息。 ## 接口约束 ##   该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
     * @param id 设备ID，UUID格式。 (required)
     * @param frameNo 机框号。 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSystemPowerInfoAsync(String id, Integer frameNo, final ApiCallback<GetSystemPowerInfoOutputDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSystemPowerInfoValidateBeforeCall(id, frameNo, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetSystemPowerInfoOutputDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for powerSupply
     * @param request 请求参数。 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call powerSupplyCall(PowerSupplyDto request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v1/oamservice/powersupply";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call powerSupplyValidateBeforeCall(PowerSupplyDto request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling powerSupply(Async)");
        }
        
        
        com.squareup.okhttp.Call call = powerSupplyCall(request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 配置单板上下电
     * ## 典型场景 ##   根据设备ID和单板名称，给指定单板上下电。 ## 接口功能 ##   配置单板上下电。 ## 接口约束 ##   该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
     * @param request 请求参数。 (required)
     * @return PowerSupplyOutputDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PowerSupplyOutputDto powerSupply(PowerSupplyDto request) throws ApiException {
        ApiResponse<PowerSupplyOutputDto> resp = powerSupplyWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * 配置单板上下电
     * ## 典型场景 ##   根据设备ID和单板名称，给指定单板上下电。 ## 接口功能 ##   配置单板上下电。 ## 接口约束 ##   该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
     * @param request 请求参数。 (required)
     * @return ApiResponse&lt;PowerSupplyOutputDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PowerSupplyOutputDto> powerSupplyWithHttpInfo(PowerSupplyDto request) throws ApiException {
        com.squareup.okhttp.Call call = powerSupplyValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<PowerSupplyOutputDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 配置单板上下电 (asynchronously)
     * ## 典型场景 ##   根据设备ID和单板名称，给指定单板上下电。 ## 接口功能 ##   配置单板上下电。 ## 接口约束 ##   该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
     * @param request 请求参数。 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call powerSupplyAsync(PowerSupplyDto request, final ApiCallback<PowerSupplyOutputDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = powerSupplyValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PowerSupplyOutputDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for queryAllBoards
     * @param deviceId 设备ID或堆叠ID，UUID格式。 (required)
     * @param frameNo 机框号。 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call queryAllBoardsCall(String deviceId, Integer frameNo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v1/oamservice/boards/devices/{deviceId}/frame/{frameNo}"
            .replaceAll("\\{" + "deviceId" + "\\}", apiClient.escapeString(deviceId.toString()))
            .replaceAll("\\{" + "frameNo" + "\\}", apiClient.escapeString(frameNo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call queryAllBoardsValidateBeforeCall(String deviceId, Integer frameNo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling queryAllBoards(Async)");
        }
        
        // verify the required parameter 'frameNo' is set
        if (frameNo == null) {
            throw new ApiException("Missing the required parameter 'frameNo' when calling queryAllBoards(Async)");
        }
        
        
        com.squareup.okhttp.Call call = queryAllBoardsCall(deviceId, frameNo, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 查询插卡框式交换机单板信息
     * ## 典型场景 ##    提供查询框式交换机单板信息接口。 ## 接口功能 ##    基于单板维度查询框式交换机单板信息。 ## 接口约束 ##    该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
     * @param deviceId 设备ID或堆叠ID，UUID格式。 (required)
     * @param frameNo 机框号。 (required)
     * @return BoardsInfoOutputDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BoardsInfoOutputDto queryAllBoards(String deviceId, Integer frameNo) throws ApiException {
        ApiResponse<BoardsInfoOutputDto> resp = queryAllBoardsWithHttpInfo(deviceId, frameNo);
        return resp.getData();
    }

    /**
     * 查询插卡框式交换机单板信息
     * ## 典型场景 ##    提供查询框式交换机单板信息接口。 ## 接口功能 ##    基于单板维度查询框式交换机单板信息。 ## 接口约束 ##    该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
     * @param deviceId 设备ID或堆叠ID，UUID格式。 (required)
     * @param frameNo 机框号。 (required)
     * @return ApiResponse&lt;BoardsInfoOutputDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BoardsInfoOutputDto> queryAllBoardsWithHttpInfo(String deviceId, Integer frameNo) throws ApiException {
        com.squareup.okhttp.Call call = queryAllBoardsValidateBeforeCall(deviceId, frameNo, null, null);
        Type localVarReturnType = new TypeToken<BoardsInfoOutputDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 查询插卡框式交换机单板信息 (asynchronously)
     * ## 典型场景 ##    提供查询框式交换机单板信息接口。 ## 接口功能 ##    基于单板维度查询框式交换机单板信息。 ## 接口约束 ##    该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
     * @param deviceId 设备ID或堆叠ID，UUID格式。 (required)
     * @param frameNo 机框号。 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call queryAllBoardsAsync(String deviceId, Integer frameNo, final ApiCallback<BoardsInfoOutputDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = queryAllBoardsValidateBeforeCall(deviceId, frameNo, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BoardsInfoOutputDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for queryInterfaceDetail
     * @param deviceId 设备ID或堆叠ID， UUID格式。 (required)
     * @param frameNo 机框号。 (required)
     * @param slotNo 单板索引号，槽位号。 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call queryInterfaceDetailCall(String deviceId, Integer frameNo, Integer slotNo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v1/oamservice/interface/devices/{deviceId}/frame/{frameNo}/slot/{slotNo}"
            .replaceAll("\\{" + "deviceId" + "\\}", apiClient.escapeString(deviceId.toString()))
            .replaceAll("\\{" + "frameNo" + "\\}", apiClient.escapeString(frameNo.toString()))
            .replaceAll("\\{" + "slotNo" + "\\}", apiClient.escapeString(slotNo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call queryInterfaceDetailValidateBeforeCall(String deviceId, Integer frameNo, Integer slotNo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling queryInterfaceDetail(Async)");
        }
        
        // verify the required parameter 'frameNo' is set
        if (frameNo == null) {
            throw new ApiException("Missing the required parameter 'frameNo' when calling queryInterfaceDetail(Async)");
        }
        
        // verify the required parameter 'slotNo' is set
        if (slotNo == null) {
            throw new ApiException("Missing the required parameter 'slotNo' when calling queryInterfaceDetail(Async)");
        }
        
        
        com.squareup.okhttp.Call call = queryInterfaceDetailCall(deviceId, frameNo, slotNo, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 查询单板接口信息
     * ## 典型场景 ##    根据设备ID和槽位号，查询单板接口信息。 ## 接口功能 ##    基于单板维度查询接口信息。 ## 接口约束 ##    该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
     * @param deviceId 设备ID或堆叠ID， UUID格式。 (required)
     * @param frameNo 机框号。 (required)
     * @param slotNo 单板索引号，槽位号。 (required)
     * @return InterfacesInfoOutputDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InterfacesInfoOutputDto queryInterfaceDetail(String deviceId, Integer frameNo, Integer slotNo) throws ApiException {
        ApiResponse<InterfacesInfoOutputDto> resp = queryInterfaceDetailWithHttpInfo(deviceId, frameNo, slotNo);
        return resp.getData();
    }

    /**
     * 查询单板接口信息
     * ## 典型场景 ##    根据设备ID和槽位号，查询单板接口信息。 ## 接口功能 ##    基于单板维度查询接口信息。 ## 接口约束 ##    该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
     * @param deviceId 设备ID或堆叠ID， UUID格式。 (required)
     * @param frameNo 机框号。 (required)
     * @param slotNo 单板索引号，槽位号。 (required)
     * @return ApiResponse&lt;InterfacesInfoOutputDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InterfacesInfoOutputDto> queryInterfaceDetailWithHttpInfo(String deviceId, Integer frameNo, Integer slotNo) throws ApiException {
        com.squareup.okhttp.Call call = queryInterfaceDetailValidateBeforeCall(deviceId, frameNo, slotNo, null, null);
        Type localVarReturnType = new TypeToken<InterfacesInfoOutputDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 查询单板接口信息 (asynchronously)
     * ## 典型场景 ##    根据设备ID和槽位号，查询单板接口信息。 ## 接口功能 ##    基于单板维度查询接口信息。 ## 接口约束 ##    该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
     * @param deviceId 设备ID或堆叠ID， UUID格式。 (required)
     * @param frameNo 机框号。 (required)
     * @param slotNo 单板索引号，槽位号。 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call queryInterfaceDetailAsync(String deviceId, Integer frameNo, Integer slotNo, final ApiCallback<InterfacesInfoOutputDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = queryInterfaceDetailValidateBeforeCall(deviceId, frameNo, slotNo, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InterfacesInfoOutputDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for resetBoard
     * @param id 设备ID，UUID格式。 (required)
     * @param frameNo 机框号。 (required)
     * @param boardName 槽位名称。 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call resetBoardCall(String id, Integer frameNo, String boardName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v1/oamservice/reset/devices/{id}/frame/{frameNo}/board/{boardName}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "frameNo" + "\\}", apiClient.escapeString(frameNo.toString()))
            .replaceAll("\\{" + "boardName" + "\\}", apiClient.escapeString(boardName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call resetBoardValidateBeforeCall(String id, Integer frameNo, String boardName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling resetBoard(Async)");
        }
        
        // verify the required parameter 'frameNo' is set
        if (frameNo == null) {
            throw new ApiException("Missing the required parameter 'frameNo' when calling resetBoard(Async)");
        }
        
        // verify the required parameter 'boardName' is set
        if (boardName == null) {
            throw new ApiException("Missing the required parameter 'boardName' when calling resetBoard(Async)");
        }
        
        
        com.squareup.okhttp.Call call = resetBoardCall(id, frameNo, boardName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 复位单板
     * ## 典型场景 ##   根据设备ID和单板名称，复位指定单板。 ## 接口功能 ##   复位单板。 ## 接口约束 ##   该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
     * @param id 设备ID，UUID格式。 (required)
     * @param frameNo 机框号。 (required)
     * @param boardName 槽位名称。 (required)
     * @return ResetBoardOutputDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResetBoardOutputDto resetBoard(String id, Integer frameNo, String boardName) throws ApiException {
        ApiResponse<ResetBoardOutputDto> resp = resetBoardWithHttpInfo(id, frameNo, boardName);
        return resp.getData();
    }

    /**
     * 复位单板
     * ## 典型场景 ##   根据设备ID和单板名称，复位指定单板。 ## 接口功能 ##   复位单板。 ## 接口约束 ##   该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
     * @param id 设备ID，UUID格式。 (required)
     * @param frameNo 机框号。 (required)
     * @param boardName 槽位名称。 (required)
     * @return ApiResponse&lt;ResetBoardOutputDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResetBoardOutputDto> resetBoardWithHttpInfo(String id, Integer frameNo, String boardName) throws ApiException {
        com.squareup.okhttp.Call call = resetBoardValidateBeforeCall(id, frameNo, boardName, null, null);
        Type localVarReturnType = new TypeToken<ResetBoardOutputDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 复位单板 (asynchronously)
     * ## 典型场景 ##   根据设备ID和单板名称，复位指定单板。 ## 接口功能 ##   复位单板。 ## 接口约束 ##   该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
     * @param id 设备ID，UUID格式。 (required)
     * @param frameNo 机框号。 (required)
     * @param boardName 槽位名称。 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call resetBoardAsync(String id, Integer frameNo, String boardName, final ApiCallback<ResetBoardOutputDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = resetBoardValidateBeforeCall(id, frameNo, boardName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResetBoardOutputDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for resetChassis
     * @param deviceId 设备ID或堆叠ID， UUID格式。 (required)
     * @param frameNo 机框号。 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call resetChassisCall(String deviceId, Integer frameNo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v1/oamservice/resetchassis/devices/{deviceId}/frame/{frameNo}"
            .replaceAll("\\{" + "deviceId" + "\\}", apiClient.escapeString(deviceId.toString()))
            .replaceAll("\\{" + "frameNo" + "\\}", apiClient.escapeString(frameNo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call resetChassisValidateBeforeCall(String deviceId, Integer frameNo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling resetChassis(Async)");
        }
        
        // verify the required parameter 'frameNo' is set
        if (frameNo == null) {
            throw new ApiException("Missing the required parameter 'frameNo' when calling resetChassis(Async)");
        }
        
        
        com.squareup.okhttp.Call call = resetChassisCall(deviceId, frameNo, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 框式交换机整框重启
     * ## 典型场景 ##    框式交换机整框重启。 ## 接口功能 ##    框式整框重启。 ## 接口约束 ##    北向接口管理员可以访问。 
     * @param deviceId 设备ID或堆叠ID， UUID格式。 (required)
     * @param frameNo 机框号。 (required)
     * @return ResetChassisOutputDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResetChassisOutputDto resetChassis(String deviceId, Integer frameNo) throws ApiException {
        ApiResponse<ResetChassisOutputDto> resp = resetChassisWithHttpInfo(deviceId, frameNo);
        return resp.getData();
    }

    /**
     * 框式交换机整框重启
     * ## 典型场景 ##    框式交换机整框重启。 ## 接口功能 ##    框式整框重启。 ## 接口约束 ##    北向接口管理员可以访问。 
     * @param deviceId 设备ID或堆叠ID， UUID格式。 (required)
     * @param frameNo 机框号。 (required)
     * @return ApiResponse&lt;ResetChassisOutputDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResetChassisOutputDto> resetChassisWithHttpInfo(String deviceId, Integer frameNo) throws ApiException {
        com.squareup.okhttp.Call call = resetChassisValidateBeforeCall(deviceId, frameNo, null, null);
        Type localVarReturnType = new TypeToken<ResetChassisOutputDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 框式交换机整框重启 (asynchronously)
     * ## 典型场景 ##    框式交换机整框重启。 ## 接口功能 ##    框式整框重启。 ## 接口约束 ##    北向接口管理员可以访问。 
     * @param deviceId 设备ID或堆叠ID， UUID格式。 (required)
     * @param frameNo 机框号。 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call resetChassisAsync(String deviceId, Integer frameNo, final ApiCallback<ResetChassisOutputDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = resetChassisValidateBeforeCall(deviceId, frameNo, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResetChassisOutputDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for switchover
     * @param deviceId 设备ID或者堆叠ID， UUID格式。 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call switchoverCall(String deviceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/controller/campus/v1/oamservice/switchover/{deviceId}"
            .replaceAll("\\{" + "deviceId" + "\\}", apiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call switchoverValidateBeforeCall(String deviceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling switchover(Async)");
        }
        
        
        com.squareup.okhttp.Call call = switchoverCall(deviceId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 框式交换机主备倒换
     * ## 典型场景 ##    框式交换机主备倒换。 ## 接口功能 ##    框式或者框式堆叠主备倒换。 ## 接口约束 ##    北向接口管理员可以访问。 
     * @param deviceId 设备ID或者堆叠ID， UUID格式。 (required)
     * @return SwitchoverOutputDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SwitchoverOutputDto switchover(String deviceId) throws ApiException {
        ApiResponse<SwitchoverOutputDto> resp = switchoverWithHttpInfo(deviceId);
        return resp.getData();
    }

    /**
     * 框式交换机主备倒换
     * ## 典型场景 ##    框式交换机主备倒换。 ## 接口功能 ##    框式或者框式堆叠主备倒换。 ## 接口约束 ##    北向接口管理员可以访问。 
     * @param deviceId 设备ID或者堆叠ID， UUID格式。 (required)
     * @return ApiResponse&lt;SwitchoverOutputDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SwitchoverOutputDto> switchoverWithHttpInfo(String deviceId) throws ApiException {
        com.squareup.okhttp.Call call = switchoverValidateBeforeCall(deviceId, null, null);
        Type localVarReturnType = new TypeToken<SwitchoverOutputDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 框式交换机主备倒换 (asynchronously)
     * ## 典型场景 ##    框式交换机主备倒换。 ## 接口功能 ##    框式或者框式堆叠主备倒换。 ## 接口约束 ##    北向接口管理员可以访问。 
     * @param deviceId 设备ID或者堆叠ID， UUID格式。 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call switchoverAsync(String deviceId, final ApiCallback<SwitchoverOutputDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = switchoverValidateBeforeCall(deviceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SwitchoverOutputDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
