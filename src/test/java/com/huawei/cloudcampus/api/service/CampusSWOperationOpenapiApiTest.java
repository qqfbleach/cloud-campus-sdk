/*
 * 框式交换机板卡信息操作
 * 框式上云相关操作接口： 场景：对框式交换机信息查询操作的第三方接口。
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.huawei.cloudcampus.api.service;

import com.huawei.cloudcampus.api.ApiException;
import com.huawei.cloudcampus.api.model.BoardsInfoOutputDto;
import com.huawei.cloudcampus.api.model.GetFanInfoOutputDto;
import com.huawei.cloudcampus.api.model.GetPowerInfoOutputDto;
import com.huawei.cloudcampus.api.model.GetResetReasonOutputDto;
import com.huawei.cloudcampus.api.model.GetSystemPowerInfoOutputDto;
import com.huawei.cloudcampus.api.model.InterfacesInfoOutputDto;
import com.huawei.cloudcampus.api.model.PowerSupplyDto;
import com.huawei.cloudcampus.api.model.PowerSupplyOutputDto;
import com.huawei.cloudcampus.api.model.ResetBoardOutputDto;
import com.huawei.cloudcampus.api.model.ResetChassisOutputDto;
import com.huawei.cloudcampus.api.model.SwitchoverOutputDto;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CampusSWOperationOpenapiApi
 */
@Ignore
public class CampusSWOperationOpenapiApiTest {

    private final CampusSWOperationOpenapiApi api = new CampusSWOperationOpenapiApi();

    
    /**
     * 查询设备风扇信息
     *
     * ## 典型场景 ##   查询设备风扇信息，支持堆叠设备风扇查询。 ## 接口功能 ##   查询设备风扇信息。 ## 接口约束 ##   该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFanInfoTest() throws ApiException {
        String id = null;
        Integer frameNo = null;
        GetFanInfoOutputDto response = api.getFanInfo(id, frameNo);

        // TODO: test validations
    }
    
    /**
     * 查询设备电源信息
     *
     * ## 典型场景 ##   查询设备电源信息，支持查询堆叠设备的电源信息。 ## 接口功能 ##   查询设备电源信息。 ## 接口约束 ##   该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPowerInfoTest() throws ApiException {
        String id = null;
        Integer frameNo = null;
        GetPowerInfoOutputDto response = api.getPowerInfo(id, frameNo);

        // TODO: test validations
    }
    
    /**
     * 查询指定单板复位原因
     *
     * ## 典型场景 ##   查询指定单板复位原因。 ## 接口功能 ##   查询指定单板复位原因。 ## 接口约束 ##   该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getResetReasonTest() throws ApiException {
        String id = null;
        Integer frameNo = null;
        String boardName = null;
        GetResetReasonOutputDto response = api.getResetReason(id, frameNo, boardName);

        // TODO: test validations
    }
    
    /**
     * 查询设备系统电源信息
     *
     * ## 典型场景 ##   查询设备系统电源信息，支持查询堆叠设备的系统电源信息。 ## 接口功能 ##   查询设备系统电源信息。 ## 接口约束 ##   该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSystemPowerInfoTest() throws ApiException {
        String id = null;
        Integer frameNo = null;
        GetSystemPowerInfoOutputDto response = api.getSystemPowerInfo(id, frameNo);

        // TODO: test validations
    }
    
    /**
     * 配置单板上下电
     *
     * ## 典型场景 ##   根据设备ID和单板名称，给指定单板上下电。 ## 接口功能 ##   配置单板上下电。 ## 接口约束 ##   该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void powerSupplyTest() throws ApiException {
        PowerSupplyDto request = null;
        PowerSupplyOutputDto response = api.powerSupply(request);

        // TODO: test validations
    }
    
    /**
     * 查询插卡框式交换机单板信息
     *
     * ## 典型场景 ##    提供查询框式交换机单板信息接口。 ## 接口功能 ##    基于单板维度查询框式交换机单板信息。 ## 接口约束 ##    该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void queryAllBoardsTest() throws ApiException {
        String deviceId = null;
        Integer frameNo = null;
        BoardsInfoOutputDto response = api.queryAllBoards(deviceId, frameNo);

        // TODO: test validations
    }
    
    /**
     * 查询单板接口信息
     *
     * ## 典型场景 ##    根据设备ID和槽位号，查询单板接口信息。 ## 接口功能 ##    基于单板维度查询接口信息。 ## 接口约束 ##    该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void queryInterfaceDetailTest() throws ApiException {
        String deviceId = null;
        Integer frameNo = null;
        Integer slotNo = null;
        InterfacesInfoOutputDto response = api.queryInterfaceDetail(deviceId, frameNo, slotNo);

        // TODO: test validations
    }
    
    /**
     * 复位单板
     *
     * ## 典型场景 ##   根据设备ID和单板名称，复位指定单板。 ## 接口功能 ##   复位单板。 ## 接口约束 ##   该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resetBoardTest() throws ApiException {
        String id = null;
        Integer frameNo = null;
        String boardName = null;
        ResetBoardOutputDto response = api.resetBoard(id, frameNo, boardName);

        // TODO: test validations
    }
    
    /**
     * 框式交换机整框重启
     *
     * ## 典型场景 ##    框式交换机整框重启。 ## 接口功能 ##    框式整框重启。 ## 接口约束 ##    北向接口管理员可以访问。 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resetChassisTest() throws ApiException {
        String deviceId = null;
        Integer frameNo = null;
        ResetChassisOutputDto response = api.resetChassis(deviceId, frameNo);

        // TODO: test validations
    }
    
    /**
     * 框式交换机主备倒换
     *
     * ## 典型场景 ##    框式交换机主备倒换。 ## 接口功能 ##    框式或者框式堆叠主备倒换。 ## 接口约束 ##    北向接口管理员可以访问。 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void switchoverTest() throws ApiException {
        String deviceId = null;
        SwitchoverOutputDto response = api.switchover(deviceId);

        // TODO: test validations
    }
    
}
